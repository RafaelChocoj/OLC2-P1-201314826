// Code generated from RustPar.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser // RustPar

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

import "OLC2/interfaces"
import "OLC2/expresion"
import "OLC2/instruction"
import "OLC2/instructionExpre"
import arrayList "github.com/colegno/arraylist"

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 78, 1081,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 3, 2, 3, 2, 3, 2, 3, 3, 7, 3, 117, 10, 3, 12, 3, 14,
	3, 120, 11, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 7, 4, 132, 10, 4, 12, 4, 14, 4, 135, 11, 4, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 5, 5, 143, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 186,
	10, 6, 3, 7, 3, 7, 3, 7, 5, 7, 191, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 8, 3, 8, 3, 8, 3, 8, 7, 8, 202, 10, 8, 12, 8, 14, 8, 205, 11, 8, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 5, 9, 220, 10, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 279, 10, 11,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 320, 10, 12,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 340, 10, 13,
	3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 359, 10, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 7, 15, 374, 10, 15, 12, 15, 14, 15, 377, 11, 15, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 389, 10,
	16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 397, 10, 17, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 20, 3,
	20, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 427, 10, 22, 3, 23, 3,
	23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	7, 24, 441, 10, 24, 12, 24, 14, 24, 444, 11, 24, 3, 25, 3, 25, 3, 25, 3,
	25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 7, 25, 457, 10, 25,
	12, 25, 14, 25, 460, 11, 25, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 466, 10,
	26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 5, 27, 555, 10, 27, 3, 28, 3, 28, 3, 28, 5, 28,
	560, 10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 576, 10, 29, 3, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 5, 30, 594, 10, 30, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 7, 31, 604, 10, 31, 12, 31, 14, 31, 607, 11,
	31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 7, 32, 617,
	10, 32, 12, 32, 14, 32, 620, 11, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 653, 10, 34, 3, 35, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 5, 35, 670, 10, 35, 3, 36, 6, 36, 673, 10, 36, 13, 36, 14,
	36, 674, 3, 36, 3, 36, 3, 37, 6, 37, 680, 10, 37, 13, 37, 14, 37, 681,
	3, 37, 3, 37, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 713, 10,
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3,
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 5, 40, 747, 10, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 7, 41, 757, 10, 41, 12, 41, 14, 41, 760, 11, 41, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 7, 42, 770, 10, 42, 12, 42, 14,
	42, 773, 11, 42, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 779, 10, 43, 3, 43,
	3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 789, 10, 43, 3,
	44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 7, 45, 806, 10, 45, 12, 45, 14, 45, 809, 11,
	45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 819,
	10, 46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 838, 10,
	48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49,
	3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 5, 49, 857, 10, 49, 3,
	49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 7, 49, 865, 10, 49, 12, 49, 14,
	49, 868, 11, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	5, 50, 962, 10, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3,
	50, 7, 50, 993, 10, 50, 12, 50, 14, 50, 996, 11, 50, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 52, 3, 52, 3, 52, 3, 52, 5, 52, 1009, 10,
	52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53,
	3, 53, 3, 53, 3, 53, 7, 53, 1024, 10, 53, 12, 53, 14, 53, 1027, 11, 53,
	3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3,
	54, 3, 54, 3, 54, 3, 54, 5, 54, 1043, 10, 54, 3, 55, 3, 55, 3, 55, 3, 55,
	3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 7,
	55, 1059, 10, 55, 12, 55, 14, 55, 1062, 11, 55, 3, 56, 6, 56, 1065, 10,
	56, 13, 56, 14, 56, 1066, 3, 56, 3, 56, 5, 56, 1071, 10, 56, 3, 56, 3,
	56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 1079, 10, 56, 3, 56, 2, 16, 6, 14,
	28, 46, 48, 60, 62, 80, 82, 88, 96, 98, 104, 108, 57, 2, 4, 6, 8, 10, 12,
	14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48,
	50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84,
	86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 2, 6, 4, 2, 62,
	63, 66, 66, 3, 2, 64, 65, 3, 2, 56, 61, 3, 2, 30, 31, 2, 1142, 2, 112,
	3, 2, 2, 2, 4, 118, 3, 2, 2, 2, 6, 123, 3, 2, 2, 2, 8, 142, 3, 2, 2, 2,
	10, 185, 3, 2, 2, 2, 12, 190, 3, 2, 2, 2, 14, 192, 3, 2, 2, 2, 16, 219,
	3, 2, 2, 2, 18, 221, 3, 2, 2, 2, 20, 278, 3, 2, 2, 2, 22, 319, 3, 2, 2,
	2, 24, 339, 3, 2, 2, 2, 26, 341, 3, 2, 2, 2, 28, 358, 3, 2, 2, 2, 30, 388,
	3, 2, 2, 2, 32, 396, 3, 2, 2, 2, 34, 398, 3, 2, 2, 2, 36, 404, 3, 2, 2,
	2, 38, 408, 3, 2, 2, 2, 40, 413, 3, 2, 2, 2, 42, 426, 3, 2, 2, 2, 44, 428,
	3, 2, 2, 2, 46, 431, 3, 2, 2, 2, 48, 445, 3, 2, 2, 2, 50, 465, 3, 2, 2,
	2, 52, 554, 3, 2, 2, 2, 54, 559, 3, 2, 2, 2, 56, 575, 3, 2, 2, 2, 58, 593,
	3, 2, 2, 2, 60, 595, 3, 2, 2, 2, 62, 608, 3, 2, 2, 2, 64, 621, 3, 2, 2,
	2, 66, 652, 3, 2, 2, 2, 68, 669, 3, 2, 2, 2, 70, 672, 3, 2, 2, 2, 72, 679,
	3, 2, 2, 2, 74, 685, 3, 2, 2, 2, 76, 691, 3, 2, 2, 2, 78, 746, 3, 2, 2,
	2, 80, 748, 3, 2, 2, 2, 82, 761, 3, 2, 2, 2, 84, 788, 3, 2, 2, 2, 86, 790,
	3, 2, 2, 2, 88, 796, 3, 2, 2, 2, 90, 818, 3, 2, 2, 2, 92, 820, 3, 2, 2,
	2, 94, 837, 3, 2, 2, 2, 96, 856, 3, 2, 2, 2, 98, 961, 3, 2, 2, 2, 100,
	997, 3, 2, 2, 2, 102, 1008, 3, 2, 2, 2, 104, 1010, 3, 2, 2, 2, 106, 1042,
	3, 2, 2, 2, 108, 1044, 3, 2, 2, 2, 110, 1078, 3, 2, 2, 2, 112, 113, 5,
	6, 4, 2, 113, 114, 8, 2, 1, 2, 114, 3, 3, 2, 2, 2, 115, 117, 5, 20, 11,
	2, 116, 115, 3, 2, 2, 2, 117, 120, 3, 2, 2, 2, 118, 116, 3, 2, 2, 2, 118,
	119, 3, 2, 2, 2, 119, 121, 3, 2, 2, 2, 120, 118, 3, 2, 2, 2, 121, 122,
	8, 3, 1, 2, 122, 5, 3, 2, 2, 2, 123, 124, 8, 4, 1, 2, 124, 125, 5, 8, 5,
	2, 125, 126, 8, 4, 1, 2, 126, 133, 3, 2, 2, 2, 127, 128, 12, 4, 2, 2, 128,
	129, 5, 8, 5, 2, 129, 130, 8, 4, 1, 2, 130, 132, 3, 2, 2, 2, 131, 127,
	3, 2, 2, 2, 132, 135, 3, 2, 2, 2, 133, 131, 3, 2, 2, 2, 133, 134, 3, 2,
	2, 2, 134, 7, 3, 2, 2, 2, 135, 133, 3, 2, 2, 2, 136, 137, 5, 10, 6, 2,
	137, 138, 8, 5, 1, 2, 138, 143, 3, 2, 2, 2, 139, 140, 5, 26, 14, 2, 140,
	141, 8, 5, 1, 2, 141, 143, 3, 2, 2, 2, 142, 136, 3, 2, 2, 2, 142, 139,
	3, 2, 2, 2, 143, 9, 3, 2, 2, 2, 144, 145, 5, 18, 10, 2, 145, 146, 8, 6,
	1, 2, 146, 186, 3, 2, 2, 2, 147, 148, 5, 12, 7, 2, 148, 149, 7, 41, 2,
	2, 149, 150, 7, 55, 2, 2, 150, 151, 7, 71, 2, 2, 151, 152, 7, 72, 2, 2,
	152, 153, 7, 40, 2, 2, 153, 154, 5, 94, 48, 2, 154, 155, 5, 90, 46, 2,
	155, 156, 8, 6, 1, 2, 156, 186, 3, 2, 2, 2, 157, 158, 5, 12, 7, 2, 158,
	159, 7, 41, 2, 2, 159, 160, 7, 55, 2, 2, 160, 161, 7, 71, 2, 2, 161, 162,
	7, 72, 2, 2, 162, 163, 5, 90, 46, 2, 163, 164, 8, 6, 1, 2, 164, 186, 3,
	2, 2, 2, 165, 166, 5, 12, 7, 2, 166, 167, 7, 41, 2, 2, 167, 168, 7, 55,
	2, 2, 168, 169, 7, 71, 2, 2, 169, 170, 5, 14, 8, 2, 170, 171, 7, 72, 2,
	2, 171, 172, 5, 90, 46, 2, 172, 173, 8, 6, 1, 2, 173, 186, 3, 2, 2, 2,
	174, 175, 5, 12, 7, 2, 175, 176, 7, 41, 2, 2, 176, 177, 7, 55, 2, 2, 177,
	178, 7, 71, 2, 2, 178, 179, 5, 14, 8, 2, 179, 180, 7, 72, 2, 2, 180, 181,
	7, 40, 2, 2, 181, 182, 5, 94, 48, 2, 182, 183, 5, 90, 46, 2, 183, 184,
	8, 6, 1, 2, 184, 186, 3, 2, 2, 2, 185, 144, 3, 2, 2, 2, 185, 147, 3, 2,
	2, 2, 185, 157, 3, 2, 2, 2, 185, 165, 3, 2, 2, 2, 185, 174, 3, 2, 2, 2,
	186, 11, 3, 2, 2, 2, 187, 188, 7, 39, 2, 2, 188, 191, 8, 7, 1, 2, 189,
	191, 8, 7, 1, 2, 190, 187, 3, 2, 2, 2, 190, 189, 3, 2, 2, 2, 191, 13, 3,
	2, 2, 2, 192, 193, 8, 8, 1, 2, 193, 194, 5, 16, 9, 2, 194, 195, 8, 8, 1,
	2, 195, 203, 3, 2, 2, 2, 196, 197, 12, 4, 2, 2, 197, 198, 7, 48, 2, 2,
	198, 199, 5, 16, 9, 2, 199, 200, 8, 8, 1, 2, 200, 202, 3, 2, 2, 2, 201,
	196, 3, 2, 2, 2, 202, 205, 3, 2, 2, 2, 203, 201, 3, 2, 2, 2, 203, 204,
	3, 2, 2, 2, 204, 15, 3, 2, 2, 2, 205, 203, 3, 2, 2, 2, 206, 207, 5, 54,
	28, 2, 207, 208, 7, 55, 2, 2, 208, 209, 7, 51, 2, 2, 209, 210, 5, 94, 48,
	2, 210, 211, 8, 9, 1, 2, 211, 220, 3, 2, 2, 2, 212, 213, 7, 55, 2, 2, 213,
	214, 7, 51, 2, 2, 214, 215, 7, 70, 2, 2, 215, 216, 7, 25, 2, 2, 216, 217,
	5, 56, 29, 2, 217, 218, 8, 9, 1, 2, 218, 220, 3, 2, 2, 2, 219, 206, 3,
	2, 2, 2, 219, 212, 3, 2, 2, 2, 220, 17, 3, 2, 2, 2, 221, 222, 7, 41, 2,
	2, 222, 223, 7, 42, 2, 2, 223, 224, 7, 71, 2, 2, 224, 225, 7, 72, 2, 2,
	225, 226, 5, 90, 46, 2, 226, 227, 8, 10, 1, 2, 227, 19, 3, 2, 2, 2, 228,
	229, 5, 34, 18, 2, 229, 230, 7, 49, 2, 2, 230, 231, 8, 11, 1, 2, 231, 279,
	3, 2, 2, 2, 232, 233, 5, 52, 27, 2, 233, 234, 7, 49, 2, 2, 234, 235, 8,
	11, 1, 2, 235, 279, 3, 2, 2, 2, 236, 237, 5, 58, 30, 2, 237, 238, 7, 49,
	2, 2, 238, 239, 8, 11, 1, 2, 239, 279, 3, 2, 2, 2, 240, 241, 5, 24, 13,
	2, 241, 242, 7, 49, 2, 2, 242, 243, 8, 11, 1, 2, 243, 279, 3, 2, 2, 2,
	244, 245, 5, 66, 34, 2, 245, 246, 8, 11, 1, 2, 246, 279, 3, 2, 2, 2, 247,
	248, 5, 78, 40, 2, 248, 249, 8, 11, 1, 2, 249, 279, 3, 2, 2, 2, 250, 251,
	5, 36, 19, 2, 251, 252, 8, 11, 1, 2, 252, 279, 3, 2, 2, 2, 253, 254, 5,
	38, 20, 2, 254, 255, 8, 11, 1, 2, 255, 279, 3, 2, 2, 2, 256, 257, 5, 40,
	21, 2, 257, 258, 8, 11, 1, 2, 258, 279, 3, 2, 2, 2, 259, 260, 5, 42, 22,
	2, 260, 261, 7, 49, 2, 2, 261, 262, 8, 11, 1, 2, 262, 279, 3, 2, 2, 2,
	263, 264, 5, 44, 23, 2, 264, 265, 7, 49, 2, 2, 265, 266, 8, 11, 1, 2, 266,
	279, 3, 2, 2, 2, 267, 268, 5, 26, 14, 2, 268, 269, 8, 11, 1, 2, 269, 279,
	3, 2, 2, 2, 270, 271, 5, 30, 16, 2, 271, 272, 7, 49, 2, 2, 272, 273, 8,
	11, 1, 2, 273, 279, 3, 2, 2, 2, 274, 275, 5, 32, 17, 2, 275, 276, 7, 49,
	2, 2, 276, 277, 8, 11, 1, 2, 277, 279, 3, 2, 2, 2, 278, 228, 3, 2, 2, 2,
	278, 232, 3, 2, 2, 2, 278, 236, 3, 2, 2, 2, 278, 240, 3, 2, 2, 2, 278,
	244, 3, 2, 2, 2, 278, 247, 3, 2, 2, 2, 278, 250, 3, 2, 2, 2, 278, 253,
	3, 2, 2, 2, 278, 256, 3, 2, 2, 2, 278, 259, 3, 2, 2, 2, 278, 263, 3, 2,
	2, 2, 278, 267, 3, 2, 2, 2, 278, 270, 3, 2, 2, 2, 278, 274, 3, 2, 2, 2,
	279, 21, 3, 2, 2, 2, 280, 281, 5, 34, 18, 2, 281, 282, 8, 12, 1, 2, 282,
	320, 3, 2, 2, 2, 283, 284, 5, 52, 27, 2, 284, 285, 8, 12, 1, 2, 285, 320,
	3, 2, 2, 2, 286, 287, 5, 58, 30, 2, 287, 288, 8, 12, 1, 2, 288, 320, 3,
	2, 2, 2, 289, 290, 5, 24, 13, 2, 290, 291, 8, 12, 1, 2, 291, 320, 3, 2,
	2, 2, 292, 293, 5, 66, 34, 2, 293, 294, 8, 12, 1, 2, 294, 320, 3, 2, 2,
	2, 295, 296, 5, 78, 40, 2, 296, 297, 8, 12, 1, 2, 297, 320, 3, 2, 2, 2,
	298, 299, 5, 36, 19, 2, 299, 300, 8, 12, 1, 2, 300, 320, 3, 2, 2, 2, 301,
	302, 5, 38, 20, 2, 302, 303, 8, 12, 1, 2, 303, 320, 3, 2, 2, 2, 304, 305,
	5, 40, 21, 2, 305, 306, 8, 12, 1, 2, 306, 320, 3, 2, 2, 2, 307, 308, 5,
	42, 22, 2, 308, 309, 8, 12, 1, 2, 309, 320, 3, 2, 2, 2, 310, 311, 5, 44,
	23, 2, 311, 312, 8, 12, 1, 2, 312, 320, 3, 2, 2, 2, 313, 314, 5, 30, 16,
	2, 314, 315, 8, 12, 1, 2, 315, 320, 3, 2, 2, 2, 316, 317, 5, 32, 17, 2,
	317, 318, 8, 12, 1, 2, 318, 320, 3, 2, 2, 2, 319, 280, 3, 2, 2, 2, 319,
	283, 3, 2, 2, 2, 319, 286, 3, 2, 2, 2, 319, 289, 3, 2, 2, 2, 319, 292,
	3, 2, 2, 2, 319, 295, 3, 2, 2, 2, 319, 298, 3, 2, 2, 2, 319, 301, 3, 2,
	2, 2, 319, 304, 3, 2, 2, 2, 319, 307, 3, 2, 2, 2, 319, 310, 3, 2, 2, 2,
	319, 313, 3, 2, 2, 2, 319, 316, 3, 2, 2, 2, 320, 23, 3, 2, 2, 2, 321, 322,
	7, 55, 2, 2, 322, 323, 7, 47, 2, 2, 323, 324, 7, 35, 2, 2, 324, 325, 7,
	71, 2, 2, 325, 326, 5, 96, 49, 2, 326, 327, 7, 72, 2, 2, 327, 328, 8, 13,
	1, 2, 328, 340, 3, 2, 2, 2, 329, 330, 7, 55, 2, 2, 330, 331, 7, 47, 2,
	2, 331, 332, 7, 37, 2, 2, 332, 333, 7, 71, 2, 2, 333, 334, 5, 96, 49, 2,
	334, 335, 7, 48, 2, 2, 335, 336, 5, 96, 49, 2, 336, 337, 7, 72, 2, 2, 337,
	338, 8, 13, 1, 2, 338, 340, 3, 2, 2, 2, 339, 321, 3, 2, 2, 2, 339, 329,
	3, 2, 2, 2, 340, 25, 3, 2, 2, 2, 341, 342, 7, 26, 2, 2, 342, 343, 7, 55,
	2, 2, 343, 344, 7, 73, 2, 2, 344, 345, 5, 28, 15, 2, 345, 346, 7, 74, 2,
	2, 346, 347, 8, 14, 1, 2, 347, 27, 3, 2, 2, 2, 348, 349, 8, 15, 1, 2, 349,
	350, 7, 55, 2, 2, 350, 351, 7, 51, 2, 2, 351, 352, 5, 94, 48, 2, 352, 353,
	8, 15, 1, 2, 353, 359, 3, 2, 2, 2, 354, 355, 7, 55, 2, 2, 355, 356, 7,
	51, 2, 2, 356, 357, 7, 55, 2, 2, 357, 359, 8, 15, 1, 2, 358, 348, 3, 2,
	2, 2, 358, 354, 3, 2, 2, 2, 359, 375, 3, 2, 2, 2, 360, 361, 12, 6, 2, 2,
	361, 362, 7, 48, 2, 2, 362, 363, 7, 55, 2, 2, 363, 364, 7, 51, 2, 2, 364,
	365, 5, 94, 48, 2, 365, 366, 8, 15, 1, 2, 366, 374, 3, 2, 2, 2, 367, 368,
	12, 5, 2, 2, 368, 369, 7, 48, 2, 2, 369, 370, 7, 55, 2, 2, 370, 371, 7,
	51, 2, 2, 371, 372, 7, 55, 2, 2, 372, 374, 8, 15, 1, 2, 373, 360, 3, 2,
	2, 2, 373, 367, 3, 2, 2, 2, 374, 377, 3, 2, 2, 2, 375, 373, 3, 2, 2, 2,
	375, 376, 3, 2, 2, 2, 376, 29, 3, 2, 2, 2, 377, 375, 3, 2, 2, 2, 378, 379,
	7, 55, 2, 2, 379, 380, 7, 71, 2, 2, 380, 381, 7, 72, 2, 2, 381, 389, 8,
	16, 1, 2, 382, 383, 7, 55, 2, 2, 383, 384, 7, 71, 2, 2, 384, 385, 5, 48,
	25, 2, 385, 386, 7, 72, 2, 2, 386, 387, 8, 16, 1, 2, 387, 389, 3, 2, 2,
	2, 388, 378, 3, 2, 2, 2, 388, 382, 3, 2, 2, 2, 389, 31, 3, 2, 2, 2, 390,
	391, 7, 43, 2, 2, 391, 397, 8, 17, 1, 2, 392, 393, 7, 43, 2, 2, 393, 394,
	5, 96, 49, 2, 394, 395, 8, 17, 1, 2, 395, 397, 3, 2, 2, 2, 396, 390, 3,
	2, 2, 2, 396, 392, 3, 2, 2, 2, 397, 33, 3, 2, 2, 2, 398, 399, 7, 3, 2,
	2, 399, 400, 7, 71, 2, 2, 400, 401, 5, 46, 24, 2, 401, 402, 7, 72, 2, 2,
	402, 403, 8, 18, 1, 2, 403, 35, 3, 2, 2, 2, 404, 405, 7, 12, 2, 2, 405,
	406, 5, 90, 46, 2, 406, 407, 8, 19, 1, 2, 407, 37, 3, 2, 2, 2, 408, 409,
	7, 11, 2, 2, 409, 410, 5, 96, 49, 2, 410, 411, 5, 90, 46, 2, 411, 412,
	8, 20, 1, 2, 412, 39, 3, 2, 2, 2, 413, 414, 7, 13, 2, 2, 414, 415, 7, 55,
	2, 2, 415, 416, 7, 14, 2, 2, 416, 417, 5, 96, 49, 2, 417, 418, 5, 90, 46,
	2, 418, 419, 8, 21, 1, 2, 419, 41, 3, 2, 2, 2, 420, 421, 7, 15, 2, 2, 421,
	427, 8, 22, 1, 2, 422, 423, 7, 15, 2, 2, 423, 424, 5, 96, 49, 2, 424, 425,
	8, 22, 1, 2, 425, 427, 3, 2, 2, 2, 426, 420, 3, 2, 2, 2, 426, 422, 3, 2,
	2, 2, 427, 43, 3, 2, 2, 2, 428, 429, 7, 16, 2, 2, 429, 430, 8, 23, 1, 2,
	430, 45, 3, 2, 2, 2, 431, 432, 8, 24, 1, 2, 432, 433, 5, 96, 49, 2, 433,
	434, 8, 24, 1, 2, 434, 442, 3, 2, 2, 2, 435, 436, 12, 4, 2, 2, 436, 437,
	7, 48, 2, 2, 437, 438, 5, 96, 49, 2, 438, 439, 8, 24, 1, 2, 439, 441, 3,
	2, 2, 2, 440, 435, 3, 2, 2, 2, 441, 444, 3, 2, 2, 2, 442, 440, 3, 2, 2,
	2, 442, 443, 3, 2, 2, 2, 443, 47, 3, 2, 2, 2, 444, 442, 3, 2, 2, 2, 445,
	446, 8, 25, 1, 2, 446, 447, 5, 50, 26, 2, 447, 448, 5, 96, 49, 2, 448,
	449, 8, 25, 1, 2, 449, 458, 3, 2, 2, 2, 450, 451, 12, 4, 2, 2, 451, 452,
	7, 48, 2, 2, 452, 453, 5, 50, 26, 2, 453, 454, 5, 96, 49, 2, 454, 455,
	8, 25, 1, 2, 455, 457, 3, 2, 2, 2, 456, 450, 3, 2, 2, 2, 457, 460, 3, 2,
	2, 2, 458, 456, 3, 2, 2, 2, 458, 459, 3, 2, 2, 2, 459, 49, 3, 2, 2, 2,
	460, 458, 3, 2, 2, 2, 461, 462, 7, 70, 2, 2, 462, 463, 7, 25, 2, 2, 463,
	466, 8, 26, 1, 2, 464, 466, 8, 26, 1, 2, 465, 461, 3, 2, 2, 2, 465, 464,
	3, 2, 2, 2, 466, 51, 3, 2, 2, 2, 467, 468, 7, 24, 2, 2, 468, 469, 5, 54,
	28, 2, 469, 470, 7, 55, 2, 2, 470, 471, 7, 51, 2, 2, 471, 472, 5, 94, 48,
	2, 472, 473, 7, 52, 2, 2, 473, 474, 5, 96, 49, 2, 474, 475, 8, 27, 1, 2,
	475, 555, 3, 2, 2, 2, 476, 477, 7, 24, 2, 2, 477, 478, 5, 54, 28, 2, 478,
	479, 7, 55, 2, 2, 479, 480, 7, 52, 2, 2, 480, 481, 5, 96, 49, 2, 481, 482,
	8, 27, 1, 2, 482, 555, 3, 2, 2, 2, 483, 484, 7, 24, 2, 2, 484, 485, 5,
	54, 28, 2, 485, 486, 7, 55, 2, 2, 486, 487, 7, 51, 2, 2, 487, 488, 5, 56,
	29, 2, 488, 489, 7, 52, 2, 2, 489, 490, 5, 96, 49, 2, 490, 491, 8, 27,
	1, 2, 491, 555, 3, 2, 2, 2, 492, 493, 7, 24, 2, 2, 493, 494, 5, 54, 28,
	2, 494, 495, 7, 55, 2, 2, 495, 496, 7, 51, 2, 2, 496, 497, 7, 28, 2, 2,
	497, 498, 7, 61, 2, 2, 498, 499, 5, 94, 48, 2, 499, 500, 7, 60, 2, 2, 500,
	501, 7, 52, 2, 2, 501, 502, 7, 28, 2, 2, 502, 503, 7, 50, 2, 2, 503, 504,
	7, 33, 2, 2, 504, 505, 8, 27, 1, 2, 505, 555, 3, 2, 2, 2, 506, 507, 7,
	24, 2, 2, 507, 508, 5, 54, 28, 2, 508, 509, 7, 55, 2, 2, 509, 510, 7, 51,
	2, 2, 510, 511, 7, 28, 2, 2, 511, 512, 7, 61, 2, 2, 512, 513, 7, 55, 2,
	2, 513, 514, 7, 60, 2, 2, 514, 515, 7, 52, 2, 2, 515, 516, 7, 28, 2, 2,
	516, 517, 7, 50, 2, 2, 517, 518, 7, 33, 2, 2, 518, 519, 8, 27, 1, 2, 519,
	555, 3, 2, 2, 2, 520, 521, 7, 24, 2, 2, 521, 522, 5, 54, 28, 2, 522, 523,
	7, 55, 2, 2, 523, 524, 7, 51, 2, 2, 524, 525, 7, 28, 2, 2, 525, 526, 7,
	61, 2, 2, 526, 527, 5, 94, 48, 2, 527, 528, 7, 60, 2, 2, 528, 529, 7, 52,
	2, 2, 529, 530, 7, 28, 2, 2, 530, 531, 7, 50, 2, 2, 531, 532, 7, 29, 2,
	2, 532, 533, 7, 71, 2, 2, 533, 534, 5, 96, 49, 2, 534, 535, 7, 72, 2, 2,
	535, 536, 8, 27, 1, 2, 536, 555, 3, 2, 2, 2, 537, 538, 7, 24, 2, 2, 538,
	539, 5, 54, 28, 2, 539, 540, 7, 55, 2, 2, 540, 541, 7, 51, 2, 2, 541, 542,
	7, 28, 2, 2, 542, 543, 7, 61, 2, 2, 543, 544, 7, 55, 2, 2, 544, 545, 7,
	60, 2, 2, 545, 546, 7, 52, 2, 2, 546, 547, 7, 28, 2, 2, 547, 548, 7, 50,
	2, 2, 548, 549, 7, 29, 2, 2, 549, 550, 7, 71, 2, 2, 550, 551, 5, 96, 49,
	2, 551, 552, 7, 72, 2, 2, 552, 553, 8, 27, 1, 2, 553, 555, 3, 2, 2, 2,
	554, 467, 3, 2, 2, 2, 554, 476, 3, 2, 2, 2, 554, 483, 3, 2, 2, 2, 554,
	492, 3, 2, 2, 2, 554, 506, 3, 2, 2, 2, 554, 520, 3, 2, 2, 2, 554, 537,
	3, 2, 2, 2, 555, 53, 3, 2, 2, 2, 556, 557, 7, 25, 2, 2, 557, 560, 8, 28,
	1, 2, 558, 560, 3, 2, 2, 2, 559, 556, 3, 2, 2, 2, 559, 558, 3, 2, 2, 2,
	560, 55, 3, 2, 2, 2, 561, 562, 7, 75, 2, 2, 562, 563, 5, 56, 29, 2, 563,
	564, 7, 49, 2, 2, 564, 565, 5, 96, 49, 2, 565, 566, 7, 76, 2, 2, 566, 567,
	8, 29, 1, 2, 567, 576, 3, 2, 2, 2, 568, 569, 7, 75, 2, 2, 569, 570, 5,
	94, 48, 2, 570, 571, 7, 49, 2, 2, 571, 572, 5, 96, 49, 2, 572, 573, 7,
	76, 2, 2, 573, 574, 8, 29, 1, 2, 574, 576, 3, 2, 2, 2, 575, 561, 3, 2,
	2, 2, 575, 568, 3, 2, 2, 2, 576, 57, 3, 2, 2, 2, 577, 578, 7, 55, 2, 2,
	578, 579, 7, 52, 2, 2, 579, 580, 5, 96, 49, 2, 580, 581, 8, 30, 1, 2, 581,
	594, 3, 2, 2, 2, 582, 583, 7, 55, 2, 2, 583, 584, 5, 62, 32, 2, 584, 585,
	7, 52, 2, 2, 585, 586, 5, 96, 49, 2, 586, 587, 8, 30, 1, 2, 587, 594, 3,
	2, 2, 2, 588, 589, 5, 60, 31, 2, 589, 590, 7, 52, 2, 2, 590, 591, 5, 96,
	49, 2, 591, 592, 8, 30, 1, 2, 592, 594, 3, 2, 2, 2, 593, 577, 3, 2, 2,
	2, 593, 582, 3, 2, 2, 2, 593, 588, 3, 2, 2, 2, 594, 59, 3, 2, 2, 2, 595,
	596, 8, 31, 1, 2, 596, 597, 7, 55, 2, 2, 597, 598, 8, 31, 1, 2, 598, 605,
	3, 2, 2, 2, 599, 600, 12, 4, 2, 2, 600, 601, 7, 47, 2, 2, 601, 602, 7,
	55, 2, 2, 602, 604, 8, 31, 1, 2, 603, 599, 3, 2, 2, 2, 604, 607, 3, 2,
	2, 2, 605, 603, 3, 2, 2, 2, 605, 606, 3, 2, 2, 2, 606, 61, 3, 2, 2, 2,
	607, 605, 3, 2, 2, 2, 608, 609, 8, 32, 1, 2, 609, 610, 5, 64, 33, 2, 610,
	611, 8, 32, 1, 2, 611, 618, 3, 2, 2, 2, 612, 613, 12, 4, 2, 2, 613, 614,
	5, 64, 33, 2, 614, 615, 8, 32, 1, 2, 615, 617, 3, 2, 2, 2, 616, 612, 3,
	2, 2, 2, 617, 620, 3, 2, 2, 2, 618, 616, 3, 2, 2, 2, 618, 619, 3, 2, 2,
	2, 619, 63, 3, 2, 2, 2, 620, 618, 3, 2, 2, 2, 621, 622, 7, 75, 2, 2, 622,
	623, 5, 96, 49, 2, 623, 624, 7, 76, 2, 2, 624, 625, 8, 33, 1, 2, 625, 65,
	3, 2, 2, 2, 626, 627, 7, 9, 2, 2, 627, 628, 5, 96, 49, 2, 628, 629, 5,
	90, 46, 2, 629, 630, 8, 34, 1, 2, 630, 653, 3, 2, 2, 2, 631, 632, 7, 9,
	2, 2, 632, 633, 5, 96, 49, 2, 633, 634, 5, 90, 46, 2, 634, 635, 7, 10,
	2, 2, 635, 636, 5, 90, 46, 2, 636, 637, 8, 34, 1, 2, 637, 653, 3, 2, 2,
	2, 638, 639, 7, 9, 2, 2, 639, 640, 5, 96, 49, 2, 640, 641, 5, 90, 46, 2,
	641, 642, 5, 70, 36, 2, 642, 643, 8, 34, 1, 2, 643, 653, 3, 2, 2, 2, 644,
	645, 7, 9, 2, 2, 645, 646, 5, 96, 49, 2, 646, 647, 5, 90, 46, 2, 647, 648,
	5, 70, 36, 2, 648, 649, 7, 10, 2, 2, 649, 650, 5, 90, 46, 2, 650, 651,
	8, 34, 1, 2, 651, 653, 3, 2, 2, 2, 652, 626, 3, 2, 2, 2, 652, 631, 3, 2,
	2, 2, 652, 638, 3, 2, 2, 2, 652, 644, 3, 2, 2, 2, 653, 67, 3, 2, 2, 2,
	654, 655, 7, 9, 2, 2, 655, 656, 5, 96, 49, 2, 656, 657, 5, 92, 47, 2, 657,
	658, 7, 10, 2, 2, 658, 659, 5, 92, 47, 2, 659, 660, 8, 35, 1, 2, 660, 670,
	3, 2, 2, 2, 661, 662, 7, 9, 2, 2, 662, 663, 5, 96, 49, 2, 663, 664, 5,
	92, 47, 2, 664, 665, 5, 72, 37, 2, 665, 666, 7, 10, 2, 2, 666, 667, 5,
	92, 47, 2, 667, 668, 8, 35, 1, 2, 668, 670, 3, 2, 2, 2, 669, 654, 3, 2,
	2, 2, 669, 661, 3, 2, 2, 2, 670, 69, 3, 2, 2, 2, 671, 673, 5, 74, 38, 2,
	672, 671, 3, 2, 2, 2, 673, 674, 3, 2, 2, 2, 674, 672, 3, 2, 2, 2, 674,
	675, 3, 2, 2, 2, 675, 676, 3, 2, 2, 2, 676, 677, 8, 36, 1, 2, 677, 71,
	3, 2, 2, 2, 678, 680, 5, 76, 39, 2, 679, 678, 3, 2, 2, 2, 680, 681, 3,
	2, 2, 2, 681, 679, 3, 2, 2, 2, 681, 682, 3, 2, 2, 2, 682, 683, 3, 2, 2,
	2, 683, 684, 8, 37, 1, 2, 684, 73, 3, 2, 2, 2, 685, 686, 7, 10, 2, 2, 686,
	687, 7, 9, 2, 2, 687, 688, 5, 96, 49, 2, 688, 689, 5, 90, 46, 2, 689, 690,
	8, 38, 1, 2, 690, 75, 3, 2, 2, 2, 691, 692, 7, 10, 2, 2, 692, 693, 7, 9,
	2, 2, 693, 694, 5, 96, 49, 2, 694, 695, 5, 92, 47, 2, 695, 696, 8, 39,
	1, 2, 696, 77, 3, 2, 2, 2, 697, 698, 7, 17, 2, 2, 698, 699, 5, 96, 49,
	2, 699, 700, 7, 73, 2, 2, 700, 701, 5, 80, 41, 2, 701, 702, 7, 74, 2, 2,
	702, 703, 8, 40, 1, 2, 703, 747, 3, 2, 2, 2, 704, 705, 7, 17, 2, 2, 705,
	706, 5, 96, 49, 2, 706, 707, 7, 73, 2, 2, 707, 708, 5, 80, 41, 2, 708,
	709, 7, 54, 2, 2, 709, 710, 7, 53, 2, 2, 710, 712, 5, 90, 46, 2, 711, 713,
	7, 48, 2, 2, 712, 711, 3, 2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 714, 3, 2,
	2, 2, 714, 715, 7, 74, 2, 2, 715, 716, 8, 40, 1, 2, 716, 747, 3, 2, 2,
	2, 717, 718, 7, 17, 2, 2, 718, 719, 5, 96, 49, 2, 719, 720, 7, 73, 2, 2,
	720, 721, 5, 80, 41, 2, 721, 722, 7, 54, 2, 2, 722, 723, 7, 53, 2, 2, 723,
	724, 5, 22, 12, 2, 724, 725, 7, 48, 2, 2, 725, 726, 7, 74, 2, 2, 726, 727,
	8, 40, 1, 2, 727, 747, 3, 2, 2, 2, 728, 729, 7, 17, 2, 2, 729, 730, 5,
	96, 49, 2, 730, 731, 7, 73, 2, 2, 731, 732, 5, 82, 42, 2, 732, 733, 7,
	74, 2, 2, 733, 734, 8, 40, 1, 2, 734, 747, 3, 2, 2, 2, 735, 736, 7, 17,
	2, 2, 736, 737, 5, 96, 49, 2, 737, 738, 7, 73, 2, 2, 738, 739, 5, 82, 42,
	2, 739, 740, 7, 54, 2, 2, 740, 741, 7, 53, 2, 2, 741, 742, 5, 96, 49, 2,
	742, 743, 7, 48, 2, 2, 743, 744, 7, 74, 2, 2, 744, 745, 8, 40, 1, 2, 745,
	747, 3, 2, 2, 2, 746, 697, 3, 2, 2, 2, 746, 704, 3, 2, 2, 2, 746, 717,
	3, 2, 2, 2, 746, 728, 3, 2, 2, 2, 746, 735, 3, 2, 2, 2, 747, 79, 3, 2,
	2, 2, 748, 749, 8, 41, 1, 2, 749, 750, 5, 84, 43, 2, 750, 751, 8, 41, 1,
	2, 751, 758, 3, 2, 2, 2, 752, 753, 12, 4, 2, 2, 753, 754, 5, 84, 43, 2,
	754, 755, 8, 41, 1, 2, 755, 757, 3, 2, 2, 2, 756, 752, 3, 2, 2, 2, 757,
	760, 3, 2, 2, 2, 758, 756, 3, 2, 2, 2, 758, 759, 3, 2, 2, 2, 759, 81, 3,
	2, 2, 2, 760, 758, 3, 2, 2, 2, 761, 762, 8, 42, 1, 2, 762, 763, 5, 86,
	44, 2, 763, 764, 8, 42, 1, 2, 764, 771, 3, 2, 2, 2, 765, 766, 12, 4, 2,
	2, 766, 767, 5, 86, 44, 2, 767, 768, 8, 42, 1, 2, 768, 770, 3, 2, 2, 2,
	769, 765, 3, 2, 2, 2, 770, 773, 3, 2, 2, 2, 771, 769, 3, 2, 2, 2, 771,
	772, 3, 2, 2, 2, 772, 83, 3, 2, 2, 2, 773, 771, 3, 2, 2, 2, 774, 775, 5,
	88, 45, 2, 775, 776, 7, 53, 2, 2, 776, 778, 5, 90, 46, 2, 777, 779, 7,
	48, 2, 2, 778, 777, 3, 2, 2, 2, 778, 779, 3, 2, 2, 2, 779, 780, 3, 2, 2,
	2, 780, 781, 8, 43, 1, 2, 781, 789, 3, 2, 2, 2, 782, 783, 5, 88, 45, 2,
	783, 784, 7, 53, 2, 2, 784, 785, 5, 22, 12, 2, 785, 786, 7, 48, 2, 2, 786,
	787, 8, 43, 1, 2, 787, 789, 3, 2, 2, 2, 788, 774, 3, 2, 2, 2, 788, 782,
	3, 2, 2, 2, 789, 85, 3, 2, 2, 2, 790, 791, 5, 88, 45, 2, 791, 792, 7, 53,
	2, 2, 792, 793, 5, 96, 49, 2, 793, 794, 7, 48, 2, 2, 794, 795, 8, 44, 1,
	2, 795, 87, 3, 2, 2, 2, 796, 797, 8, 45, 1, 2, 797, 798, 5, 106, 54, 2,
	798, 799, 8, 45, 1, 2, 799, 807, 3, 2, 2, 2, 800, 801, 12, 4, 2, 2, 801,
	802, 7, 18, 2, 2, 802, 803, 5, 106, 54, 2, 803, 804, 8, 45, 1, 2, 804,
	806, 3, 2, 2, 2, 805, 800, 3, 2, 2, 2, 806, 809, 3, 2, 2, 2, 807, 805,
	3, 2, 2, 2, 807, 808, 3, 2, 2, 2, 808, 89, 3, 2, 2, 2, 809, 807, 3, 2,
	2, 2, 810, 811, 7, 73, 2, 2, 811, 812, 5, 4, 3, 2, 812, 813, 7, 74, 2,
	2, 813, 814, 8, 46, 1, 2, 814, 819, 3, 2, 2, 2, 815, 816, 7, 73, 2, 2,
	816, 817, 7, 74, 2, 2, 817, 819, 8, 46, 1, 2, 818, 810, 3, 2, 2, 2, 818,
	815, 3, 2, 2, 2, 819, 91, 3, 2, 2, 2, 820, 821, 7, 73, 2, 2, 821, 822,
	5, 96, 49, 2, 822, 823, 7, 74, 2, 2, 823, 824, 8, 47, 1, 2, 824, 93, 3,
	2, 2, 2, 825, 826, 7, 4, 2, 2, 826, 838, 8, 48, 1, 2, 827, 828, 7, 6, 2,
	2, 828, 838, 8, 48, 1, 2, 829, 830, 7, 5, 2, 2, 830, 838, 8, 48, 1, 2,
	831, 832, 7, 7, 2, 2, 832, 838, 8, 48, 1, 2, 833, 834, 7, 8, 2, 2, 834,
	838, 8, 48, 1, 2, 835, 836, 7, 26, 2, 2, 836, 838, 8, 48, 1, 2, 837, 825,
	3, 2, 2, 2, 837, 827, 3, 2, 2, 2, 837, 829, 3, 2, 2, 2, 837, 831, 3, 2,
	2, 2, 837, 833, 3, 2, 2, 2, 837, 835, 3, 2, 2, 2, 838, 95, 3, 2, 2, 2,
	839, 840, 8, 49, 1, 2, 840, 841, 5, 98, 50, 2, 841, 842, 8, 49, 1, 2, 842,
	857, 3, 2, 2, 2, 843, 844, 7, 55, 2, 2, 844, 845, 7, 47, 2, 2, 845, 846,
	7, 34, 2, 2, 846, 857, 8, 49, 1, 2, 847, 848, 7, 55, 2, 2, 848, 849, 7,
	47, 2, 2, 849, 850, 7, 36, 2, 2, 850, 851, 7, 71, 2, 2, 851, 852, 7, 70,
	2, 2, 852, 853, 5, 96, 49, 2, 853, 854, 7, 72, 2, 2, 854, 855, 8, 49, 1,
	2, 855, 857, 3, 2, 2, 2, 856, 839, 3, 2, 2, 2, 856, 843, 3, 2, 2, 2, 856,
	847, 3, 2, 2, 2, 857, 866, 3, 2, 2, 2, 858, 859, 12, 3, 2, 2, 859, 860,
	7, 47, 2, 2, 860, 861, 7, 47, 2, 2, 861, 862, 5, 96, 49, 4, 862, 863, 8,
	49, 1, 2, 863, 865, 3, 2, 2, 2, 864, 858, 3, 2, 2, 2, 865, 868, 3, 2, 2,
	2, 866, 864, 3, 2, 2, 2, 866, 867, 3, 2, 2, 2, 867, 97, 3, 2, 2, 2, 868,
	866, 3, 2, 2, 2, 869, 870, 8, 50, 1, 2, 870, 871, 7, 65, 2, 2, 871, 872,
	5, 98, 50, 25, 872, 873, 8, 50, 1, 2, 873, 962, 3, 2, 2, 2, 874, 875, 7,
	4, 2, 2, 875, 876, 7, 50, 2, 2, 876, 877, 7, 22, 2, 2, 877, 878, 7, 71,
	2, 2, 878, 879, 5, 98, 50, 2, 879, 880, 7, 48, 2, 2, 880, 881, 5, 98, 50,
	2, 881, 882, 7, 72, 2, 2, 882, 883, 8, 50, 1, 2, 883, 962, 3, 2, 2, 2,
	884, 885, 7, 5, 2, 2, 885, 886, 7, 50, 2, 2, 886, 887, 7, 23, 2, 2, 887,
	888, 7, 71, 2, 2, 888, 889, 5, 98, 50, 2, 889, 890, 7, 48, 2, 2, 890, 891,
	5, 98, 50, 2, 891, 892, 7, 72, 2, 2, 892, 893, 8, 50, 1, 2, 893, 962, 3,
	2, 2, 2, 894, 895, 7, 69, 2, 2, 895, 896, 5, 98, 50, 18, 896, 897, 8, 50,
	1, 2, 897, 962, 3, 2, 2, 2, 898, 899, 7, 27, 2, 2, 899, 900, 7, 75, 2,
	2, 900, 901, 5, 96, 49, 2, 901, 902, 7, 49, 2, 2, 902, 903, 5, 96, 49,
	2, 903, 904, 7, 76, 2, 2, 904, 905, 8, 50, 1, 2, 905, 962, 3, 2, 2, 2,
	906, 907, 7, 27, 2, 2, 907, 908, 7, 75, 2, 2, 908, 909, 5, 46, 24, 2, 909,
	910, 7, 76, 2, 2, 910, 911, 8, 50, 1, 2, 911, 962, 3, 2, 2, 2, 912, 913,
	7, 75, 2, 2, 913, 914, 5, 96, 49, 2, 914, 915, 7, 49, 2, 2, 915, 916, 5,
	96, 49, 2, 916, 917, 7, 76, 2, 2, 917, 918, 8, 50, 1, 2, 918, 962, 3, 2,
	2, 2, 919, 920, 7, 75, 2, 2, 920, 921, 5, 46, 24, 2, 921, 922, 7, 76, 2,
	2, 922, 923, 8, 50, 1, 2, 923, 962, 3, 2, 2, 2, 924, 925, 7, 55, 2, 2,
	925, 926, 7, 73, 2, 2, 926, 927, 5, 104, 53, 2, 927, 928, 7, 74, 2, 2,
	928, 929, 8, 50, 1, 2, 929, 962, 3, 2, 2, 2, 930, 931, 5, 106, 54, 2, 931,
	932, 8, 50, 1, 2, 932, 962, 3, 2, 2, 2, 933, 934, 7, 71, 2, 2, 934, 935,
	5, 96, 49, 2, 935, 936, 7, 72, 2, 2, 936, 937, 8, 50, 1, 2, 937, 962, 3,
	2, 2, 2, 938, 939, 5, 100, 51, 2, 939, 940, 8, 50, 1, 2, 940, 962, 3, 2,
	2, 2, 941, 942, 5, 68, 35, 2, 942, 943, 8, 50, 1, 2, 943, 962, 3, 2, 2,
	2, 944, 945, 5, 78, 40, 2, 945, 946, 8, 50, 1, 2, 946, 962, 3, 2, 2, 2,
	947, 948, 5, 36, 19, 2, 948, 949, 8, 50, 1, 2, 949, 962, 3, 2, 2, 2, 950,
	951, 5, 30, 16, 2, 951, 952, 8, 50, 1, 2, 952, 962, 3, 2, 2, 2, 953, 954,
	7, 55, 2, 2, 954, 955, 7, 47, 2, 2, 955, 956, 7, 38, 2, 2, 956, 957, 7,
	71, 2, 2, 957, 958, 5, 96, 49, 2, 958, 959, 7, 72, 2, 2, 959, 960, 8, 50,
	1, 2, 960, 962, 3, 2, 2, 2, 961, 869, 3, 2, 2, 2, 961, 874, 3, 2, 2, 2,
	961, 884, 3, 2, 2, 2, 961, 894, 3, 2, 2, 2, 961, 898, 3, 2, 2, 2, 961,
	906, 3, 2, 2, 2, 961, 912, 3, 2, 2, 2, 961, 919, 3, 2, 2, 2, 961, 924,
	3, 2, 2, 2, 961, 930, 3, 2, 2, 2, 961, 933, 3, 2, 2, 2, 961, 938, 3, 2,
	2, 2, 961, 941, 3, 2, 2, 2, 961, 944, 3, 2, 2, 2, 961, 947, 3, 2, 2, 2,
	961, 950, 3, 2, 2, 2, 961, 953, 3, 2, 2, 2, 962, 994, 3, 2, 2, 2, 963,
	964, 12, 22, 2, 2, 964, 965, 9, 2, 2, 2, 965, 966, 5, 98, 50, 23, 966,
	967, 8, 50, 1, 2, 967, 993, 3, 2, 2, 2, 968, 969, 12, 20, 2, 2, 969, 970,
	9, 3, 2, 2, 970, 971, 5, 98, 50, 21, 971, 972, 8, 50, 1, 2, 972, 993, 3,
	2, 2, 2, 973, 974, 12, 19, 2, 2, 974, 975, 9, 4, 2, 2, 975, 976, 5, 98,
	50, 20, 976, 977, 8, 50, 1, 2, 977, 993, 3, 2, 2, 2, 978, 979, 12, 17,
	2, 2, 979, 980, 7, 67, 2, 2, 980, 981, 5, 98, 50, 18, 981, 982, 8, 50,
	1, 2, 982, 993, 3, 2, 2, 2, 983, 984, 12, 16, 2, 2, 984, 985, 7, 68, 2,
	2, 985, 986, 5, 98, 50, 17, 986, 987, 8, 50, 1, 2, 987, 993, 3, 2, 2, 2,
	988, 989, 12, 21, 2, 2, 989, 990, 7, 47, 2, 2, 990, 991, 7, 32, 2, 2, 991,
	993, 8, 50, 1, 2, 992, 963, 3, 2, 2, 2, 992, 968, 3, 2, 2, 2, 992, 973,
	3, 2, 2, 2, 992, 978, 3, 2, 2, 2, 992, 983, 3, 2, 2, 2, 992, 988, 3, 2,
	2, 2, 993, 996, 3, 2, 2, 2, 994, 992, 3, 2, 2, 2, 994, 995, 3, 2, 2, 2,
	995, 99, 3, 2, 2, 2, 996, 994, 3, 2, 2, 2, 997, 998, 7, 71, 2, 2, 998,
	999, 5, 96, 49, 2, 999, 1000, 7, 21, 2, 2, 1000, 1001, 5, 102, 52, 2, 1001,
	1002, 7, 72, 2, 2, 1002, 1003, 8, 51, 1, 2, 1003, 101, 3, 2, 2, 2, 1004,
	1005, 7, 5, 2, 2, 1005, 1009, 8, 52, 1, 2, 1006, 1007, 7, 4, 2, 2, 1007,
	1009, 8, 52, 1, 2, 1008, 1004, 3, 2, 2, 2, 1008, 1006, 3, 2, 2, 2, 1009,
	103, 3, 2, 2, 2, 1010, 1011, 8, 53, 1, 2, 1011, 1012, 7, 55, 2, 2, 1012,
	1013, 7, 51, 2, 2, 1013, 1014, 5, 96, 49, 2, 1014, 1015, 8, 53, 1, 2, 1015,
	1025, 3, 2, 2, 2, 1016, 1017, 12, 4, 2, 2, 1017, 1018, 7, 48, 2, 2, 1018,
	1019, 7, 55, 2, 2, 1019, 1020, 7, 51, 2, 2, 1020, 1021, 5, 96, 49, 2, 1021,
	1022, 8, 53, 1, 2, 1022, 1024, 3, 2, 2, 2, 1023, 1016, 3, 2, 2, 2, 1024,
	1027, 3, 2, 2, 2, 1025, 1023, 3, 2, 2, 2, 1025, 1026, 3, 2, 2, 2, 1026,
	105, 3, 2, 2, 2, 1027, 1025, 3, 2, 2, 2, 1028, 1029, 7, 44, 2, 2, 1029,
	1043, 8, 54, 1, 2, 1030, 1031, 7, 45, 2, 2, 1031, 1043, 8, 54, 1, 2, 1032,
	1033, 5, 110, 56, 2, 1033, 1034, 8, 54, 1, 2, 1034, 1043, 3, 2, 2, 2, 1035,
	1036, 7, 19, 2, 2, 1036, 1043, 8, 54, 1, 2, 1037, 1038, 7, 20, 2, 2, 1038,
	1043, 8, 54, 1, 2, 1039, 1040, 5, 108, 55, 2, 1040, 1041, 8, 54, 1, 2,
	1041, 1043, 3, 2, 2, 2, 1042, 1028, 3, 2, 2, 2, 1042, 1030, 3, 2, 2, 2,
	1042, 1032, 3, 2, 2, 2, 1042, 1035, 3, 2, 2, 2, 1042, 1037, 3, 2, 2, 2,
	1042, 1039, 3, 2, 2, 2, 1043, 107, 3, 2, 2, 2, 1044, 1045, 8, 55, 1, 2,
	1045, 1046, 7, 55, 2, 2, 1046, 1047, 8, 55, 1, 2, 1047, 1060, 3, 2, 2,
	2, 1048, 1049, 12, 5, 2, 2, 1049, 1050, 7, 75, 2, 2, 1050, 1051, 5, 96,
	49, 2, 1051, 1052, 7, 76, 2, 2, 1052, 1053, 8, 55, 1, 2, 1053, 1059, 3,
	2, 2, 2, 1054, 1055, 12, 4, 2, 2, 1055, 1056, 7, 47, 2, 2, 1056, 1057,
	7, 55, 2, 2, 1057, 1059, 8, 55, 1, 2, 1058, 1048, 3, 2, 2, 2, 1058, 1054,
	3, 2, 2, 2, 1059, 1062, 3, 2, 2, 2, 1060, 1058, 3, 2, 2, 2, 1060, 1061,
	3, 2, 2, 2, 1061, 109, 3, 2, 2, 2, 1062, 1060, 3, 2, 2, 2, 1063, 1065,
	7, 70, 2, 2, 1064, 1063, 3, 2, 2, 2, 1065, 1066, 3, 2, 2, 2, 1066, 1064,
	3, 2, 2, 2, 1066, 1067, 3, 2, 2, 2, 1067, 1068, 3, 2, 2, 2, 1068, 1070,
	7, 46, 2, 2, 1069, 1071, 9, 5, 2, 2, 1070, 1069, 3, 2, 2, 2, 1070, 1071,
	3, 2, 2, 2, 1071, 1072, 3, 2, 2, 2, 1072, 1079, 8, 56, 1, 2, 1073, 1074,
	7, 46, 2, 2, 1074, 1075, 9, 5, 2, 2, 1075, 1079, 8, 56, 1, 2, 1076, 1077,
	7, 46, 2, 2, 1077, 1079, 8, 56, 1, 2, 1078, 1064, 3, 2, 2, 2, 1078, 1073,
	3, 2, 2, 2, 1078, 1076, 3, 2, 2, 2, 1079, 111, 3, 2, 2, 2, 53, 118, 133,
	142, 185, 190, 203, 219, 278, 319, 339, 358, 373, 375, 388, 396, 426, 442,
	458, 465, 554, 559, 575, 593, 605, 618, 652, 669, 674, 681, 712, 746, 758,
	771, 778, 788, 807, 818, 837, 856, 866, 961, 992, 994, 1008, 1025, 1042,
	1058, 1060, 1066, 1070, 1078,
}
var literalNames = []string{
	"", "'println!'", "'i64'", "'f64'", "'String'", "'bool'", "'&str'", "'if'",
	"'else'", "'while'", "'loop'", "'for'", "'in'", "'break'", "'continue'",
	"'match'", "'|'", "'true'", "'false'", "'as'", "'pow'", "'powf'", "'let'",
	"'mut'", "'struct'", "'vec!'", "'Vec'", "'with_capacity'", "'.to_string()'",
	"'.to_owned()'", "'len()'", "'new()'", "'capacity()'", "'push'", "'contains'",
	"'insert'", "'remove'", "'pub'", "'->'", "'fn'", "'main'", "'return'",
	"", "", "", "'.'", "','", "';'", "'::'", "':'", "'='", "'=>'", "'_'", "",
	"'!='", "'=='", "'>='", "'<='", "'>'", "'<'", "'*'", "'/'", "'+'", "'-'",
	"'%'", "'&&'", "'||'", "'!'", "'&'", "'('", "')'", "'{'", "'}'", "'['",
	"']'",
}
var symbolicNames = []string{
	"", "PRINT_CON", "T_NUMBER", "T_FLOAT", "T_STRING", "T_BOOL", "T_STR",
	"IF", "ELSE", "WHILE", "LOOP", "FOR", "IN", "BREAK", "CONTINUE", "MATCH",
	"MTOR", "TRUE", "FALSE", "AS", "POW", "POWF", "LET", "MUT", "STRUCT", "VEC",
	"VECN", "CAPACITY", "TO_STRING", "TO_OWNED", "LEN", "NEW", "CAPF", "PUSH",
	"CONTAINS", "INSERT", "REMOVE", "PUBLIC", "TYPETHEN", "FN", "MAIN", "RETURN",
	"NUMBER", "FLOAT", "STRING", "PUNTO", "COMA", "PTCOMA", "DOSPUNTO", "DPUNTO2",
	"ASIGNACION", "MTHEN", "GUIONB", "ID", "DISTINTO", "IGUAL", "MAYORIGUAL",
	"MENORIGUAL", "MAYOR", "MENOR", "MUL", "DIV", "ADD", "SUB", "MOD", "AND",
	"OR", "NOT", "AMP", "PARIZQ", "PARDER", "LLAVEIZQ", "LLAVEDER", "CORIZQ",
	"CORDER", "WHITESPACE", "L_COMMENT",
}

var ruleNames = []string{
	"start", "instrucciones", "list_Funciones", "itemRust", "funcion", "t_access",
	"params_declar", "declar_parametros", "fn_main", "instruccion", "instruccion_only",
	"pushVec", "newStruct", "listdecStruct", "callFunction", "returnFun", "printconsola",
	"loopB", "lWhile", "lForin", "lBreak", "lContinue", "listParams", "listParamsCall",
	"is_ref", "declaracion", "is_mut", "array_type", "asignacion", "l_AccessStruct",
	"list_index", "index_array", "if_sent", "if_exp", "list_elseif", "list_elseif_exp",
	"else_if", "else_if_exp", "match_sent", "match_brazos", "match_brazos_exp",
	"matchbrazo", "matchbrazo_exp", "listaOpciones", "bloque_inst", "bloque_exp",
	"tipos_var", "expression", "expr_arit", "casteo", "tipo_cast", "l_StructExp",
	"primitivo", "listIDArray", "strings",
}

type RustPar struct {
	*antlr.BaseParser
}

// NewRustPar produces a new parser instance for the optional input antlr.TokenStream.
//
// The *RustPar instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewRustPar(input antlr.TokenStream) *RustPar {
	this := new(RustPar)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "RustPar.g4"

	return this
}

// RustPar tokens.
const (
	RustParEOF        = antlr.TokenEOF
	RustParPRINT_CON  = 1
	RustParT_NUMBER   = 2
	RustParT_FLOAT    = 3
	RustParT_STRING   = 4
	RustParT_BOOL     = 5
	RustParT_STR      = 6
	RustParIF         = 7
	RustParELSE       = 8
	RustParWHILE      = 9
	RustParLOOP       = 10
	RustParFOR        = 11
	RustParIN         = 12
	RustParBREAK      = 13
	RustParCONTINUE   = 14
	RustParMATCH      = 15
	RustParMTOR       = 16
	RustParTRUE       = 17
	RustParFALSE      = 18
	RustParAS         = 19
	RustParPOW        = 20
	RustParPOWF       = 21
	RustParLET        = 22
	RustParMUT        = 23
	RustParSTRUCT     = 24
	RustParVEC        = 25
	RustParVECN       = 26
	RustParCAPACITY   = 27
	RustParTO_STRING  = 28
	RustParTO_OWNED   = 29
	RustParLEN        = 30
	RustParNEW        = 31
	RustParCAPF       = 32
	RustParPUSH       = 33
	RustParCONTAINS   = 34
	RustParINSERT     = 35
	RustParREMOVE     = 36
	RustParPUBLIC     = 37
	RustParTYPETHEN   = 38
	RustParFN         = 39
	RustParMAIN       = 40
	RustParRETURN     = 41
	RustParNUMBER     = 42
	RustParFLOAT      = 43
	RustParSTRING     = 44
	RustParPUNTO      = 45
	RustParCOMA       = 46
	RustParPTCOMA     = 47
	RustParDOSPUNTO   = 48
	RustParDPUNTO2    = 49
	RustParASIGNACION = 50
	RustParMTHEN      = 51
	RustParGUIONB     = 52
	RustParID         = 53
	RustParDISTINTO   = 54
	RustParIGUAL      = 55
	RustParMAYORIGUAL = 56
	RustParMENORIGUAL = 57
	RustParMAYOR      = 58
	RustParMENOR      = 59
	RustParMUL        = 60
	RustParDIV        = 61
	RustParADD        = 62
	RustParSUB        = 63
	RustParMOD        = 64
	RustParAND        = 65
	RustParOR         = 66
	RustParNOT        = 67
	RustParAMP        = 68
	RustParPARIZQ     = 69
	RustParPARDER     = 70
	RustParLLAVEIZQ   = 71
	RustParLLAVEDER   = 72
	RustParCORIZQ     = 73
	RustParCORDER     = 74
	RustParWHITESPACE = 75
	RustParL_COMMENT  = 76
)

// RustPar rules.
const (
	RustParRULE_start             = 0
	RustParRULE_instrucciones     = 1
	RustParRULE_list_Funciones    = 2
	RustParRULE_itemRust          = 3
	RustParRULE_funcion           = 4
	RustParRULE_t_access          = 5
	RustParRULE_params_declar     = 6
	RustParRULE_declar_parametros = 7
	RustParRULE_fn_main           = 8
	RustParRULE_instruccion       = 9
	RustParRULE_instruccion_only  = 10
	RustParRULE_pushVec           = 11
	RustParRULE_newStruct         = 12
	RustParRULE_listdecStruct     = 13
	RustParRULE_callFunction      = 14
	RustParRULE_returnFun         = 15
	RustParRULE_printconsola      = 16
	RustParRULE_loopB             = 17
	RustParRULE_lWhile            = 18
	RustParRULE_lForin            = 19
	RustParRULE_lBreak            = 20
	RustParRULE_lContinue         = 21
	RustParRULE_listParams        = 22
	RustParRULE_listParamsCall    = 23
	RustParRULE_is_ref            = 24
	RustParRULE_declaracion       = 25
	RustParRULE_is_mut            = 26
	RustParRULE_array_type        = 27
	RustParRULE_asignacion        = 28
	RustParRULE_l_AccessStruct    = 29
	RustParRULE_list_index        = 30
	RustParRULE_index_array       = 31
	RustParRULE_if_sent           = 32
	RustParRULE_if_exp            = 33
	RustParRULE_list_elseif       = 34
	RustParRULE_list_elseif_exp   = 35
	RustParRULE_else_if           = 36
	RustParRULE_else_if_exp       = 37
	RustParRULE_match_sent        = 38
	RustParRULE_match_brazos      = 39
	RustParRULE_match_brazos_exp  = 40
	RustParRULE_matchbrazo        = 41
	RustParRULE_matchbrazo_exp    = 42
	RustParRULE_listaOpciones     = 43
	RustParRULE_bloque_inst       = 44
	RustParRULE_bloque_exp        = 45
	RustParRULE_tipos_var         = 46
	RustParRULE_expression        = 47
	RustParRULE_expr_arit         = 48
	RustParRULE_casteo            = 49
	RustParRULE_tipo_cast         = 50
	RustParRULE_l_StructExp       = 51
	RustParRULE_primitivo         = 52
	RustParRULE_listIDArray       = 53
	RustParRULE_strings           = 54
)

// IStartContext is an interface to support dynamic dispatch.
type IStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_list_Funciones returns the _list_Funciones rule contexts.
	Get_list_Funciones() IList_FuncionesContext

	// Set_list_Funciones sets the _list_Funciones rule contexts.
	Set_list_Funciones(IList_FuncionesContext)

	// GetLista returns the lista attribute.
	GetLista() *arrayList.List

	// SetLista sets the lista attribute.
	SetLista(*arrayList.List)

	// IsStartContext differentiates from other interfaces.
	IsStartContext()
}

type StartContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	lista           *arrayList.List
	_list_Funciones IList_FuncionesContext
}

func NewEmptyStartContext() *StartContext {
	var p = new(StartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_start
	return p
}

func (*StartContext) IsStartContext() {}

func NewStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartContext {
	var p = new(StartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_start

	return p
}

func (s *StartContext) GetParser() antlr.Parser { return s.parser }

func (s *StartContext) Get_list_Funciones() IList_FuncionesContext { return s._list_Funciones }

func (s *StartContext) Set_list_Funciones(v IList_FuncionesContext) { s._list_Funciones = v }

func (s *StartContext) GetLista() *arrayList.List { return s.lista }

func (s *StartContext) SetLista(v *arrayList.List) { s.lista = v }

func (s *StartContext) List_Funciones() IList_FuncionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_FuncionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_FuncionesContext)
}

func (s *StartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterStart(s)
	}
}

func (s *StartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitStart(s)
	}
}

func (p *RustPar) Start() (localctx IStartContext) {
	this := p
	_ = this

	localctx = NewStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, RustParRULE_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(110)

		var _x = p.list_Funciones(0)

		localctx.(*StartContext)._list_Funciones = _x
	}
	localctx.(*StartContext).lista = localctx.(*StartContext).Get_list_Funciones().GetLista()

	return localctx
}

// IInstruccionesContext is an interface to support dynamic dispatch.
type IInstruccionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccion returns the _instruccion rule contexts.
	Get_instruccion() IInstruccionContext

	// Set_instruccion sets the _instruccion rule contexts.
	Set_instruccion(IInstruccionContext)

	// GetE returns the e rule context list.
	GetE() []IInstruccionContext

	// SetE sets the e rule context list.
	SetE([]IInstruccionContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsInstruccionesContext differentiates from other interfaces.
	IsInstruccionesContext()
}

type InstruccionesContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	l            *arrayList.List
	_instruccion IInstruccionContext
	e            []IInstruccionContext
}

func NewEmptyInstruccionesContext() *InstruccionesContext {
	var p = new(InstruccionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_instrucciones
	return p
}

func (*InstruccionesContext) IsInstruccionesContext() {}

func NewInstruccionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionesContext {
	var p = new(InstruccionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_instrucciones

	return p
}

func (s *InstruccionesContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionesContext) Get_instruccion() IInstruccionContext { return s._instruccion }

func (s *InstruccionesContext) Set_instruccion(v IInstruccionContext) { s._instruccion = v }

func (s *InstruccionesContext) GetE() []IInstruccionContext { return s.e }

func (s *InstruccionesContext) SetE(v []IInstruccionContext) { s.e = v }

func (s *InstruccionesContext) GetL() *arrayList.List { return s.l }

func (s *InstruccionesContext) SetL(v *arrayList.List) { s.l = v }

func (s *InstruccionesContext) AllInstruccion() []IInstruccionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionContext)(nil)).Elem())
	var tst = make([]IInstruccionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionContext)
		}
	}

	return tst
}

func (s *InstruccionesContext) Instruccion(i int) IInstruccionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionContext)
}

func (s *InstruccionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterInstrucciones(s)
	}
}

func (s *InstruccionesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitInstrucciones(s)
	}
}

func (p *RustPar) Instrucciones() (localctx IInstruccionesContext) {
	this := p
	_ = this

	localctx = NewInstruccionesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, RustParRULE_instrucciones)

	localctx.(*InstruccionesContext).l = arrayList.New()

	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(116)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<RustParPRINT_CON)|(1<<RustParIF)|(1<<RustParWHILE)|(1<<RustParLOOP)|(1<<RustParFOR)|(1<<RustParBREAK)|(1<<RustParCONTINUE)|(1<<RustParMATCH)|(1<<RustParLET)|(1<<RustParSTRUCT))) != 0) || _la == RustParRETURN || _la == RustParID {
		{
			p.SetState(113)

			var _x = p.Instruccion()

			localctx.(*InstruccionesContext)._instruccion = _x
		}
		localctx.(*InstruccionesContext).e = append(localctx.(*InstruccionesContext).e, localctx.(*InstruccionesContext)._instruccion)

		p.SetState(118)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listInt := localctx.(*InstruccionesContext).GetE()
	for _, e := range listInt {
		localctx.(*InstruccionesContext).l.Add(e.GetInstr())
	}
	//fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())

	return localctx
}

// IList_FuncionesContext is an interface to support dynamic dispatch.
type IList_FuncionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLisfun returns the lisfun rule contexts.
	GetLisfun() IList_FuncionesContext

	// Get_itemRust returns the _itemRust rule contexts.
	Get_itemRust() IItemRustContext

	// SetLisfun sets the lisfun rule contexts.
	SetLisfun(IList_FuncionesContext)

	// Set_itemRust sets the _itemRust rule contexts.
	Set_itemRust(IItemRustContext)

	// GetLista returns the lista attribute.
	GetLista() *arrayList.List

	// SetLista sets the lista attribute.
	SetLista(*arrayList.List)

	// IsList_FuncionesContext differentiates from other interfaces.
	IsList_FuncionesContext()
}

type List_FuncionesContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	lista     *arrayList.List
	lisfun    IList_FuncionesContext
	_itemRust IItemRustContext
}

func NewEmptyList_FuncionesContext() *List_FuncionesContext {
	var p = new(List_FuncionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_list_Funciones
	return p
}

func (*List_FuncionesContext) IsList_FuncionesContext() {}

func NewList_FuncionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_FuncionesContext {
	var p = new(List_FuncionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_list_Funciones

	return p
}

func (s *List_FuncionesContext) GetParser() antlr.Parser { return s.parser }

func (s *List_FuncionesContext) GetLisfun() IList_FuncionesContext { return s.lisfun }

func (s *List_FuncionesContext) Get_itemRust() IItemRustContext { return s._itemRust }

func (s *List_FuncionesContext) SetLisfun(v IList_FuncionesContext) { s.lisfun = v }

func (s *List_FuncionesContext) Set_itemRust(v IItemRustContext) { s._itemRust = v }

func (s *List_FuncionesContext) GetLista() *arrayList.List { return s.lista }

func (s *List_FuncionesContext) SetLista(v *arrayList.List) { s.lista = v }

func (s *List_FuncionesContext) ItemRust() IItemRustContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IItemRustContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IItemRustContext)
}

func (s *List_FuncionesContext) List_Funciones() IList_FuncionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_FuncionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_FuncionesContext)
}

func (s *List_FuncionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_FuncionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_FuncionesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterList_Funciones(s)
	}
}

func (s *List_FuncionesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitList_Funciones(s)
	}
}

func (p *RustPar) List_Funciones() (localctx IList_FuncionesContext) {
	return p.list_Funciones(0)
}

func (p *RustPar) list_Funciones(_p int) (localctx IList_FuncionesContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewList_FuncionesContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IList_FuncionesContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 4
	p.EnterRecursionRule(localctx, 4, RustParRULE_list_Funciones, _p)

	localctx.(*List_FuncionesContext).lista = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(122)

		var _x = p.ItemRust()

		localctx.(*List_FuncionesContext)._itemRust = _x
	}
	localctx.(*List_FuncionesContext).lista.Add(localctx.(*List_FuncionesContext).Get_itemRust().GetInstr())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(131)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewList_FuncionesContext(p, _parentctx, _parentState)
			localctx.(*List_FuncionesContext).lisfun = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_list_Funciones)
			p.SetState(125)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(126)

				var _x = p.ItemRust()

				localctx.(*List_FuncionesContext)._itemRust = _x
			}

			localctx.(*List_FuncionesContext).GetLisfun().GetLista().Add(localctx.(*List_FuncionesContext).Get_itemRust().GetInstr())
			localctx.(*List_FuncionesContext).lista = localctx.(*List_FuncionesContext).GetLisfun().GetLista()

		}
		p.SetState(133)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())
	}

	return localctx
}

// IItemRustContext is an interface to support dynamic dispatch.
type IItemRustContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_funcion returns the _funcion rule contexts.
	Get_funcion() IFuncionContext

	// Get_newStruct returns the _newStruct rule contexts.
	Get_newStruct() INewStructContext

	// Set_funcion sets the _funcion rule contexts.
	Set_funcion(IFuncionContext)

	// Set_newStruct sets the _newStruct rule contexts.
	Set_newStruct(INewStructContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsItemRustContext differentiates from other interfaces.
	IsItemRustContext()
}

type ItemRustContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	instr      interfaces.Instruction
	_funcion   IFuncionContext
	_newStruct INewStructContext
}

func NewEmptyItemRustContext() *ItemRustContext {
	var p = new(ItemRustContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_itemRust
	return p
}

func (*ItemRustContext) IsItemRustContext() {}

func NewItemRustContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ItemRustContext {
	var p = new(ItemRustContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_itemRust

	return p
}

func (s *ItemRustContext) GetParser() antlr.Parser { return s.parser }

func (s *ItemRustContext) Get_funcion() IFuncionContext { return s._funcion }

func (s *ItemRustContext) Get_newStruct() INewStructContext { return s._newStruct }

func (s *ItemRustContext) Set_funcion(v IFuncionContext) { s._funcion = v }

func (s *ItemRustContext) Set_newStruct(v INewStructContext) { s._newStruct = v }

func (s *ItemRustContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *ItemRustContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *ItemRustContext) Funcion() IFuncionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFuncionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFuncionContext)
}

func (s *ItemRustContext) NewStruct() INewStructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewStructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewStructContext)
}

func (s *ItemRustContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ItemRustContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ItemRustContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterItemRust(s)
	}
}

func (s *ItemRustContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitItemRust(s)
	}
}

func (p *RustPar) ItemRust() (localctx IItemRustContext) {
	this := p
	_ = this

	localctx = NewItemRustContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, RustParRULE_itemRust)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(140)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case RustParPUBLIC, RustParFN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(134)

			var _x = p.Funcion()

			localctx.(*ItemRustContext)._funcion = _x
		}
		localctx.(*ItemRustContext).instr = localctx.(*ItemRustContext).Get_funcion().GetInstr()

	case RustParSTRUCT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(137)

			var _x = p.NewStruct()

			localctx.(*ItemRustContext)._newStruct = _x
		}
		localctx.(*ItemRustContext).instr = localctx.(*ItemRustContext).Get_newStruct().GetStr()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFuncionContext is an interface to support dynamic dispatch.
type IFuncionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_fn_main returns the _fn_main rule contexts.
	Get_fn_main() IFn_mainContext

	// Get_tipos_var returns the _tipos_var rule contexts.
	Get_tipos_var() ITipos_varContext

	// Get_bloque_inst returns the _bloque_inst rule contexts.
	Get_bloque_inst() IBloque_instContext

	// Get_params_declar returns the _params_declar rule contexts.
	Get_params_declar() IParams_declarContext

	// Set_fn_main sets the _fn_main rule contexts.
	Set_fn_main(IFn_mainContext)

	// Set_tipos_var sets the _tipos_var rule contexts.
	Set_tipos_var(ITipos_varContext)

	// Set_bloque_inst sets the _bloque_inst rule contexts.
	Set_bloque_inst(IBloque_instContext)

	// Set_params_declar sets the _params_declar rule contexts.
	Set_params_declar(IParams_declarContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsFuncionContext differentiates from other interfaces.
	IsFuncionContext()
}

type FuncionContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	instr          interfaces.Instruction
	_fn_main       IFn_mainContext
	_ID            antlr.Token
	_tipos_var     ITipos_varContext
	_bloque_inst   IBloque_instContext
	_params_declar IParams_declarContext
}

func NewEmptyFuncionContext() *FuncionContext {
	var p = new(FuncionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_funcion
	return p
}

func (*FuncionContext) IsFuncionContext() {}

func NewFuncionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FuncionContext {
	var p = new(FuncionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_funcion

	return p
}

func (s *FuncionContext) GetParser() antlr.Parser { return s.parser }

func (s *FuncionContext) Get_ID() antlr.Token { return s._ID }

func (s *FuncionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *FuncionContext) Get_fn_main() IFn_mainContext { return s._fn_main }

func (s *FuncionContext) Get_tipos_var() ITipos_varContext { return s._tipos_var }

func (s *FuncionContext) Get_bloque_inst() IBloque_instContext { return s._bloque_inst }

func (s *FuncionContext) Get_params_declar() IParams_declarContext { return s._params_declar }

func (s *FuncionContext) Set_fn_main(v IFn_mainContext) { s._fn_main = v }

func (s *FuncionContext) Set_tipos_var(v ITipos_varContext) { s._tipos_var = v }

func (s *FuncionContext) Set_bloque_inst(v IBloque_instContext) { s._bloque_inst = v }

func (s *FuncionContext) Set_params_declar(v IParams_declarContext) { s._params_declar = v }

func (s *FuncionContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *FuncionContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *FuncionContext) Fn_main() IFn_mainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFn_mainContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFn_mainContext)
}

func (s *FuncionContext) T_access() IT_accessContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IT_accessContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IT_accessContext)
}

func (s *FuncionContext) FN() antlr.TerminalNode {
	return s.GetToken(RustParFN, 0)
}

func (s *FuncionContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *FuncionContext) PARIZQ() antlr.TerminalNode {
	return s.GetToken(RustParPARIZQ, 0)
}

func (s *FuncionContext) PARDER() antlr.TerminalNode {
	return s.GetToken(RustParPARDER, 0)
}

func (s *FuncionContext) TYPETHEN() antlr.TerminalNode {
	return s.GetToken(RustParTYPETHEN, 0)
}

func (s *FuncionContext) Tipos_var() ITipos_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_varContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_varContext)
}

func (s *FuncionContext) Bloque_inst() IBloque_instContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_instContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_instContext)
}

func (s *FuncionContext) Params_declar() IParams_declarContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParams_declarContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParams_declarContext)
}

func (s *FuncionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FuncionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FuncionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterFuncion(s)
	}
}

func (s *FuncionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitFuncion(s)
	}
}

func (p *RustPar) Funcion() (localctx IFuncionContext) {
	this := p
	_ = this

	localctx = NewFuncionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, RustParRULE_funcion)
	listParams := arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(183)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(142)

			var _x = p.Fn_main()

			localctx.(*FuncionContext)._fn_main = _x
		}
		localctx.(*FuncionContext).instr = localctx.(*FuncionContext).Get_fn_main().GetInstr()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(145)
			p.T_access()
		}
		{
			p.SetState(146)
			p.Match(RustParFN)
		}
		{
			p.SetState(147)

			var _m = p.Match(RustParID)

			localctx.(*FuncionContext)._ID = _m
		}
		{
			p.SetState(148)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(149)
			p.Match(RustParPARDER)
		}
		{
			p.SetState(150)
			p.Match(RustParTYPETHEN)
		}
		{
			p.SetState(151)

			var _x = p.Tipos_var()

			localctx.(*FuncionContext)._tipos_var = _x
		}
		{
			p.SetState(152)

			var _x = p.Bloque_inst()

			localctx.(*FuncionContext)._bloque_inst = _x
		}
		localctx.(*FuncionContext).instr = instructionExpre.NewFunction((func() string {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*FuncionContext).Get_ID().GetText()
			}
		}()), listParams, localctx.(*FuncionContext).Get_bloque_inst().GetL(), localctx.(*FuncionContext).Get_tipos_var().GetTipo(), (func() int {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*FuncionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*FuncionContext).Get_ID().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(155)
			p.T_access()
		}
		{
			p.SetState(156)
			p.Match(RustParFN)
		}
		{
			p.SetState(157)

			var _m = p.Match(RustParID)

			localctx.(*FuncionContext)._ID = _m
		}
		{
			p.SetState(158)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(159)
			p.Match(RustParPARDER)
		}
		{
			p.SetState(160)

			var _x = p.Bloque_inst()

			localctx.(*FuncionContext)._bloque_inst = _x
		}
		localctx.(*FuncionContext).instr = instructionExpre.NewFunction((func() string {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*FuncionContext).Get_ID().GetText()
			}
		}()), listParams, localctx.(*FuncionContext).Get_bloque_inst().GetL(), interfaces.VOID, (func() int {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*FuncionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*FuncionContext).Get_ID().GetColumn()
			}
		}()))

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(163)
			p.T_access()
		}
		{
			p.SetState(164)
			p.Match(RustParFN)
		}
		{
			p.SetState(165)

			var _m = p.Match(RustParID)

			localctx.(*FuncionContext)._ID = _m
		}
		{
			p.SetState(166)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(167)

			var _x = p.params_declar(0)

			localctx.(*FuncionContext)._params_declar = _x
		}
		{
			p.SetState(168)
			p.Match(RustParPARDER)
		}
		{
			p.SetState(169)

			var _x = p.Bloque_inst()

			localctx.(*FuncionContext)._bloque_inst = _x
		}
		localctx.(*FuncionContext).instr = instructionExpre.NewFunction((func() string {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*FuncionContext).Get_ID().GetText()
			}
		}()), localctx.(*FuncionContext).Get_params_declar().GetLista(), localctx.(*FuncionContext).Get_bloque_inst().GetL(), interfaces.VOID, (func() int {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*FuncionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*FuncionContext).Get_ID().GetColumn()
			}
		}()))

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(172)
			p.T_access()
		}
		{
			p.SetState(173)
			p.Match(RustParFN)
		}
		{
			p.SetState(174)

			var _m = p.Match(RustParID)

			localctx.(*FuncionContext)._ID = _m
		}
		{
			p.SetState(175)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(176)

			var _x = p.params_declar(0)

			localctx.(*FuncionContext)._params_declar = _x
		}
		{
			p.SetState(177)
			p.Match(RustParPARDER)
		}
		{
			p.SetState(178)
			p.Match(RustParTYPETHEN)
		}
		{
			p.SetState(179)

			var _x = p.Tipos_var()

			localctx.(*FuncionContext)._tipos_var = _x
		}
		{
			p.SetState(180)

			var _x = p.Bloque_inst()

			localctx.(*FuncionContext)._bloque_inst = _x
		}
		localctx.(*FuncionContext).instr = instructionExpre.NewFunction((func() string {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*FuncionContext).Get_ID().GetText()
			}
		}()), localctx.(*FuncionContext).Get_params_declar().GetLista(), localctx.(*FuncionContext).Get_bloque_inst().GetL(), localctx.(*FuncionContext).Get_tipos_var().GetTipo(), (func() int {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*FuncionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*FuncionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*FuncionContext).Get_ID().GetColumn()
			}
		}()))

	}

	return localctx
}

// IT_accessContext is an interface to support dynamic dispatch.
type IT_accessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetModAccess returns the modAccess attribute.
	GetModAccess() interfaces.TipoAccess

	// SetModAccess sets the modAccess attribute.
	SetModAccess(interfaces.TipoAccess)

	// IsT_accessContext differentiates from other interfaces.
	IsT_accessContext()
}

type T_accessContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	modAccess interfaces.TipoAccess
}

func NewEmptyT_accessContext() *T_accessContext {
	var p = new(T_accessContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_t_access
	return p
}

func (*T_accessContext) IsT_accessContext() {}

func NewT_accessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *T_accessContext {
	var p = new(T_accessContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_t_access

	return p
}

func (s *T_accessContext) GetParser() antlr.Parser { return s.parser }

func (s *T_accessContext) GetModAccess() interfaces.TipoAccess { return s.modAccess }

func (s *T_accessContext) SetModAccess(v interfaces.TipoAccess) { s.modAccess = v }

func (s *T_accessContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(RustParPUBLIC, 0)
}

func (s *T_accessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *T_accessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *T_accessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterT_access(s)
	}
}

func (s *T_accessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitT_access(s)
	}
}

func (p *RustPar) T_access() (localctx IT_accessContext) {
	this := p
	_ = this

	localctx = NewT_accessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, RustParRULE_t_access)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(188)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case RustParPUBLIC:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(185)
			p.Match(RustParPUBLIC)
		}
		localctx.(*T_accessContext).modAccess = interfaces.PUBLIC

	case RustParFN:
		p.EnterOuterAlt(localctx, 2)
		localctx.(*T_accessContext).modAccess = interfaces.PRIVATE

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IParams_declarContext is an interface to support dynamic dispatch.
type IParams_declarContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetListdec returns the listdec rule contexts.
	GetListdec() IParams_declarContext

	// Get_declar_parametros returns the _declar_parametros rule contexts.
	Get_declar_parametros() IDeclar_parametrosContext

	// SetListdec sets the listdec rule contexts.
	SetListdec(IParams_declarContext)

	// Set_declar_parametros sets the _declar_parametros rule contexts.
	Set_declar_parametros(IDeclar_parametrosContext)

	// GetLista returns the lista attribute.
	GetLista() *arrayList.List

	// SetLista sets the lista attribute.
	SetLista(*arrayList.List)

	// IsParams_declarContext differentiates from other interfaces.
	IsParams_declarContext()
}

type Params_declarContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	lista              *arrayList.List
	listdec            IParams_declarContext
	_declar_parametros IDeclar_parametrosContext
}

func NewEmptyParams_declarContext() *Params_declarContext {
	var p = new(Params_declarContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_params_declar
	return p
}

func (*Params_declarContext) IsParams_declarContext() {}

func NewParams_declarContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Params_declarContext {
	var p = new(Params_declarContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_params_declar

	return p
}

func (s *Params_declarContext) GetParser() antlr.Parser { return s.parser }

func (s *Params_declarContext) GetListdec() IParams_declarContext { return s.listdec }

func (s *Params_declarContext) Get_declar_parametros() IDeclar_parametrosContext {
	return s._declar_parametros
}

func (s *Params_declarContext) SetListdec(v IParams_declarContext) { s.listdec = v }

func (s *Params_declarContext) Set_declar_parametros(v IDeclar_parametrosContext) {
	s._declar_parametros = v
}

func (s *Params_declarContext) GetLista() *arrayList.List { return s.lista }

func (s *Params_declarContext) SetLista(v *arrayList.List) { s.lista = v }

func (s *Params_declarContext) Declar_parametros() IDeclar_parametrosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclar_parametrosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclar_parametrosContext)
}

func (s *Params_declarContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *Params_declarContext) Params_declar() IParams_declarContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParams_declarContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParams_declarContext)
}

func (s *Params_declarContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Params_declarContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Params_declarContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterParams_declar(s)
	}
}

func (s *Params_declarContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitParams_declar(s)
	}
}

func (p *RustPar) Params_declar() (localctx IParams_declarContext) {
	return p.params_declar(0)
}

func (p *RustPar) params_declar(_p int) (localctx IParams_declarContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParams_declarContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParams_declarContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 12
	p.EnterRecursionRule(localctx, 12, RustParRULE_params_declar, _p)

	localctx.(*Params_declarContext).lista = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(191)

		var _x = p.Declar_parametros()

		localctx.(*Params_declarContext)._declar_parametros = _x
	}
	localctx.(*Params_declarContext).lista.Add(localctx.(*Params_declarContext).Get_declar_parametros().GetIn_dec())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(201)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParams_declarContext(p, _parentctx, _parentState)
			localctx.(*Params_declarContext).listdec = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_params_declar)
			p.SetState(194)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(195)
				p.Match(RustParCOMA)
			}
			{
				p.SetState(196)

				var _x = p.Declar_parametros()

				localctx.(*Params_declarContext)._declar_parametros = _x
			}

			localctx.(*Params_declarContext).GetListdec().GetLista().Add(localctx.(*Params_declarContext).Get_declar_parametros().GetIn_dec())
			localctx.(*Params_declarContext).lista = localctx.(*Params_declarContext).GetListdec().GetLista()

		}
		p.SetState(203)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}

	return localctx
}

// IDeclar_parametrosContext is an interface to support dynamic dispatch.
type IDeclar_parametrosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetIsMut returns the isMut rule contexts.
	GetIsMut() IIs_mutContext

	// Get_tipos_var returns the _tipos_var rule contexts.
	Get_tipos_var() ITipos_varContext

	// Get_array_type returns the _array_type rule contexts.
	Get_array_type() IArray_typeContext

	// SetIsMut sets the isMut rule contexts.
	SetIsMut(IIs_mutContext)

	// Set_tipos_var sets the _tipos_var rule contexts.
	Set_tipos_var(ITipos_varContext)

	// Set_array_type sets the _array_type rule contexts.
	Set_array_type(IArray_typeContext)

	// GetIn_dec returns the in_dec attribute.
	GetIn_dec() interfaces.Instruction

	// SetIn_dec sets the in_dec attribute.
	SetIn_dec(interfaces.Instruction)

	// IsDeclar_parametrosContext differentiates from other interfaces.
	IsDeclar_parametrosContext()
}

type Declar_parametrosContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	in_dec      interfaces.Instruction
	isMut       IIs_mutContext
	_ID         antlr.Token
	_tipos_var  ITipos_varContext
	_array_type IArray_typeContext
}

func NewEmptyDeclar_parametrosContext() *Declar_parametrosContext {
	var p = new(Declar_parametrosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_declar_parametros
	return p
}

func (*Declar_parametrosContext) IsDeclar_parametrosContext() {}

func NewDeclar_parametrosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declar_parametrosContext {
	var p = new(Declar_parametrosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_declar_parametros

	return p
}

func (s *Declar_parametrosContext) GetParser() antlr.Parser { return s.parser }

func (s *Declar_parametrosContext) Get_ID() antlr.Token { return s._ID }

func (s *Declar_parametrosContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Declar_parametrosContext) GetIsMut() IIs_mutContext { return s.isMut }

func (s *Declar_parametrosContext) Get_tipos_var() ITipos_varContext { return s._tipos_var }

func (s *Declar_parametrosContext) Get_array_type() IArray_typeContext { return s._array_type }

func (s *Declar_parametrosContext) SetIsMut(v IIs_mutContext) { s.isMut = v }

func (s *Declar_parametrosContext) Set_tipos_var(v ITipos_varContext) { s._tipos_var = v }

func (s *Declar_parametrosContext) Set_array_type(v IArray_typeContext) { s._array_type = v }

func (s *Declar_parametrosContext) GetIn_dec() interfaces.Instruction { return s.in_dec }

func (s *Declar_parametrosContext) SetIn_dec(v interfaces.Instruction) { s.in_dec = v }

func (s *Declar_parametrosContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *Declar_parametrosContext) DPUNTO2() antlr.TerminalNode {
	return s.GetToken(RustParDPUNTO2, 0)
}

func (s *Declar_parametrosContext) Tipos_var() ITipos_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_varContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_varContext)
}

func (s *Declar_parametrosContext) Is_mut() IIs_mutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIs_mutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIs_mutContext)
}

func (s *Declar_parametrosContext) AMP() antlr.TerminalNode {
	return s.GetToken(RustParAMP, 0)
}

func (s *Declar_parametrosContext) MUT() antlr.TerminalNode {
	return s.GetToken(RustParMUT, 0)
}

func (s *Declar_parametrosContext) Array_type() IArray_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Declar_parametrosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declar_parametrosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declar_parametrosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterDeclar_parametros(s)
	}
}

func (s *Declar_parametrosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitDeclar_parametros(s)
	}
}

func (p *RustPar) Declar_parametros() (localctx IDeclar_parametrosContext) {
	this := p
	_ = this

	localctx = NewDeclar_parametrosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, RustParRULE_declar_parametros)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(217)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(204)

			var _x = p.Is_mut()

			localctx.(*Declar_parametrosContext).isMut = _x
		}
		{
			p.SetState(205)

			var _m = p.Match(RustParID)

			localctx.(*Declar_parametrosContext)._ID = _m
		}
		{
			p.SetState(206)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(207)

			var _x = p.Tipos_var()

			localctx.(*Declar_parametrosContext)._tipos_var = _x
		}

		listaIdes := arrayList.New()
		listaIdes.Add(expresion.NewIdentificador((func() string {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetText()
			}
		}()), (func() int {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetColumn()
			}
		}())))
		decl := instruction.NewDeclaration((func() string {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetText()
			}
		}()), localctx.(*Declar_parametrosContext).Get_tipos_var().GetTipo(), nil, localctx.(*Declar_parametrosContext).GetIsMut().GetMut(), (func() int {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetColumn()
			}
		}()))
		localctx.(*Declar_parametrosContext).in_dec = decl

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(210)

			var _m = p.Match(RustParID)

			localctx.(*Declar_parametrosContext)._ID = _m
		}
		{
			p.SetState(211)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(212)
			p.Match(RustParAMP)
		}
		{
			p.SetState(213)
			p.Match(RustParMUT)
		}
		{
			p.SetState(214)

			var _x = p.Array_type()

			localctx.(*Declar_parametrosContext)._array_type = _x
		}

		listaIdes := arrayList.New()
		listaIdes.Add(expresion.NewIdentificador((func() string {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetText()
			}
		}()), (func() int {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetColumn()
			}
		}())))
		decl := instruction.NewArrayDeclaration((func() string {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetText()
			}
		}()), localctx.(*Declar_parametrosContext).Get_array_type().GetTy(), nil, true, (func() int {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*Declar_parametrosContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Declar_parametrosContext).Get_ID().GetColumn()
			}
		}()))
		localctx.(*Declar_parametrosContext).in_dec = decl

	}

	return localctx
}

// IFn_mainContext is an interface to support dynamic dispatch.
type IFn_mainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MAIN returns the _MAIN token.
	Get_MAIN() antlr.Token

	// Set_MAIN sets the _MAIN token.
	Set_MAIN(antlr.Token)

	// Get_bloque_inst returns the _bloque_inst rule contexts.
	Get_bloque_inst() IBloque_instContext

	// Set_bloque_inst sets the _bloque_inst rule contexts.
	Set_bloque_inst(IBloque_instContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsFn_mainContext differentiates from other interfaces.
	IsFn_mainContext()
}

type Fn_mainContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	instr        interfaces.Instruction
	_MAIN        antlr.Token
	_bloque_inst IBloque_instContext
}

func NewEmptyFn_mainContext() *Fn_mainContext {
	var p = new(Fn_mainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_fn_main
	return p
}

func (*Fn_mainContext) IsFn_mainContext() {}

func NewFn_mainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fn_mainContext {
	var p = new(Fn_mainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_fn_main

	return p
}

func (s *Fn_mainContext) GetParser() antlr.Parser { return s.parser }

func (s *Fn_mainContext) Get_MAIN() antlr.Token { return s._MAIN }

func (s *Fn_mainContext) Set_MAIN(v antlr.Token) { s._MAIN = v }

func (s *Fn_mainContext) Get_bloque_inst() IBloque_instContext { return s._bloque_inst }

func (s *Fn_mainContext) Set_bloque_inst(v IBloque_instContext) { s._bloque_inst = v }

func (s *Fn_mainContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Fn_mainContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Fn_mainContext) FN() antlr.TerminalNode {
	return s.GetToken(RustParFN, 0)
}

func (s *Fn_mainContext) MAIN() antlr.TerminalNode {
	return s.GetToken(RustParMAIN, 0)
}

func (s *Fn_mainContext) PARIZQ() antlr.TerminalNode {
	return s.GetToken(RustParPARIZQ, 0)
}

func (s *Fn_mainContext) PARDER() antlr.TerminalNode {
	return s.GetToken(RustParPARDER, 0)
}

func (s *Fn_mainContext) Bloque_inst() IBloque_instContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_instContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_instContext)
}

func (s *Fn_mainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fn_mainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fn_mainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterFn_main(s)
	}
}

func (s *Fn_mainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitFn_main(s)
	}
}

func (p *RustPar) Fn_main() (localctx IFn_mainContext) {
	this := p
	_ = this

	localctx = NewFn_mainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, RustParRULE_fn_main)
	listParams := arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(219)
		p.Match(RustParFN)
	}
	{
		p.SetState(220)

		var _m = p.Match(RustParMAIN)

		localctx.(*Fn_mainContext)._MAIN = _m
	}
	{
		p.SetState(221)
		p.Match(RustParPARIZQ)
	}
	{
		p.SetState(222)
		p.Match(RustParPARDER)
	}
	{
		p.SetState(223)

		var _x = p.Bloque_inst()

		localctx.(*Fn_mainContext)._bloque_inst = _x
	}
	localctx.(*Fn_mainContext).instr = instructionExpre.NewFunction("main", listParams, localctx.(*Fn_mainContext).Get_bloque_inst().GetL(), interfaces.VOID, (func() int {
		if localctx.(*Fn_mainContext).Get_MAIN() == nil {
			return 0
		} else {
			return localctx.(*Fn_mainContext).Get_MAIN().GetLine()
		}
	}()), (func() int {
		if localctx.(*Fn_mainContext).Get_MAIN() == nil {
			return 0
		} else {
			return localctx.(*Fn_mainContext).Get_MAIN().GetColumn()
		}
	}()))

	return localctx
}

// IInstruccionContext is an interface to support dynamic dispatch.
type IInstruccionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_printconsola returns the _printconsola rule contexts.
	Get_printconsola() IPrintconsolaContext

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Get_asignacion returns the _asignacion rule contexts.
	Get_asignacion() IAsignacionContext

	// Get_pushVec returns the _pushVec rule contexts.
	Get_pushVec() IPushVecContext

	// Get_if_sent returns the _if_sent rule contexts.
	Get_if_sent() IIf_sentContext

	// Get_match_sent returns the _match_sent rule contexts.
	Get_match_sent() IMatch_sentContext

	// Get_loopB returns the _loopB rule contexts.
	Get_loopB() ILoopBContext

	// Get_lWhile returns the _lWhile rule contexts.
	Get_lWhile() ILWhileContext

	// Get_lForin returns the _lForin rule contexts.
	Get_lForin() ILForinContext

	// Get_lBreak returns the _lBreak rule contexts.
	Get_lBreak() ILBreakContext

	// Get_lContinue returns the _lContinue rule contexts.
	Get_lContinue() ILContinueContext

	// Get_newStruct returns the _newStruct rule contexts.
	Get_newStruct() INewStructContext

	// Get_callFunction returns the _callFunction rule contexts.
	Get_callFunction() ICallFunctionContext

	// Get_returnFun returns the _returnFun rule contexts.
	Get_returnFun() IReturnFunContext

	// Set_printconsola sets the _printconsola rule contexts.
	Set_printconsola(IPrintconsolaContext)

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// Set_asignacion sets the _asignacion rule contexts.
	Set_asignacion(IAsignacionContext)

	// Set_pushVec sets the _pushVec rule contexts.
	Set_pushVec(IPushVecContext)

	// Set_if_sent sets the _if_sent rule contexts.
	Set_if_sent(IIf_sentContext)

	// Set_match_sent sets the _match_sent rule contexts.
	Set_match_sent(IMatch_sentContext)

	// Set_loopB sets the _loopB rule contexts.
	Set_loopB(ILoopBContext)

	// Set_lWhile sets the _lWhile rule contexts.
	Set_lWhile(ILWhileContext)

	// Set_lForin sets the _lForin rule contexts.
	Set_lForin(ILForinContext)

	// Set_lBreak sets the _lBreak rule contexts.
	Set_lBreak(ILBreakContext)

	// Set_lContinue sets the _lContinue rule contexts.
	Set_lContinue(ILContinueContext)

	// Set_newStruct sets the _newStruct rule contexts.
	Set_newStruct(INewStructContext)

	// Set_callFunction sets the _callFunction rule contexts.
	Set_callFunction(ICallFunctionContext)

	// Set_returnFun sets the _returnFun rule contexts.
	Set_returnFun(IReturnFunContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsInstruccionContext differentiates from other interfaces.
	IsInstruccionContext()
}

type InstruccionContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	instr         interfaces.Instruction
	_printconsola IPrintconsolaContext
	_declaracion  IDeclaracionContext
	_asignacion   IAsignacionContext
	_pushVec      IPushVecContext
	_if_sent      IIf_sentContext
	_match_sent   IMatch_sentContext
	_loopB        ILoopBContext
	_lWhile       ILWhileContext
	_lForin       ILForinContext
	_lBreak       ILBreakContext
	_lContinue    ILContinueContext
	_newStruct    INewStructContext
	_callFunction ICallFunctionContext
	_returnFun    IReturnFunContext
}

func NewEmptyInstruccionContext() *InstruccionContext {
	var p = new(InstruccionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_instruccion
	return p
}

func (*InstruccionContext) IsInstruccionContext() {}

func NewInstruccionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionContext {
	var p = new(InstruccionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_instruccion

	return p
}

func (s *InstruccionContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionContext) Get_printconsola() IPrintconsolaContext { return s._printconsola }

func (s *InstruccionContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *InstruccionContext) Get_asignacion() IAsignacionContext { return s._asignacion }

func (s *InstruccionContext) Get_pushVec() IPushVecContext { return s._pushVec }

func (s *InstruccionContext) Get_if_sent() IIf_sentContext { return s._if_sent }

func (s *InstruccionContext) Get_match_sent() IMatch_sentContext { return s._match_sent }

func (s *InstruccionContext) Get_loopB() ILoopBContext { return s._loopB }

func (s *InstruccionContext) Get_lWhile() ILWhileContext { return s._lWhile }

func (s *InstruccionContext) Get_lForin() ILForinContext { return s._lForin }

func (s *InstruccionContext) Get_lBreak() ILBreakContext { return s._lBreak }

func (s *InstruccionContext) Get_lContinue() ILContinueContext { return s._lContinue }

func (s *InstruccionContext) Get_newStruct() INewStructContext { return s._newStruct }

func (s *InstruccionContext) Get_callFunction() ICallFunctionContext { return s._callFunction }

func (s *InstruccionContext) Get_returnFun() IReturnFunContext { return s._returnFun }

func (s *InstruccionContext) Set_printconsola(v IPrintconsolaContext) { s._printconsola = v }

func (s *InstruccionContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *InstruccionContext) Set_asignacion(v IAsignacionContext) { s._asignacion = v }

func (s *InstruccionContext) Set_pushVec(v IPushVecContext) { s._pushVec = v }

func (s *InstruccionContext) Set_if_sent(v IIf_sentContext) { s._if_sent = v }

func (s *InstruccionContext) Set_match_sent(v IMatch_sentContext) { s._match_sent = v }

func (s *InstruccionContext) Set_loopB(v ILoopBContext) { s._loopB = v }

func (s *InstruccionContext) Set_lWhile(v ILWhileContext) { s._lWhile = v }

func (s *InstruccionContext) Set_lForin(v ILForinContext) { s._lForin = v }

func (s *InstruccionContext) Set_lBreak(v ILBreakContext) { s._lBreak = v }

func (s *InstruccionContext) Set_lContinue(v ILContinueContext) { s._lContinue = v }

func (s *InstruccionContext) Set_newStruct(v INewStructContext) { s._newStruct = v }

func (s *InstruccionContext) Set_callFunction(v ICallFunctionContext) { s._callFunction = v }

func (s *InstruccionContext) Set_returnFun(v IReturnFunContext) { s._returnFun = v }

func (s *InstruccionContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *InstruccionContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *InstruccionContext) Printconsola() IPrintconsolaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintconsolaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintconsolaContext)
}

func (s *InstruccionContext) PTCOMA() antlr.TerminalNode {
	return s.GetToken(RustParPTCOMA, 0)
}

func (s *InstruccionContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *InstruccionContext) Asignacion() IAsignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignacionContext)
}

func (s *InstruccionContext) PushVec() IPushVecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPushVecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPushVecContext)
}

func (s *InstruccionContext) If_sent() IIf_sentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_sentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_sentContext)
}

func (s *InstruccionContext) Match_sent() IMatch_sentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_sentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_sentContext)
}

func (s *InstruccionContext) LoopB() ILoopBContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopBContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopBContext)
}

func (s *InstruccionContext) LWhile() ILWhileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILWhileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILWhileContext)
}

func (s *InstruccionContext) LForin() ILForinContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILForinContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILForinContext)
}

func (s *InstruccionContext) LBreak() ILBreakContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILBreakContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILBreakContext)
}

func (s *InstruccionContext) LContinue() ILContinueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILContinueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILContinueContext)
}

func (s *InstruccionContext) NewStruct() INewStructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewStructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewStructContext)
}

func (s *InstruccionContext) CallFunction() ICallFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFunctionContext)
}

func (s *InstruccionContext) ReturnFun() IReturnFunContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnFunContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnFunContext)
}

func (s *InstruccionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterInstruccion(s)
	}
}

func (s *InstruccionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitInstruccion(s)
	}
}

func (p *RustPar) Instruccion() (localctx IInstruccionContext) {
	this := p
	_ = this

	localctx = NewInstruccionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, RustParRULE_instruccion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(276)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(226)

			var _x = p.Printconsola()

			localctx.(*InstruccionContext)._printconsola = _x
		}
		{
			p.SetState(227)
			p.Match(RustParPTCOMA)
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_printconsola().GetInstr()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(230)

			var _x = p.Declaracion()

			localctx.(*InstruccionContext)._declaracion = _x
		}
		{
			p.SetState(231)
			p.Match(RustParPTCOMA)
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_declaracion().GetInstr()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(234)

			var _x = p.Asignacion()

			localctx.(*InstruccionContext)._asignacion = _x
		}
		{
			p.SetState(235)
			p.Match(RustParPTCOMA)
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_asignacion().GetInstr()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(238)

			var _x = p.PushVec()

			localctx.(*InstruccionContext)._pushVec = _x
		}
		{
			p.SetState(239)
			p.Match(RustParPTCOMA)
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_pushVec().GetInstr()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(242)

			var _x = p.If_sent()

			localctx.(*InstruccionContext)._if_sent = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_if_sent().GetInstr()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(245)

			var _x = p.Match_sent()

			localctx.(*InstruccionContext)._match_sent = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_match_sent().GetInstr()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(248)

			var _x = p.LoopB()

			localctx.(*InstruccionContext)._loopB = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_loopB().GetLop()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(251)

			var _x = p.LWhile()

			localctx.(*InstruccionContext)._lWhile = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_lWhile().GetLwh()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(254)

			var _x = p.LForin()

			localctx.(*InstruccionContext)._lForin = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_lForin().GetLfor()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(257)

			var _x = p.LBreak()

			localctx.(*InstruccionContext)._lBreak = _x
		}
		{
			p.SetState(258)
			p.Match(RustParPTCOMA)
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_lBreak().GetBr()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(261)

			var _x = p.LContinue()

			localctx.(*InstruccionContext)._lContinue = _x
		}
		{
			p.SetState(262)
			p.Match(RustParPTCOMA)
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_lContinue().GetCn()

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(265)

			var _x = p.NewStruct()

			localctx.(*InstruccionContext)._newStruct = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_newStruct().GetStr()

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(268)

			var _x = p.CallFunction()

			localctx.(*InstruccionContext)._callFunction = _x
		}
		{
			p.SetState(269)
			p.Match(RustParPTCOMA)
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_callFunction().GetInstr()

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(272)

			var _x = p.ReturnFun()

			localctx.(*InstruccionContext)._returnFun = _x
		}
		{
			p.SetState(273)
			p.Match(RustParPTCOMA)
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_returnFun().GetInstr()

	}

	return localctx
}

// IInstruccion_onlyContext is an interface to support dynamic dispatch.
type IInstruccion_onlyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_printconsola returns the _printconsola rule contexts.
	Get_printconsola() IPrintconsolaContext

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Get_asignacion returns the _asignacion rule contexts.
	Get_asignacion() IAsignacionContext

	// Get_pushVec returns the _pushVec rule contexts.
	Get_pushVec() IPushVecContext

	// Get_if_sent returns the _if_sent rule contexts.
	Get_if_sent() IIf_sentContext

	// Get_match_sent returns the _match_sent rule contexts.
	Get_match_sent() IMatch_sentContext

	// Get_loopB returns the _loopB rule contexts.
	Get_loopB() ILoopBContext

	// Get_lWhile returns the _lWhile rule contexts.
	Get_lWhile() ILWhileContext

	// Get_lForin returns the _lForin rule contexts.
	Get_lForin() ILForinContext

	// Get_lBreak returns the _lBreak rule contexts.
	Get_lBreak() ILBreakContext

	// Get_lContinue returns the _lContinue rule contexts.
	Get_lContinue() ILContinueContext

	// Get_callFunction returns the _callFunction rule contexts.
	Get_callFunction() ICallFunctionContext

	// Get_returnFun returns the _returnFun rule contexts.
	Get_returnFun() IReturnFunContext

	// Set_printconsola sets the _printconsola rule contexts.
	Set_printconsola(IPrintconsolaContext)

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// Set_asignacion sets the _asignacion rule contexts.
	Set_asignacion(IAsignacionContext)

	// Set_pushVec sets the _pushVec rule contexts.
	Set_pushVec(IPushVecContext)

	// Set_if_sent sets the _if_sent rule contexts.
	Set_if_sent(IIf_sentContext)

	// Set_match_sent sets the _match_sent rule contexts.
	Set_match_sent(IMatch_sentContext)

	// Set_loopB sets the _loopB rule contexts.
	Set_loopB(ILoopBContext)

	// Set_lWhile sets the _lWhile rule contexts.
	Set_lWhile(ILWhileContext)

	// Set_lForin sets the _lForin rule contexts.
	Set_lForin(ILForinContext)

	// Set_lBreak sets the _lBreak rule contexts.
	Set_lBreak(ILBreakContext)

	// Set_lContinue sets the _lContinue rule contexts.
	Set_lContinue(ILContinueContext)

	// Set_callFunction sets the _callFunction rule contexts.
	Set_callFunction(ICallFunctionContext)

	// Set_returnFun sets the _returnFun rule contexts.
	Set_returnFun(IReturnFunContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsInstruccion_onlyContext differentiates from other interfaces.
	IsInstruccion_onlyContext()
}

type Instruccion_onlyContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	instr         interfaces.Instruction
	_printconsola IPrintconsolaContext
	_declaracion  IDeclaracionContext
	_asignacion   IAsignacionContext
	_pushVec      IPushVecContext
	_if_sent      IIf_sentContext
	_match_sent   IMatch_sentContext
	_loopB        ILoopBContext
	_lWhile       ILWhileContext
	_lForin       ILForinContext
	_lBreak       ILBreakContext
	_lContinue    ILContinueContext
	_callFunction ICallFunctionContext
	_returnFun    IReturnFunContext
}

func NewEmptyInstruccion_onlyContext() *Instruccion_onlyContext {
	var p = new(Instruccion_onlyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_instruccion_only
	return p
}

func (*Instruccion_onlyContext) IsInstruccion_onlyContext() {}

func NewInstruccion_onlyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Instruccion_onlyContext {
	var p = new(Instruccion_onlyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_instruccion_only

	return p
}

func (s *Instruccion_onlyContext) GetParser() antlr.Parser { return s.parser }

func (s *Instruccion_onlyContext) Get_printconsola() IPrintconsolaContext { return s._printconsola }

func (s *Instruccion_onlyContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *Instruccion_onlyContext) Get_asignacion() IAsignacionContext { return s._asignacion }

func (s *Instruccion_onlyContext) Get_pushVec() IPushVecContext { return s._pushVec }

func (s *Instruccion_onlyContext) Get_if_sent() IIf_sentContext { return s._if_sent }

func (s *Instruccion_onlyContext) Get_match_sent() IMatch_sentContext { return s._match_sent }

func (s *Instruccion_onlyContext) Get_loopB() ILoopBContext { return s._loopB }

func (s *Instruccion_onlyContext) Get_lWhile() ILWhileContext { return s._lWhile }

func (s *Instruccion_onlyContext) Get_lForin() ILForinContext { return s._lForin }

func (s *Instruccion_onlyContext) Get_lBreak() ILBreakContext { return s._lBreak }

func (s *Instruccion_onlyContext) Get_lContinue() ILContinueContext { return s._lContinue }

func (s *Instruccion_onlyContext) Get_callFunction() ICallFunctionContext { return s._callFunction }

func (s *Instruccion_onlyContext) Get_returnFun() IReturnFunContext { return s._returnFun }

func (s *Instruccion_onlyContext) Set_printconsola(v IPrintconsolaContext) { s._printconsola = v }

func (s *Instruccion_onlyContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *Instruccion_onlyContext) Set_asignacion(v IAsignacionContext) { s._asignacion = v }

func (s *Instruccion_onlyContext) Set_pushVec(v IPushVecContext) { s._pushVec = v }

func (s *Instruccion_onlyContext) Set_if_sent(v IIf_sentContext) { s._if_sent = v }

func (s *Instruccion_onlyContext) Set_match_sent(v IMatch_sentContext) { s._match_sent = v }

func (s *Instruccion_onlyContext) Set_loopB(v ILoopBContext) { s._loopB = v }

func (s *Instruccion_onlyContext) Set_lWhile(v ILWhileContext) { s._lWhile = v }

func (s *Instruccion_onlyContext) Set_lForin(v ILForinContext) { s._lForin = v }

func (s *Instruccion_onlyContext) Set_lBreak(v ILBreakContext) { s._lBreak = v }

func (s *Instruccion_onlyContext) Set_lContinue(v ILContinueContext) { s._lContinue = v }

func (s *Instruccion_onlyContext) Set_callFunction(v ICallFunctionContext) { s._callFunction = v }

func (s *Instruccion_onlyContext) Set_returnFun(v IReturnFunContext) { s._returnFun = v }

func (s *Instruccion_onlyContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Instruccion_onlyContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Instruccion_onlyContext) Printconsola() IPrintconsolaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintconsolaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintconsolaContext)
}

func (s *Instruccion_onlyContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *Instruccion_onlyContext) Asignacion() IAsignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignacionContext)
}

func (s *Instruccion_onlyContext) PushVec() IPushVecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPushVecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPushVecContext)
}

func (s *Instruccion_onlyContext) If_sent() IIf_sentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_sentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_sentContext)
}

func (s *Instruccion_onlyContext) Match_sent() IMatch_sentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_sentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_sentContext)
}

func (s *Instruccion_onlyContext) LoopB() ILoopBContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopBContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopBContext)
}

func (s *Instruccion_onlyContext) LWhile() ILWhileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILWhileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILWhileContext)
}

func (s *Instruccion_onlyContext) LForin() ILForinContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILForinContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILForinContext)
}

func (s *Instruccion_onlyContext) LBreak() ILBreakContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILBreakContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILBreakContext)
}

func (s *Instruccion_onlyContext) LContinue() ILContinueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILContinueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILContinueContext)
}

func (s *Instruccion_onlyContext) CallFunction() ICallFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFunctionContext)
}

func (s *Instruccion_onlyContext) ReturnFun() IReturnFunContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnFunContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnFunContext)
}

func (s *Instruccion_onlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Instruccion_onlyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Instruccion_onlyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterInstruccion_only(s)
	}
}

func (s *Instruccion_onlyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitInstruccion_only(s)
	}
}

func (p *RustPar) Instruccion_only() (localctx IInstruccion_onlyContext) {
	this := p
	_ = this

	localctx = NewInstruccion_onlyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, RustParRULE_instruccion_only)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(317)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(278)

			var _x = p.Printconsola()

			localctx.(*Instruccion_onlyContext)._printconsola = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_printconsola().GetInstr()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(281)

			var _x = p.Declaracion()

			localctx.(*Instruccion_onlyContext)._declaracion = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_declaracion().GetInstr()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(284)

			var _x = p.Asignacion()

			localctx.(*Instruccion_onlyContext)._asignacion = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_asignacion().GetInstr()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(287)

			var _x = p.PushVec()

			localctx.(*Instruccion_onlyContext)._pushVec = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_pushVec().GetInstr()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(290)

			var _x = p.If_sent()

			localctx.(*Instruccion_onlyContext)._if_sent = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_if_sent().GetInstr()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(293)

			var _x = p.Match_sent()

			localctx.(*Instruccion_onlyContext)._match_sent = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_match_sent().GetInstr()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(296)

			var _x = p.LoopB()

			localctx.(*Instruccion_onlyContext)._loopB = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_loopB().GetLop()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(299)

			var _x = p.LWhile()

			localctx.(*Instruccion_onlyContext)._lWhile = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_lWhile().GetLwh()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(302)

			var _x = p.LForin()

			localctx.(*Instruccion_onlyContext)._lForin = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_lForin().GetLfor()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(305)

			var _x = p.LBreak()

			localctx.(*Instruccion_onlyContext)._lBreak = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_lBreak().GetBr()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(308)

			var _x = p.LContinue()

			localctx.(*Instruccion_onlyContext)._lContinue = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_lContinue().GetCn()

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(311)

			var _x = p.CallFunction()

			localctx.(*Instruccion_onlyContext)._callFunction = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_callFunction().GetInstr()

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(314)

			var _x = p.ReturnFun()

			localctx.(*Instruccion_onlyContext)._returnFun = _x
		}
		localctx.(*Instruccion_onlyContext).instr = localctx.(*Instruccion_onlyContext).Get_returnFun().GetInstr()

	}

	return localctx
}

// IPushVecContext is an interface to support dynamic dispatch.
type IPushVecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetVal returns the val rule contexts.
	GetVal() IExpressionContext

	// GetVal1 returns the val1 rule contexts.
	GetVal1() IExpressionContext

	// GetVal2 returns the val2 rule contexts.
	GetVal2() IExpressionContext

	// SetVal sets the val rule contexts.
	SetVal(IExpressionContext)

	// SetVal1 sets the val1 rule contexts.
	SetVal1(IExpressionContext)

	// SetVal2 sets the val2 rule contexts.
	SetVal2(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsPushVecContext differentiates from other interfaces.
	IsPushVecContext()
}

type PushVecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	instr  interfaces.Instruction
	_ID    antlr.Token
	val    IExpressionContext
	val1   IExpressionContext
	val2   IExpressionContext
}

func NewEmptyPushVecContext() *PushVecContext {
	var p = new(PushVecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_pushVec
	return p
}

func (*PushVecContext) IsPushVecContext() {}

func NewPushVecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PushVecContext {
	var p = new(PushVecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_pushVec

	return p
}

func (s *PushVecContext) GetParser() antlr.Parser { return s.parser }

func (s *PushVecContext) Get_ID() antlr.Token { return s._ID }

func (s *PushVecContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *PushVecContext) GetVal() IExpressionContext { return s.val }

func (s *PushVecContext) GetVal1() IExpressionContext { return s.val1 }

func (s *PushVecContext) GetVal2() IExpressionContext { return s.val2 }

func (s *PushVecContext) SetVal(v IExpressionContext) { s.val = v }

func (s *PushVecContext) SetVal1(v IExpressionContext) { s.val1 = v }

func (s *PushVecContext) SetVal2(v IExpressionContext) { s.val2 = v }

func (s *PushVecContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *PushVecContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *PushVecContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *PushVecContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(RustParPUNTO, 0)
}

func (s *PushVecContext) PUSH() antlr.TerminalNode {
	return s.GetToken(RustParPUSH, 0)
}

func (s *PushVecContext) PARIZQ() antlr.TerminalNode {
	return s.GetToken(RustParPARIZQ, 0)
}

func (s *PushVecContext) PARDER() antlr.TerminalNode {
	return s.GetToken(RustParPARDER, 0)
}

func (s *PushVecContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PushVecContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PushVecContext) INSERT() antlr.TerminalNode {
	return s.GetToken(RustParINSERT, 0)
}

func (s *PushVecContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *PushVecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PushVecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PushVecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterPushVec(s)
	}
}

func (s *PushVecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitPushVec(s)
	}
}

func (p *RustPar) PushVec() (localctx IPushVecContext) {
	this := p
	_ = this

	localctx = NewPushVecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, RustParRULE_pushVec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(337)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(319)

			var _m = p.Match(RustParID)

			localctx.(*PushVecContext)._ID = _m
		}
		{
			p.SetState(320)
			p.Match(RustParPUNTO)
		}
		{
			p.SetState(321)
			p.Match(RustParPUSH)
		}
		{
			p.SetState(322)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(323)

			var _x = p.expression(0)

			localctx.(*PushVecContext).val = _x
		}
		{
			p.SetState(324)
			p.Match(RustParPARDER)
		}
		localctx.(*PushVecContext).instr = instruction.NewPush((func() string {
			if localctx.(*PushVecContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*PushVecContext).Get_ID().GetText()
			}
		}()), localctx.(*PushVecContext).GetVal().GetP(), (func() int {
			if localctx.(*PushVecContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*PushVecContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*PushVecContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*PushVecContext).Get_ID().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(327)

			var _m = p.Match(RustParID)

			localctx.(*PushVecContext)._ID = _m
		}
		{
			p.SetState(328)
			p.Match(RustParPUNTO)
		}
		{
			p.SetState(329)
			p.Match(RustParINSERT)
		}
		{
			p.SetState(330)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(331)

			var _x = p.expression(0)

			localctx.(*PushVecContext).val1 = _x
		}
		{
			p.SetState(332)
			p.Match(RustParCOMA)
		}
		{
			p.SetState(333)

			var _x = p.expression(0)

			localctx.(*PushVecContext).val2 = _x
		}
		{
			p.SetState(334)
			p.Match(RustParPARDER)
		}
		localctx.(*PushVecContext).instr = instruction.NewInsert((func() string {
			if localctx.(*PushVecContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*PushVecContext).Get_ID().GetText()
			}
		}()), localctx.(*PushVecContext).GetVal1().GetP(), localctx.(*PushVecContext).GetVal2().GetP(), (func() int {
			if localctx.(*PushVecContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*PushVecContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*PushVecContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*PushVecContext).Get_ID().GetColumn()
			}
		}()))

	}

	return localctx
}

// INewStructContext is an interface to support dynamic dispatch.
type INewStructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_STRUCT returns the _STRUCT token.
	Get_STRUCT() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_STRUCT sets the _STRUCT token.
	Set_STRUCT(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_listdecStruct returns the _listdecStruct rule contexts.
	Get_listdecStruct() IListdecStructContext

	// Set_listdecStruct sets the _listdecStruct rule contexts.
	Set_listdecStruct(IListdecStructContext)

	// GetStr returns the str attribute.
	GetStr() interfaces.Instruction

	// SetStr sets the str attribute.
	SetStr(interfaces.Instruction)

	// IsNewStructContext differentiates from other interfaces.
	IsNewStructContext()
}

type NewStructContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	str            interfaces.Instruction
	_STRUCT        antlr.Token
	_ID            antlr.Token
	_listdecStruct IListdecStructContext
}

func NewEmptyNewStructContext() *NewStructContext {
	var p = new(NewStructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_newStruct
	return p
}

func (*NewStructContext) IsNewStructContext() {}

func NewNewStructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewStructContext {
	var p = new(NewStructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_newStruct

	return p
}

func (s *NewStructContext) GetParser() antlr.Parser { return s.parser }

func (s *NewStructContext) Get_STRUCT() antlr.Token { return s._STRUCT }

func (s *NewStructContext) Get_ID() antlr.Token { return s._ID }

func (s *NewStructContext) Set_STRUCT(v antlr.Token) { s._STRUCT = v }

func (s *NewStructContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *NewStructContext) Get_listdecStruct() IListdecStructContext { return s._listdecStruct }

func (s *NewStructContext) Set_listdecStruct(v IListdecStructContext) { s._listdecStruct = v }

func (s *NewStructContext) GetStr() interfaces.Instruction { return s.str }

func (s *NewStructContext) SetStr(v interfaces.Instruction) { s.str = v }

func (s *NewStructContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(RustParSTRUCT, 0)
}

func (s *NewStructContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *NewStructContext) LLAVEIZQ() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEIZQ, 0)
}

func (s *NewStructContext) ListdecStruct() IListdecStructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListdecStructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListdecStructContext)
}

func (s *NewStructContext) LLAVEDER() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEDER, 0)
}

func (s *NewStructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewStructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewStructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterNewStruct(s)
	}
}

func (s *NewStructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitNewStruct(s)
	}
}

func (p *RustPar) NewStruct() (localctx INewStructContext) {
	this := p
	_ = this

	localctx = NewNewStructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, RustParRULE_newStruct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(339)

		var _m = p.Match(RustParSTRUCT)

		localctx.(*NewStructContext)._STRUCT = _m
	}
	{
		p.SetState(340)

		var _m = p.Match(RustParID)

		localctx.(*NewStructContext)._ID = _m
	}
	{
		p.SetState(341)
		p.Match(RustParLLAVEIZQ)
	}
	{
		p.SetState(342)

		var _x = p.listdecStruct(0)

		localctx.(*NewStructContext)._listdecStruct = _x
	}
	{
		p.SetState(343)
		p.Match(RustParLLAVEDER)
	}
	localctx.(*NewStructContext).str = instructionExpre.NewStruct((func() string {
		if localctx.(*NewStructContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*NewStructContext).Get_ID().GetText()
		}
	}()), localctx.(*NewStructContext).Get_listdecStruct().GetL(), (func() int {
		if localctx.(*NewStructContext).Get_STRUCT() == nil {
			return 0
		} else {
			return localctx.(*NewStructContext).Get_STRUCT().GetLine()
		}
	}()), (func() int {
		if localctx.(*NewStructContext).Get_STRUCT() == nil {
			return 0
		} else {
			return localctx.(*NewStructContext).Get_STRUCT().GetColumn()
		}
	}()))

	return localctx
}

// IListdecStructContext is an interface to support dynamic dispatch.
type IListdecStructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// GetIdstru returns the idstru token.
	GetIdstru() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// SetIdstru sets the idstru token.
	SetIdstru(antlr.Token)

	// GetList returns the list rule contexts.
	GetList() IListdecStructContext

	// Get_tipos_var returns the _tipos_var rule contexts.
	Get_tipos_var() ITipos_varContext

	// SetList sets the list rule contexts.
	SetList(IListdecStructContext)

	// Set_tipos_var sets the _tipos_var rule contexts.
	Set_tipos_var(ITipos_varContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsListdecStructContext differentiates from other interfaces.
	IsListdecStructContext()
}

type ListdecStructContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	l          *arrayList.List
	list       IListdecStructContext
	id         antlr.Token
	_tipos_var ITipos_varContext
	idstru     antlr.Token
}

func NewEmptyListdecStructContext() *ListdecStructContext {
	var p = new(ListdecStructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_listdecStruct
	return p
}

func (*ListdecStructContext) IsListdecStructContext() {}

func NewListdecStructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListdecStructContext {
	var p = new(ListdecStructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_listdecStruct

	return p
}

func (s *ListdecStructContext) GetParser() antlr.Parser { return s.parser }

func (s *ListdecStructContext) GetId() antlr.Token { return s.id }

func (s *ListdecStructContext) GetIdstru() antlr.Token { return s.idstru }

func (s *ListdecStructContext) SetId(v antlr.Token) { s.id = v }

func (s *ListdecStructContext) SetIdstru(v antlr.Token) { s.idstru = v }

func (s *ListdecStructContext) GetList() IListdecStructContext { return s.list }

func (s *ListdecStructContext) Get_tipos_var() ITipos_varContext { return s._tipos_var }

func (s *ListdecStructContext) SetList(v IListdecStructContext) { s.list = v }

func (s *ListdecStructContext) Set_tipos_var(v ITipos_varContext) { s._tipos_var = v }

func (s *ListdecStructContext) GetL() *arrayList.List { return s.l }

func (s *ListdecStructContext) SetL(v *arrayList.List) { s.l = v }

func (s *ListdecStructContext) DPUNTO2() antlr.TerminalNode {
	return s.GetToken(RustParDPUNTO2, 0)
}

func (s *ListdecStructContext) Tipos_var() ITipos_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_varContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_varContext)
}

func (s *ListdecStructContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(RustParID)
}

func (s *ListdecStructContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(RustParID, i)
}

func (s *ListdecStructContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *ListdecStructContext) ListdecStruct() IListdecStructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListdecStructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListdecStructContext)
}

func (s *ListdecStructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListdecStructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListdecStructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterListdecStruct(s)
	}
}

func (s *ListdecStructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitListdecStruct(s)
	}
}

func (p *RustPar) ListdecStruct() (localctx IListdecStructContext) {
	return p.listdecStruct(0)
}

func (p *RustPar) listdecStruct(_p int) (localctx IListdecStructContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewListdecStructContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IListdecStructContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 26
	p.EnterRecursionRule(localctx, 26, RustParRULE_listdecStruct, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(356)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(347)

			var _m = p.Match(RustParID)

			localctx.(*ListdecStructContext).id = _m
		}
		{
			p.SetState(348)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(349)

			var _x = p.Tipos_var()

			localctx.(*ListdecStructContext)._tipos_var = _x
		}

		Str_atrib := interfaces.NewStructType((func() string {
			if localctx.(*ListdecStructContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*ListdecStructContext).GetId().GetText()
			}
		}()), localctx.(*ListdecStructContext).Get_tipos_var().GetTipo(), "")
		localctx.(*ListdecStructContext).SetL(arrayList.New())
		localctx.(*ListdecStructContext).l.Add(Str_atrib)

	case 2:
		{
			p.SetState(352)

			var _m = p.Match(RustParID)

			localctx.(*ListdecStructContext).id = _m
		}
		{
			p.SetState(353)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(354)

			var _m = p.Match(RustParID)

			localctx.(*ListdecStructContext).idstru = _m
		}

		Str_atrib := interfaces.NewStructType((func() string {
			if localctx.(*ListdecStructContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*ListdecStructContext).GetId().GetText()
			}
		}()), interfaces.NULL, (func() string {
			if localctx.(*ListdecStructContext).GetIdstru() == nil {
				return ""
			} else {
				return localctx.(*ListdecStructContext).GetIdstru().GetText()
			}
		}()))
		localctx.(*ListdecStructContext).SetL(arrayList.New())
		localctx.(*ListdecStructContext).l.Add(Str_atrib)

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(373)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(371)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
			case 1:
				localctx = NewListdecStructContext(p, _parentctx, _parentState)
				localctx.(*ListdecStructContext).list = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_listdecStruct)
				p.SetState(358)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(359)
					p.Match(RustParCOMA)
				}
				{
					p.SetState(360)

					var _m = p.Match(RustParID)

					localctx.(*ListdecStructContext).id = _m
				}
				{
					p.SetState(361)
					p.Match(RustParDPUNTO2)
				}
				{
					p.SetState(362)

					var _x = p.Tipos_var()

					localctx.(*ListdecStructContext)._tipos_var = _x
				}

				Str_atrib := interfaces.NewStructType((func() string {
					if localctx.(*ListdecStructContext).GetId() == nil {
						return ""
					} else {
						return localctx.(*ListdecStructContext).GetId().GetText()
					}
				}()), localctx.(*ListdecStructContext).Get_tipos_var().GetTipo(), "")
				localctx.(*ListdecStructContext).GetList().GetL().Add(Str_atrib)
				localctx.(*ListdecStructContext).SetL(localctx.(*ListdecStructContext).GetList().GetL())

			case 2:
				localctx = NewListdecStructContext(p, _parentctx, _parentState)
				localctx.(*ListdecStructContext).list = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_listdecStruct)
				p.SetState(365)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(366)
					p.Match(RustParCOMA)
				}
				{
					p.SetState(367)

					var _m = p.Match(RustParID)

					localctx.(*ListdecStructContext).id = _m
				}
				{
					p.SetState(368)
					p.Match(RustParDPUNTO2)
				}
				{
					p.SetState(369)

					var _m = p.Match(RustParID)

					localctx.(*ListdecStructContext).idstru = _m
				}

				Str_atrib := interfaces.NewStructType((func() string {
					if localctx.(*ListdecStructContext).GetId() == nil {
						return ""
					} else {
						return localctx.(*ListdecStructContext).GetId().GetText()
					}
				}()), interfaces.NULL, (func() string {
					if localctx.(*ListdecStructContext).GetIdstru() == nil {
						return ""
					} else {
						return localctx.(*ListdecStructContext).GetIdstru().GetText()
					}
				}()))
				localctx.(*ListdecStructContext).GetList().GetL().Add(Str_atrib)
				localctx.(*ListdecStructContext).SetL(localctx.(*ListdecStructContext).GetList().GetL())

			}

		}
		p.SetState(375)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// ICallFunctionContext is an interface to support dynamic dispatch.
type ICallFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_listParamsCall returns the _listParamsCall rule contexts.
	Get_listParamsCall() IListParamsCallContext

	// Set_listParamsCall sets the _listParamsCall rule contexts.
	Set_listParamsCall(IListParamsCallContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsCallFunctionContext differentiates from other interfaces.
	IsCallFunctionContext()
}

type CallFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	instr           interfaces.Instruction
	p               interfaces.Expresion
	_ID             antlr.Token
	_listParamsCall IListParamsCallContext
}

func NewEmptyCallFunctionContext() *CallFunctionContext {
	var p = new(CallFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_callFunction
	return p
}

func (*CallFunctionContext) IsCallFunctionContext() {}

func NewCallFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallFunctionContext {
	var p = new(CallFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_callFunction

	return p
}

func (s *CallFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CallFunctionContext) Get_ID() antlr.Token { return s._ID }

func (s *CallFunctionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *CallFunctionContext) Get_listParamsCall() IListParamsCallContext { return s._listParamsCall }

func (s *CallFunctionContext) Set_listParamsCall(v IListParamsCallContext) { s._listParamsCall = v }

func (s *CallFunctionContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *CallFunctionContext) GetP() interfaces.Expresion { return s.p }

func (s *CallFunctionContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *CallFunctionContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *CallFunctionContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *CallFunctionContext) PARIZQ() antlr.TerminalNode {
	return s.GetToken(RustParPARIZQ, 0)
}

func (s *CallFunctionContext) PARDER() antlr.TerminalNode {
	return s.GetToken(RustParPARDER, 0)
}

func (s *CallFunctionContext) ListParamsCall() IListParamsCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListParamsCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListParamsCallContext)
}

func (s *CallFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterCallFunction(s)
	}
}

func (s *CallFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitCallFunction(s)
	}
}

func (p *RustPar) CallFunction() (localctx ICallFunctionContext) {
	this := p
	_ = this

	localctx = NewCallFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, RustParRULE_callFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(386)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(376)

			var _m = p.Match(RustParID)

			localctx.(*CallFunctionContext)._ID = _m
		}
		{
			p.SetState(377)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(378)
			p.Match(RustParPARDER)
		}

		localctx.(*CallFunctionContext).instr = instructionExpre.NewCallFunction((func() string {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetText()
			}
		}()), arrayList.New(), (func() int {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetColumn()
			}
		}()))
		localctx.(*CallFunctionContext).p = instructionExpre.NewCallFunction((func() string {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetText()
			}
		}()), arrayList.New(), (func() int {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(380)

			var _m = p.Match(RustParID)

			localctx.(*CallFunctionContext)._ID = _m
		}
		{
			p.SetState(381)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(382)

			var _x = p.listParamsCall(0)

			localctx.(*CallFunctionContext)._listParamsCall = _x
		}
		{
			p.SetState(383)
			p.Match(RustParPARDER)
		}

		localctx.(*CallFunctionContext).instr = instructionExpre.NewCallFunction((func() string {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetText()
			}
		}()), localctx.(*CallFunctionContext).Get_listParamsCall().GetL_e(), (func() int {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetColumn()
			}
		}()))
		localctx.(*CallFunctionContext).p = instructionExpre.NewCallFunction((func() string {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetText()
			}
		}()), localctx.(*CallFunctionContext).Get_listParamsCall().GetL_e(), (func() int {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*CallFunctionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*CallFunctionContext).Get_ID().GetColumn()
			}
		}()))

	}

	return localctx
}

// IReturnFunContext is an interface to support dynamic dispatch.
type IReturnFunContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_RETURN returns the _RETURN token.
	Get_RETURN() antlr.Token

	// Set_RETURN sets the _RETURN token.
	Set_RETURN(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsReturnFunContext differentiates from other interfaces.
	IsReturnFunContext()
}

type ReturnFunContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruction
	_RETURN     antlr.Token
	_expression IExpressionContext
}

func NewEmptyReturnFunContext() *ReturnFunContext {
	var p = new(ReturnFunContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_returnFun
	return p
}

func (*ReturnFunContext) IsReturnFunContext() {}

func NewReturnFunContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnFunContext {
	var p = new(ReturnFunContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_returnFun

	return p
}

func (s *ReturnFunContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnFunContext) Get_RETURN() antlr.Token { return s._RETURN }

func (s *ReturnFunContext) Set_RETURN(v antlr.Token) { s._RETURN = v }

func (s *ReturnFunContext) Get_expression() IExpressionContext { return s._expression }

func (s *ReturnFunContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *ReturnFunContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *ReturnFunContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *ReturnFunContext) RETURN() antlr.TerminalNode {
	return s.GetToken(RustParRETURN, 0)
}

func (s *ReturnFunContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnFunContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnFunContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnFunContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterReturnFun(s)
	}
}

func (s *ReturnFunContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitReturnFun(s)
	}
}

func (p *RustPar) ReturnFun() (localctx IReturnFunContext) {
	this := p
	_ = this

	localctx = NewReturnFunContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, RustParRULE_returnFun)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(394)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(388)

			var _m = p.Match(RustParRETURN)

			localctx.(*ReturnFunContext)._RETURN = _m
		}
		localctx.(*ReturnFunContext).instr = instructionExpre.NewReturn(nil, (func() int {
			if localctx.(*ReturnFunContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*ReturnFunContext).Get_RETURN().GetLine()
			}
		}()), (func() int {
			if localctx.(*ReturnFunContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*ReturnFunContext).Get_RETURN().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(390)

			var _m = p.Match(RustParRETURN)

			localctx.(*ReturnFunContext)._RETURN = _m
		}
		{
			p.SetState(391)

			var _x = p.expression(0)

			localctx.(*ReturnFunContext)._expression = _x
		}
		localctx.(*ReturnFunContext).instr = instructionExpre.NewReturn(localctx.(*ReturnFunContext).Get_expression().GetP(), (func() int {
			if localctx.(*ReturnFunContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*ReturnFunContext).Get_RETURN().GetLine()
			}
		}()), (func() int {
			if localctx.(*ReturnFunContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*ReturnFunContext).Get_RETURN().GetColumn()
			}
		}()))

	}

	return localctx
}

// IPrintconsolaContext is an interface to support dynamic dispatch.
type IPrintconsolaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PRINT_CON returns the _PRINT_CON token.
	Get_PRINT_CON() antlr.Token

	// Set_PRINT_CON sets the _PRINT_CON token.
	Set_PRINT_CON(antlr.Token)

	// Get_listParams returns the _listParams rule contexts.
	Get_listParams() IListParamsContext

	// Set_listParams sets the _listParams rule contexts.
	Set_listParams(IListParamsContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsPrintconsolaContext differentiates from other interfaces.
	IsPrintconsolaContext()
}

type PrintconsolaContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruction
	_PRINT_CON  antlr.Token
	_listParams IListParamsContext
}

func NewEmptyPrintconsolaContext() *PrintconsolaContext {
	var p = new(PrintconsolaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_printconsola
	return p
}

func (*PrintconsolaContext) IsPrintconsolaContext() {}

func NewPrintconsolaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrintconsolaContext {
	var p = new(PrintconsolaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_printconsola

	return p
}

func (s *PrintconsolaContext) GetParser() antlr.Parser { return s.parser }

func (s *PrintconsolaContext) Get_PRINT_CON() antlr.Token { return s._PRINT_CON }

func (s *PrintconsolaContext) Set_PRINT_CON(v antlr.Token) { s._PRINT_CON = v }

func (s *PrintconsolaContext) Get_listParams() IListParamsContext { return s._listParams }

func (s *PrintconsolaContext) Set_listParams(v IListParamsContext) { s._listParams = v }

func (s *PrintconsolaContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *PrintconsolaContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *PrintconsolaContext) PRINT_CON() antlr.TerminalNode {
	return s.GetToken(RustParPRINT_CON, 0)
}

func (s *PrintconsolaContext) PARIZQ() antlr.TerminalNode {
	return s.GetToken(RustParPARIZQ, 0)
}

func (s *PrintconsolaContext) ListParams() IListParamsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListParamsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListParamsContext)
}

func (s *PrintconsolaContext) PARDER() antlr.TerminalNode {
	return s.GetToken(RustParPARDER, 0)
}

func (s *PrintconsolaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintconsolaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrintconsolaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterPrintconsola(s)
	}
}

func (s *PrintconsolaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitPrintconsola(s)
	}
}

func (p *RustPar) Printconsola() (localctx IPrintconsolaContext) {
	this := p
	_ = this

	localctx = NewPrintconsolaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, RustParRULE_printconsola)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(396)

		var _m = p.Match(RustParPRINT_CON)

		localctx.(*PrintconsolaContext)._PRINT_CON = _m
	}
	{
		p.SetState(397)
		p.Match(RustParPARIZQ)
	}
	{
		p.SetState(398)

		var _x = p.listParams(0)

		localctx.(*PrintconsolaContext)._listParams = _x
	}
	{
		p.SetState(399)
		p.Match(RustParPARDER)
	}
	localctx.(*PrintconsolaContext).instr = instruction.NewImprimir(localctx.(*PrintconsolaContext).Get_listParams().GetL_e(), (func() int {
		if localctx.(*PrintconsolaContext).Get_PRINT_CON() == nil {
			return 0
		} else {
			return localctx.(*PrintconsolaContext).Get_PRINT_CON().GetLine()
		}
	}()), localctx.(*PrintconsolaContext).Get_PRINT_CON().GetColumn())

	return localctx
}

// ILoopBContext is an interface to support dynamic dispatch.
type ILoopBContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LOOP returns the _LOOP token.
	Get_LOOP() antlr.Token

	// Set_LOOP sets the _LOOP token.
	Set_LOOP(antlr.Token)

	// Get_bloque_inst returns the _bloque_inst rule contexts.
	Get_bloque_inst() IBloque_instContext

	// Set_bloque_inst sets the _bloque_inst rule contexts.
	Set_bloque_inst(IBloque_instContext)

	// GetLop returns the lop attribute.
	GetLop() interfaces.Instruction

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetLop sets the lop attribute.
	SetLop(interfaces.Instruction)

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsLoopBContext differentiates from other interfaces.
	IsLoopBContext()
}

type LoopBContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	lop          interfaces.Instruction
	p            interfaces.Expresion
	_LOOP        antlr.Token
	_bloque_inst IBloque_instContext
}

func NewEmptyLoopBContext() *LoopBContext {
	var p = new(LoopBContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_loopB
	return p
}

func (*LoopBContext) IsLoopBContext() {}

func NewLoopBContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopBContext {
	var p = new(LoopBContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_loopB

	return p
}

func (s *LoopBContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopBContext) Get_LOOP() antlr.Token { return s._LOOP }

func (s *LoopBContext) Set_LOOP(v antlr.Token) { s._LOOP = v }

func (s *LoopBContext) Get_bloque_inst() IBloque_instContext { return s._bloque_inst }

func (s *LoopBContext) Set_bloque_inst(v IBloque_instContext) { s._bloque_inst = v }

func (s *LoopBContext) GetLop() interfaces.Instruction { return s.lop }

func (s *LoopBContext) GetP() interfaces.Expresion { return s.p }

func (s *LoopBContext) SetLop(v interfaces.Instruction) { s.lop = v }

func (s *LoopBContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *LoopBContext) LOOP() antlr.TerminalNode {
	return s.GetToken(RustParLOOP, 0)
}

func (s *LoopBContext) Bloque_inst() IBloque_instContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_instContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_instContext)
}

func (s *LoopBContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopBContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopBContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterLoopB(s)
	}
}

func (s *LoopBContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitLoopB(s)
	}
}

func (p *RustPar) LoopB() (localctx ILoopBContext) {
	this := p
	_ = this

	localctx = NewLoopBContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, RustParRULE_loopB)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(402)

		var _m = p.Match(RustParLOOP)

		localctx.(*LoopBContext)._LOOP = _m
	}
	{
		p.SetState(403)

		var _x = p.Bloque_inst()

		localctx.(*LoopBContext)._bloque_inst = _x
	}

	localctx.(*LoopBContext).lop = instructionExpre.NewLoop(localctx.(*LoopBContext).Get_bloque_inst().GetL(), (func() int {
		if localctx.(*LoopBContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*LoopBContext).Get_LOOP().GetLine()
		}
	}()), (func() int {
		if localctx.(*LoopBContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*LoopBContext).Get_LOOP().GetColumn()
		}
	}()))
	localctx.(*LoopBContext).p = instructionExpre.NewLoop(localctx.(*LoopBContext).Get_bloque_inst().GetL(), (func() int {
		if localctx.(*LoopBContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*LoopBContext).Get_LOOP().GetLine()
		}
	}()), (func() int {
		if localctx.(*LoopBContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*LoopBContext).Get_LOOP().GetColumn()
		}
	}()))

	return localctx
}

// ILWhileContext is an interface to support dynamic dispatch.
type ILWhileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_WHILE returns the _WHILE token.
	Get_WHILE() antlr.Token

	// Set_WHILE sets the _WHILE token.
	Set_WHILE(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_bloque_inst returns the _bloque_inst rule contexts.
	Get_bloque_inst() IBloque_instContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_bloque_inst sets the _bloque_inst rule contexts.
	Set_bloque_inst(IBloque_instContext)

	// GetLwh returns the lwh attribute.
	GetLwh() interfaces.Instruction

	// SetLwh sets the lwh attribute.
	SetLwh(interfaces.Instruction)

	// IsLWhileContext differentiates from other interfaces.
	IsLWhileContext()
}

type LWhileContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	lwh          interfaces.Instruction
	_WHILE       antlr.Token
	_expression  IExpressionContext
	_bloque_inst IBloque_instContext
}

func NewEmptyLWhileContext() *LWhileContext {
	var p = new(LWhileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_lWhile
	return p
}

func (*LWhileContext) IsLWhileContext() {}

func NewLWhileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LWhileContext {
	var p = new(LWhileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_lWhile

	return p
}

func (s *LWhileContext) GetParser() antlr.Parser { return s.parser }

func (s *LWhileContext) Get_WHILE() antlr.Token { return s._WHILE }

func (s *LWhileContext) Set_WHILE(v antlr.Token) { s._WHILE = v }

func (s *LWhileContext) Get_expression() IExpressionContext { return s._expression }

func (s *LWhileContext) Get_bloque_inst() IBloque_instContext { return s._bloque_inst }

func (s *LWhileContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *LWhileContext) Set_bloque_inst(v IBloque_instContext) { s._bloque_inst = v }

func (s *LWhileContext) GetLwh() interfaces.Instruction { return s.lwh }

func (s *LWhileContext) SetLwh(v interfaces.Instruction) { s.lwh = v }

func (s *LWhileContext) WHILE() antlr.TerminalNode {
	return s.GetToken(RustParWHILE, 0)
}

func (s *LWhileContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LWhileContext) Bloque_inst() IBloque_instContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_instContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_instContext)
}

func (s *LWhileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LWhileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LWhileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterLWhile(s)
	}
}

func (s *LWhileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitLWhile(s)
	}
}

func (p *RustPar) LWhile() (localctx ILWhileContext) {
	this := p
	_ = this

	localctx = NewLWhileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, RustParRULE_lWhile)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(406)

		var _m = p.Match(RustParWHILE)

		localctx.(*LWhileContext)._WHILE = _m
	}
	{
		p.SetState(407)

		var _x = p.expression(0)

		localctx.(*LWhileContext)._expression = _x
	}
	{
		p.SetState(408)

		var _x = p.Bloque_inst()

		localctx.(*LWhileContext)._bloque_inst = _x
	}
	localctx.(*LWhileContext).lwh = instruction.NewWhile(localctx.(*LWhileContext).Get_expression().GetP(), localctx.(*LWhileContext).Get_bloque_inst().GetL(), (func() int {
		if localctx.(*LWhileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*LWhileContext).Get_WHILE().GetLine()
		}
	}()), (func() int {
		if localctx.(*LWhileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*LWhileContext).Get_WHILE().GetColumn()
		}
	}()))

	return localctx
}

// ILForinContext is an interface to support dynamic dispatch.
type ILForinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_FOR returns the _FOR token.
	Get_FOR() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_FOR sets the _FOR token.
	Set_FOR(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_bloque_inst returns the _bloque_inst rule contexts.
	Get_bloque_inst() IBloque_instContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_bloque_inst sets the _bloque_inst rule contexts.
	Set_bloque_inst(IBloque_instContext)

	// GetLfor returns the lfor attribute.
	GetLfor() interfaces.Instruction

	// SetLfor sets the lfor attribute.
	SetLfor(interfaces.Instruction)

	// IsLForinContext differentiates from other interfaces.
	IsLForinContext()
}

type LForinContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	lfor         interfaces.Instruction
	_FOR         antlr.Token
	_ID          antlr.Token
	_expression  IExpressionContext
	_bloque_inst IBloque_instContext
}

func NewEmptyLForinContext() *LForinContext {
	var p = new(LForinContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_lForin
	return p
}

func (*LForinContext) IsLForinContext() {}

func NewLForinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LForinContext {
	var p = new(LForinContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_lForin

	return p
}

func (s *LForinContext) GetParser() antlr.Parser { return s.parser }

func (s *LForinContext) Get_FOR() antlr.Token { return s._FOR }

func (s *LForinContext) Get_ID() antlr.Token { return s._ID }

func (s *LForinContext) Set_FOR(v antlr.Token) { s._FOR = v }

func (s *LForinContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *LForinContext) Get_expression() IExpressionContext { return s._expression }

func (s *LForinContext) Get_bloque_inst() IBloque_instContext { return s._bloque_inst }

func (s *LForinContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *LForinContext) Set_bloque_inst(v IBloque_instContext) { s._bloque_inst = v }

func (s *LForinContext) GetLfor() interfaces.Instruction { return s.lfor }

func (s *LForinContext) SetLfor(v interfaces.Instruction) { s.lfor = v }

func (s *LForinContext) FOR() antlr.TerminalNode {
	return s.GetToken(RustParFOR, 0)
}

func (s *LForinContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *LForinContext) IN() antlr.TerminalNode {
	return s.GetToken(RustParIN, 0)
}

func (s *LForinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LForinContext) Bloque_inst() IBloque_instContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_instContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_instContext)
}

func (s *LForinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LForinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LForinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterLForin(s)
	}
}

func (s *LForinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitLForin(s)
	}
}

func (p *RustPar) LForin() (localctx ILForinContext) {
	this := p
	_ = this

	localctx = NewLForinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, RustParRULE_lForin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(411)

		var _m = p.Match(RustParFOR)

		localctx.(*LForinContext)._FOR = _m
	}
	{
		p.SetState(412)

		var _m = p.Match(RustParID)

		localctx.(*LForinContext)._ID = _m
	}
	{
		p.SetState(413)
		p.Match(RustParIN)
	}
	{
		p.SetState(414)

		var _x = p.expression(0)

		localctx.(*LForinContext)._expression = _x
	}
	{
		p.SetState(415)

		var _x = p.Bloque_inst()

		localctx.(*LForinContext)._bloque_inst = _x
	}
	localctx.(*LForinContext).lfor = instruction.NewForIn((func() string {
		if localctx.(*LForinContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*LForinContext).Get_ID().GetText()
		}
	}()), localctx.(*LForinContext).Get_expression().GetP(), localctx.(*LForinContext).Get_bloque_inst().GetL(), (func() int {
		if localctx.(*LForinContext).Get_FOR() == nil {
			return 0
		} else {
			return localctx.(*LForinContext).Get_FOR().GetLine()
		}
	}()), (func() int {
		if localctx.(*LForinContext).Get_FOR() == nil {
			return 0
		} else {
			return localctx.(*LForinContext).Get_FOR().GetColumn()
		}
	}()))

	return localctx
}

// ILBreakContext is an interface to support dynamic dispatch.
type ILBreakContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_BREAK returns the _BREAK token.
	Get_BREAK() antlr.Token

	// Set_BREAK sets the _BREAK token.
	Set_BREAK(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetBr returns the br attribute.
	GetBr() interfaces.Instruction

	// SetBr sets the br attribute.
	SetBr(interfaces.Instruction)

	// IsLBreakContext differentiates from other interfaces.
	IsLBreakContext()
}

type LBreakContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	br          interfaces.Instruction
	_BREAK      antlr.Token
	_expression IExpressionContext
}

func NewEmptyLBreakContext() *LBreakContext {
	var p = new(LBreakContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_lBreak
	return p
}

func (*LBreakContext) IsLBreakContext() {}

func NewLBreakContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LBreakContext {
	var p = new(LBreakContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_lBreak

	return p
}

func (s *LBreakContext) GetParser() antlr.Parser { return s.parser }

func (s *LBreakContext) Get_BREAK() antlr.Token { return s._BREAK }

func (s *LBreakContext) Set_BREAK(v antlr.Token) { s._BREAK = v }

func (s *LBreakContext) Get_expression() IExpressionContext { return s._expression }

func (s *LBreakContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *LBreakContext) GetBr() interfaces.Instruction { return s.br }

func (s *LBreakContext) SetBr(v interfaces.Instruction) { s.br = v }

func (s *LBreakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(RustParBREAK, 0)
}

func (s *LBreakContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LBreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LBreakContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LBreakContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterLBreak(s)
	}
}

func (s *LBreakContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitLBreak(s)
	}
}

func (p *RustPar) LBreak() (localctx ILBreakContext) {
	this := p
	_ = this

	localctx = NewLBreakContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, RustParRULE_lBreak)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(424)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(418)

			var _m = p.Match(RustParBREAK)

			localctx.(*LBreakContext)._BREAK = _m
		}
		localctx.(*LBreakContext).br = instructionExpre.NewBreak(nil, (func() int {
			if localctx.(*LBreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*LBreakContext).Get_BREAK().GetLine()
			}
		}()), (func() int {
			if localctx.(*LBreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*LBreakContext).Get_BREAK().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(420)

			var _m = p.Match(RustParBREAK)

			localctx.(*LBreakContext)._BREAK = _m
		}
		{
			p.SetState(421)

			var _x = p.expression(0)

			localctx.(*LBreakContext)._expression = _x
		}
		localctx.(*LBreakContext).br = instructionExpre.NewBreak(localctx.(*LBreakContext).Get_expression().GetP(), (func() int {
			if localctx.(*LBreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*LBreakContext).Get_BREAK().GetLine()
			}
		}()), (func() int {
			if localctx.(*LBreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*LBreakContext).Get_BREAK().GetColumn()
			}
		}()))

	}

	return localctx
}

// ILContinueContext is an interface to support dynamic dispatch.
type ILContinueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CONTINUE returns the _CONTINUE token.
	Get_CONTINUE() antlr.Token

	// Set_CONTINUE sets the _CONTINUE token.
	Set_CONTINUE(antlr.Token)

	// GetCn returns the cn attribute.
	GetCn() interfaces.Instruction

	// SetCn sets the cn attribute.
	SetCn(interfaces.Instruction)

	// IsLContinueContext differentiates from other interfaces.
	IsLContinueContext()
}

type LContinueContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	cn        interfaces.Instruction
	_CONTINUE antlr.Token
}

func NewEmptyLContinueContext() *LContinueContext {
	var p = new(LContinueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_lContinue
	return p
}

func (*LContinueContext) IsLContinueContext() {}

func NewLContinueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LContinueContext {
	var p = new(LContinueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_lContinue

	return p
}

func (s *LContinueContext) GetParser() antlr.Parser { return s.parser }

func (s *LContinueContext) Get_CONTINUE() antlr.Token { return s._CONTINUE }

func (s *LContinueContext) Set_CONTINUE(v antlr.Token) { s._CONTINUE = v }

func (s *LContinueContext) GetCn() interfaces.Instruction { return s.cn }

func (s *LContinueContext) SetCn(v interfaces.Instruction) { s.cn = v }

func (s *LContinueContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(RustParCONTINUE, 0)
}

func (s *LContinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LContinueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LContinueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterLContinue(s)
	}
}

func (s *LContinueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitLContinue(s)
	}
}

func (p *RustPar) LContinue() (localctx ILContinueContext) {
	this := p
	_ = this

	localctx = NewLContinueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, RustParRULE_lContinue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(426)

		var _m = p.Match(RustParCONTINUE)

		localctx.(*LContinueContext)._CONTINUE = _m
	}
	localctx.(*LContinueContext).cn = instructionExpre.NewContinue((func() int {
		if localctx.(*LContinueContext).Get_CONTINUE() == nil {
			return 0
		} else {
			return localctx.(*LContinueContext).Get_CONTINUE().GetLine()
		}
	}()), (func() int {
		if localctx.(*LContinueContext).Get_CONTINUE() == nil {
			return 0
		} else {
			return localctx.(*LContinueContext).Get_CONTINUE().GetColumn()
		}
	}()))

	return localctx
}

// IListParamsContext is an interface to support dynamic dispatch.
type IListParamsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetList returns the list rule contexts.
	GetList() IListParamsContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetList sets the list rule contexts.
	SetList(IListParamsContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetL_e returns the l_e attribute.
	GetL_e() *arrayList.List

	// SetL_e sets the l_e attribute.
	SetL_e(*arrayList.List)

	// IsListParamsContext differentiates from other interfaces.
	IsListParamsContext()
}

type ListParamsContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	l_e         *arrayList.List
	list        IListParamsContext
	_expression IExpressionContext
}

func NewEmptyListParamsContext() *ListParamsContext {
	var p = new(ListParamsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_listParams
	return p
}

func (*ListParamsContext) IsListParamsContext() {}

func NewListParamsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListParamsContext {
	var p = new(ListParamsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_listParams

	return p
}

func (s *ListParamsContext) GetParser() antlr.Parser { return s.parser }

func (s *ListParamsContext) GetList() IListParamsContext { return s.list }

func (s *ListParamsContext) Get_expression() IExpressionContext { return s._expression }

func (s *ListParamsContext) SetList(v IListParamsContext) { s.list = v }

func (s *ListParamsContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *ListParamsContext) GetL_e() *arrayList.List { return s.l_e }

func (s *ListParamsContext) SetL_e(v *arrayList.List) { s.l_e = v }

func (s *ListParamsContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListParamsContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *ListParamsContext) ListParams() IListParamsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListParamsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListParamsContext)
}

func (s *ListParamsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListParamsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListParamsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterListParams(s)
	}
}

func (s *ListParamsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitListParams(s)
	}
}

func (p *RustPar) ListParams() (localctx IListParamsContext) {
	return p.listParams(0)
}

func (p *RustPar) listParams(_p int) (localctx IListParamsContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewListParamsContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IListParamsContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 44
	p.EnterRecursionRule(localctx, 44, RustParRULE_listParams, _p)

	localctx.(*ListParamsContext).l_e = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(430)

		var _x = p.expression(0)

		localctx.(*ListParamsContext)._expression = _x
	}
	localctx.(*ListParamsContext).l_e.Add(localctx.(*ListParamsContext).Get_expression().GetP())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(440)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewListParamsContext(p, _parentctx, _parentState)
			localctx.(*ListParamsContext).list = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_listParams)
			p.SetState(433)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(434)
				p.Match(RustParCOMA)
			}
			{
				p.SetState(435)

				var _x = p.expression(0)

				localctx.(*ListParamsContext)._expression = _x
			}

			localctx.(*ListParamsContext).GetList().GetL_e().Add(localctx.(*ListParamsContext).Get_expression().GetP())
			localctx.(*ListParamsContext).l_e = localctx.(*ListParamsContext).GetList().GetL_e()

		}
		p.SetState(442)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext())
	}

	return localctx
}

// IListParamsCallContext is an interface to support dynamic dispatch.
type IListParamsCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetList returns the list rule contexts.
	GetList() IListParamsCallContext

	// Get_is_ref returns the _is_ref rule contexts.
	Get_is_ref() IIs_refContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetList sets the list rule contexts.
	SetList(IListParamsCallContext)

	// Set_is_ref sets the _is_ref rule contexts.
	Set_is_ref(IIs_refContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetL_e returns the l_e attribute.
	GetL_e() *arrayList.List

	// SetL_e sets the l_e attribute.
	SetL_e(*arrayList.List)

	// IsListParamsCallContext differentiates from other interfaces.
	IsListParamsCallContext()
}

type ListParamsCallContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	l_e         *arrayList.List
	list        IListParamsCallContext
	_is_ref     IIs_refContext
	_expression IExpressionContext
}

func NewEmptyListParamsCallContext() *ListParamsCallContext {
	var p = new(ListParamsCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_listParamsCall
	return p
}

func (*ListParamsCallContext) IsListParamsCallContext() {}

func NewListParamsCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListParamsCallContext {
	var p = new(ListParamsCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_listParamsCall

	return p
}

func (s *ListParamsCallContext) GetParser() antlr.Parser { return s.parser }

func (s *ListParamsCallContext) GetList() IListParamsCallContext { return s.list }

func (s *ListParamsCallContext) Get_is_ref() IIs_refContext { return s._is_ref }

func (s *ListParamsCallContext) Get_expression() IExpressionContext { return s._expression }

func (s *ListParamsCallContext) SetList(v IListParamsCallContext) { s.list = v }

func (s *ListParamsCallContext) Set_is_ref(v IIs_refContext) { s._is_ref = v }

func (s *ListParamsCallContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *ListParamsCallContext) GetL_e() *arrayList.List { return s.l_e }

func (s *ListParamsCallContext) SetL_e(v *arrayList.List) { s.l_e = v }

func (s *ListParamsCallContext) Is_ref() IIs_refContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIs_refContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIs_refContext)
}

func (s *ListParamsCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListParamsCallContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *ListParamsCallContext) ListParamsCall() IListParamsCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListParamsCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListParamsCallContext)
}

func (s *ListParamsCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListParamsCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListParamsCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterListParamsCall(s)
	}
}

func (s *ListParamsCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitListParamsCall(s)
	}
}

func (p *RustPar) ListParamsCall() (localctx IListParamsCallContext) {
	return p.listParamsCall(0)
}

func (p *RustPar) listParamsCall(_p int) (localctx IListParamsCallContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewListParamsCallContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IListParamsCallContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 46
	p.EnterRecursionRule(localctx, 46, RustParRULE_listParamsCall, _p)

	localctx.(*ListParamsCallContext).l_e = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(444)

		var _x = p.Is_ref()

		localctx.(*ListParamsCallContext)._is_ref = _x
	}
	{
		p.SetState(445)

		var _x = p.expression(0)

		localctx.(*ListParamsCallContext)._expression = _x
	}
	ref := instructionExpre.NewParameterBy(localctx.(*ListParamsCallContext).Get_expression().GetP(), localctx.(*ListParamsCallContext).Get_is_ref().GetRef())
	localctx.(*ListParamsCallContext).l_e.Add(ref)

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(456)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewListParamsCallContext(p, _parentctx, _parentState)
			localctx.(*ListParamsCallContext).list = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_listParamsCall)
			p.SetState(448)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(449)
				p.Match(RustParCOMA)
			}
			{
				p.SetState(450)

				var _x = p.Is_ref()

				localctx.(*ListParamsCallContext)._is_ref = _x
			}
			{
				p.SetState(451)

				var _x = p.expression(0)

				localctx.(*ListParamsCallContext)._expression = _x
			}

			ref := instructionExpre.NewParameterBy(localctx.(*ListParamsCallContext).Get_expression().GetP(), localctx.(*ListParamsCallContext).Get_is_ref().GetRef())
			localctx.(*ListParamsCallContext).GetList().GetL_e().Add(ref)
			localctx.(*ListParamsCallContext).l_e = localctx.(*ListParamsCallContext).GetList().GetL_e()

		}
		p.SetState(458)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())
	}

	return localctx
}

// IIs_refContext is an interface to support dynamic dispatch.
type IIs_refContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRef returns the ref attribute.
	GetRef() bool

	// SetRef sets the ref attribute.
	SetRef(bool)

	// IsIs_refContext differentiates from other interfaces.
	IsIs_refContext()
}

type Is_refContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ref    bool
}

func NewEmptyIs_refContext() *Is_refContext {
	var p = new(Is_refContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_is_ref
	return p
}

func (*Is_refContext) IsIs_refContext() {}

func NewIs_refContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Is_refContext {
	var p = new(Is_refContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_is_ref

	return p
}

func (s *Is_refContext) GetParser() antlr.Parser { return s.parser }

func (s *Is_refContext) GetRef() bool { return s.ref }

func (s *Is_refContext) SetRef(v bool) { s.ref = v }

func (s *Is_refContext) AMP() antlr.TerminalNode {
	return s.GetToken(RustParAMP, 0)
}

func (s *Is_refContext) MUT() antlr.TerminalNode {
	return s.GetToken(RustParMUT, 0)
}

func (s *Is_refContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Is_refContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Is_refContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterIs_ref(s)
	}
}

func (s *Is_refContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitIs_ref(s)
	}
}

func (p *RustPar) Is_ref() (localctx IIs_refContext) {
	this := p
	_ = this

	localctx = NewIs_refContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, RustParRULE_is_ref)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(463)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(459)
			p.Match(RustParAMP)
		}
		{
			p.SetState(460)
			p.Match(RustParMUT)
		}
		localctx.(*Is_refContext).ref = true

	case 2:
		p.EnterOuterAlt(localctx, 2)
		localctx.(*Is_refContext).ref = false

	}

	return localctx
}

// IDeclaracionContext is an interface to support dynamic dispatch.
type IDeclaracionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// GetAsig returns the asig token.
	GetAsig() antlr.Token

	// Get_VECN returns the _VECN token.
	Get_VECN() antlr.Token

	// GetIdob returns the idob token.
	GetIdob() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// SetAsig sets the asig token.
	SetAsig(antlr.Token)

	// Set_VECN sets the _VECN token.
	Set_VECN(antlr.Token)

	// SetIdob sets the idob token.
	SetIdob(antlr.Token)

	// GetIsMut returns the isMut rule contexts.
	GetIsMut() IIs_mutContext

	// Get_tipos_var returns the _tipos_var rule contexts.
	Get_tipos_var() ITipos_varContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_array_type returns the _array_type rule contexts.
	Get_array_type() IArray_typeContext

	// SetIsMut sets the isMut rule contexts.
	SetIsMut(IIs_mutContext)

	// Set_tipos_var sets the _tipos_var rule contexts.
	Set_tipos_var(ITipos_varContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_array_type sets the _array_type rule contexts.
	Set_array_type(IArray_typeContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsDeclaracionContext differentiates from other interfaces.
	IsDeclaracionContext()
}

type DeclaracionContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruction
	isMut       IIs_mutContext
	id          antlr.Token
	_tipos_var  ITipos_varContext
	asig        antlr.Token
	_expression IExpressionContext
	_array_type IArray_typeContext
	_VECN       antlr.Token
	idob        antlr.Token
}

func NewEmptyDeclaracionContext() *DeclaracionContext {
	var p = new(DeclaracionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_declaracion
	return p
}

func (*DeclaracionContext) IsDeclaracionContext() {}

func NewDeclaracionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaracionContext {
	var p = new(DeclaracionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_declaracion

	return p
}

func (s *DeclaracionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaracionContext) GetId() antlr.Token { return s.id }

func (s *DeclaracionContext) GetAsig() antlr.Token { return s.asig }

func (s *DeclaracionContext) Get_VECN() antlr.Token { return s._VECN }

func (s *DeclaracionContext) GetIdob() antlr.Token { return s.idob }

func (s *DeclaracionContext) SetId(v antlr.Token) { s.id = v }

func (s *DeclaracionContext) SetAsig(v antlr.Token) { s.asig = v }

func (s *DeclaracionContext) Set_VECN(v antlr.Token) { s._VECN = v }

func (s *DeclaracionContext) SetIdob(v antlr.Token) { s.idob = v }

func (s *DeclaracionContext) GetIsMut() IIs_mutContext { return s.isMut }

func (s *DeclaracionContext) Get_tipos_var() ITipos_varContext { return s._tipos_var }

func (s *DeclaracionContext) Get_expression() IExpressionContext { return s._expression }

func (s *DeclaracionContext) Get_array_type() IArray_typeContext { return s._array_type }

func (s *DeclaracionContext) SetIsMut(v IIs_mutContext) { s.isMut = v }

func (s *DeclaracionContext) Set_tipos_var(v ITipos_varContext) { s._tipos_var = v }

func (s *DeclaracionContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *DeclaracionContext) Set_array_type(v IArray_typeContext) { s._array_type = v }

func (s *DeclaracionContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *DeclaracionContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *DeclaracionContext) LET() antlr.TerminalNode {
	return s.GetToken(RustParLET, 0)
}

func (s *DeclaracionContext) DPUNTO2() antlr.TerminalNode {
	return s.GetToken(RustParDPUNTO2, 0)
}

func (s *DeclaracionContext) Tipos_var() ITipos_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_varContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_varContext)
}

func (s *DeclaracionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeclaracionContext) Is_mut() IIs_mutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIs_mutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIs_mutContext)
}

func (s *DeclaracionContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(RustParID)
}

func (s *DeclaracionContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(RustParID, i)
}

func (s *DeclaracionContext) ASIGNACION() antlr.TerminalNode {
	return s.GetToken(RustParASIGNACION, 0)
}

func (s *DeclaracionContext) Array_type() IArray_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *DeclaracionContext) AllVECN() []antlr.TerminalNode {
	return s.GetTokens(RustParVECN)
}

func (s *DeclaracionContext) VECN(i int) antlr.TerminalNode {
	return s.GetToken(RustParVECN, i)
}

func (s *DeclaracionContext) MENOR() antlr.TerminalNode {
	return s.GetToken(RustParMENOR, 0)
}

func (s *DeclaracionContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(RustParMAYOR, 0)
}

func (s *DeclaracionContext) DOSPUNTO() antlr.TerminalNode {
	return s.GetToken(RustParDOSPUNTO, 0)
}

func (s *DeclaracionContext) NEW() antlr.TerminalNode {
	return s.GetToken(RustParNEW, 0)
}

func (s *DeclaracionContext) CAPACITY() antlr.TerminalNode {
	return s.GetToken(RustParCAPACITY, 0)
}

func (s *DeclaracionContext) PARIZQ() antlr.TerminalNode {
	return s.GetToken(RustParPARIZQ, 0)
}

func (s *DeclaracionContext) PARDER() antlr.TerminalNode {
	return s.GetToken(RustParPARDER, 0)
}

func (s *DeclaracionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaracionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclaracionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterDeclaracion(s)
	}
}

func (s *DeclaracionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitDeclaracion(s)
	}
}

func (p *RustPar) Declaracion() (localctx IDeclaracionContext) {
	this := p
	_ = this

	localctx = NewDeclaracionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, RustParRULE_declaracion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(465)
			p.Match(RustParLET)
		}
		{
			p.SetState(466)

			var _x = p.Is_mut()

			localctx.(*DeclaracionContext).isMut = _x
		}
		{
			p.SetState(467)

			var _m = p.Match(RustParID)

			localctx.(*DeclaracionContext).id = _m
		}
		{
			p.SetState(468)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(469)

			var _x = p.Tipos_var()

			localctx.(*DeclaracionContext)._tipos_var = _x
		}
		{
			p.SetState(470)

			var _m = p.Match(RustParASIGNACION)

			localctx.(*DeclaracionContext).asig = _m
		}
		{
			p.SetState(471)

			var _x = p.expression(0)

			localctx.(*DeclaracionContext)._expression = _x
		}

		localctx.(*DeclaracionContext).instr = instruction.NewDeclaration((func() string {
			if localctx.(*DeclaracionContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetId().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipos_var().GetTipo(), localctx.(*DeclaracionContext).Get_expression().GetP(), localctx.(*DeclaracionContext).GetIsMut().GetMut(), (func() int {
			if localctx.(*DeclaracionContext).GetAsig() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).GetAsig().GetLine()
			}
		}()), localctx.(*DeclaracionContext).GetAsig().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(474)
			p.Match(RustParLET)
		}
		{
			p.SetState(475)

			var _x = p.Is_mut()

			localctx.(*DeclaracionContext).isMut = _x
		}
		{
			p.SetState(476)

			var _m = p.Match(RustParID)

			localctx.(*DeclaracionContext).id = _m
		}
		{
			p.SetState(477)

			var _m = p.Match(RustParASIGNACION)

			localctx.(*DeclaracionContext).asig = _m
		}
		{
			p.SetState(478)

			var _x = p.expression(0)

			localctx.(*DeclaracionContext)._expression = _x
		}

		localctx.(*DeclaracionContext).instr = instruction.NewDeclaration((func() string {
			if localctx.(*DeclaracionContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetId().GetText()
			}
		}()), interfaces.NULL, localctx.(*DeclaracionContext).Get_expression().GetP(), localctx.(*DeclaracionContext).GetIsMut().GetMut(), (func() int {
			if localctx.(*DeclaracionContext).GetAsig() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).GetAsig().GetLine()
			}
		}()), localctx.(*DeclaracionContext).GetAsig().GetColumn())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(481)
			p.Match(RustParLET)
		}
		{
			p.SetState(482)

			var _x = p.Is_mut()

			localctx.(*DeclaracionContext).isMut = _x
		}
		{
			p.SetState(483)

			var _m = p.Match(RustParID)

			localctx.(*DeclaracionContext).id = _m
		}
		{
			p.SetState(484)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(485)

			var _x = p.Array_type()

			localctx.(*DeclaracionContext)._array_type = _x
		}
		{
			p.SetState(486)

			var _m = p.Match(RustParASIGNACION)

			localctx.(*DeclaracionContext).asig = _m
		}
		{
			p.SetState(487)

			var _x = p.expression(0)

			localctx.(*DeclaracionContext)._expression = _x
		}

		localctx.(*DeclaracionContext).instr = instruction.NewArrayDeclaration((func() string {
			if localctx.(*DeclaracionContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetId().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_array_type().GetTy(), localctx.(*DeclaracionContext).Get_expression().GetP(), localctx.(*DeclaracionContext).GetIsMut().GetMut(), (func() int {
			if localctx.(*DeclaracionContext).GetAsig() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).GetAsig().GetLine()
			}
		}()), localctx.(*DeclaracionContext).GetAsig().GetColumn())

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(490)
			p.Match(RustParLET)
		}
		{
			p.SetState(491)

			var _x = p.Is_mut()

			localctx.(*DeclaracionContext).isMut = _x
		}
		{
			p.SetState(492)

			var _m = p.Match(RustParID)

			localctx.(*DeclaracionContext).id = _m
		}
		{
			p.SetState(493)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(494)

			var _m = p.Match(RustParVECN)

			localctx.(*DeclaracionContext)._VECN = _m
		}
		{
			p.SetState(495)
			p.Match(RustParMENOR)
		}
		{
			p.SetState(496)

			var _x = p.Tipos_var()

			localctx.(*DeclaracionContext)._tipos_var = _x
		}
		{
			p.SetState(497)
			p.Match(RustParMAYOR)
		}
		{
			p.SetState(498)
			p.Match(RustParASIGNACION)
		}
		{
			p.SetState(499)

			var _m = p.Match(RustParVECN)

			localctx.(*DeclaracionContext)._VECN = _m
		}
		{
			p.SetState(500)
			p.Match(RustParDOSPUNTO)
		}
		{
			p.SetState(501)
			p.Match(RustParNEW)
		}

		localctx.(*DeclaracionContext).instr = instruction.NewVectorDeclaration((func() string {
			if localctx.(*DeclaracionContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetId().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipos_var().GetTipo(), nil, localctx.(*DeclaracionContext).GetIsMut().GetMut(), (func() int {
			if localctx.(*DeclaracionContext).Get_VECN() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_VECN().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeclaracionContext).Get_VECN() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_VECN().GetColumn()
			}
		}()), nil, "")

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(504)
			p.Match(RustParLET)
		}
		{
			p.SetState(505)

			var _x = p.Is_mut()

			localctx.(*DeclaracionContext).isMut = _x
		}
		{
			p.SetState(506)

			var _m = p.Match(RustParID)

			localctx.(*DeclaracionContext).id = _m
		}
		{
			p.SetState(507)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(508)

			var _m = p.Match(RustParVECN)

			localctx.(*DeclaracionContext)._VECN = _m
		}
		{
			p.SetState(509)
			p.Match(RustParMENOR)
		}
		{
			p.SetState(510)

			var _m = p.Match(RustParID)

			localctx.(*DeclaracionContext).idob = _m
		}
		{
			p.SetState(511)
			p.Match(RustParMAYOR)
		}
		{
			p.SetState(512)
			p.Match(RustParASIGNACION)
		}
		{
			p.SetState(513)

			var _m = p.Match(RustParVECN)

			localctx.(*DeclaracionContext)._VECN = _m
		}
		{
			p.SetState(514)
			p.Match(RustParDOSPUNTO)
		}
		{
			p.SetState(515)
			p.Match(RustParNEW)
		}

		localctx.(*DeclaracionContext).instr = instruction.NewVectorDeclaration((func() string {
			if localctx.(*DeclaracionContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetId().GetText()
			}
		}()), interfaces.NULL, nil, localctx.(*DeclaracionContext).GetIsMut().GetMut(), (func() int {
			if localctx.(*DeclaracionContext).Get_VECN() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_VECN().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeclaracionContext).Get_VECN() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_VECN().GetColumn()
			}
		}()), nil, (func() string {
			if localctx.(*DeclaracionContext).GetIdob() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetIdob().GetText()
			}
		}()))

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(518)
			p.Match(RustParLET)
		}
		{
			p.SetState(519)

			var _x = p.Is_mut()

			localctx.(*DeclaracionContext).isMut = _x
		}
		{
			p.SetState(520)

			var _m = p.Match(RustParID)

			localctx.(*DeclaracionContext).id = _m
		}
		{
			p.SetState(521)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(522)

			var _m = p.Match(RustParVECN)

			localctx.(*DeclaracionContext)._VECN = _m
		}
		{
			p.SetState(523)
			p.Match(RustParMENOR)
		}
		{
			p.SetState(524)

			var _x = p.Tipos_var()

			localctx.(*DeclaracionContext)._tipos_var = _x
		}
		{
			p.SetState(525)
			p.Match(RustParMAYOR)
		}
		{
			p.SetState(526)
			p.Match(RustParASIGNACION)
		}
		{
			p.SetState(527)

			var _m = p.Match(RustParVECN)

			localctx.(*DeclaracionContext)._VECN = _m
		}
		{
			p.SetState(528)
			p.Match(RustParDOSPUNTO)
		}
		{
			p.SetState(529)
			p.Match(RustParCAPACITY)
		}
		{
			p.SetState(530)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(531)

			var _x = p.expression(0)

			localctx.(*DeclaracionContext)._expression = _x
		}
		{
			p.SetState(532)
			p.Match(RustParPARDER)
		}

		localctx.(*DeclaracionContext).instr = instruction.NewVectorDeclaration((func() string {
			if localctx.(*DeclaracionContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetId().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipos_var().GetTipo(), localctx.(*DeclaracionContext).Get_expression().GetP(), localctx.(*DeclaracionContext).GetIsMut().GetMut(), (func() int {
			if localctx.(*DeclaracionContext).Get_VECN() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_VECN().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeclaracionContext).Get_VECN() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_VECN().GetColumn()
			}
		}()), nil, "")

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(535)
			p.Match(RustParLET)
		}
		{
			p.SetState(536)

			var _x = p.Is_mut()

			localctx.(*DeclaracionContext).isMut = _x
		}
		{
			p.SetState(537)

			var _m = p.Match(RustParID)

			localctx.(*DeclaracionContext).id = _m
		}
		{
			p.SetState(538)
			p.Match(RustParDPUNTO2)
		}
		{
			p.SetState(539)

			var _m = p.Match(RustParVECN)

			localctx.(*DeclaracionContext)._VECN = _m
		}
		{
			p.SetState(540)
			p.Match(RustParMENOR)
		}
		{
			p.SetState(541)

			var _m = p.Match(RustParID)

			localctx.(*DeclaracionContext).idob = _m
		}
		{
			p.SetState(542)
			p.Match(RustParMAYOR)
		}
		{
			p.SetState(543)
			p.Match(RustParASIGNACION)
		}
		{
			p.SetState(544)

			var _m = p.Match(RustParVECN)

			localctx.(*DeclaracionContext)._VECN = _m
		}
		{
			p.SetState(545)
			p.Match(RustParDOSPUNTO)
		}
		{
			p.SetState(546)
			p.Match(RustParCAPACITY)
		}
		{
			p.SetState(547)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(548)

			var _x = p.expression(0)

			localctx.(*DeclaracionContext)._expression = _x
		}
		{
			p.SetState(549)
			p.Match(RustParPARDER)
		}

		localctx.(*DeclaracionContext).instr = instruction.NewVectorDeclaration((func() string {
			if localctx.(*DeclaracionContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetId().GetText()
			}
		}()), interfaces.NULL, localctx.(*DeclaracionContext).Get_expression().GetP(), localctx.(*DeclaracionContext).GetIsMut().GetMut(), (func() int {
			if localctx.(*DeclaracionContext).Get_VECN() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_VECN().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeclaracionContext).Get_VECN() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_VECN().GetColumn()
			}
		}()), nil, (func() string {
			if localctx.(*DeclaracionContext).GetIdob() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetIdob().GetText()
			}
		}()))

	}

	return localctx
}

// IIs_mutContext is an interface to support dynamic dispatch.
type IIs_mutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMut returns the mut attribute.
	GetMut() bool

	// SetMut sets the mut attribute.
	SetMut(bool)

	// IsIs_mutContext differentiates from other interfaces.
	IsIs_mutContext()
}

type Is_mutContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	mut    bool
}

func NewEmptyIs_mutContext() *Is_mutContext {
	var p = new(Is_mutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_is_mut
	return p
}

func (*Is_mutContext) IsIs_mutContext() {}

func NewIs_mutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Is_mutContext {
	var p = new(Is_mutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_is_mut

	return p
}

func (s *Is_mutContext) GetParser() antlr.Parser { return s.parser }

func (s *Is_mutContext) GetMut() bool { return s.mut }

func (s *Is_mutContext) SetMut(v bool) { s.mut = v }

func (s *Is_mutContext) MUT() antlr.TerminalNode {
	return s.GetToken(RustParMUT, 0)
}

func (s *Is_mutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Is_mutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Is_mutContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterIs_mut(s)
	}
}

func (s *Is_mutContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitIs_mut(s)
	}
}

func (p *RustPar) Is_mut() (localctx IIs_mutContext) {
	this := p
	_ = this

	localctx = NewIs_mutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, RustParRULE_is_mut)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(557)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case RustParMUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(554)
			p.Match(RustParMUT)
		}
		localctx.(*Is_mutContext).mut = true

	case RustParID:
		p.EnterOuterAlt(localctx, 2)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArray_typeContext is an interface to support dynamic dispatch.
type IArray_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CORIZQ returns the _CORIZQ token.
	Get_CORIZQ() antlr.Token

	// Set_CORIZQ sets the _CORIZQ token.
	Set_CORIZQ(antlr.Token)

	// Get_array_type returns the _array_type rule contexts.
	Get_array_type() IArray_typeContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_tipos_var returns the _tipos_var rule contexts.
	Get_tipos_var() ITipos_varContext

	// Set_array_type sets the _array_type rule contexts.
	Set_array_type(IArray_typeContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_tipos_var sets the _tipos_var rule contexts.
	Set_tipos_var(ITipos_varContext)

	// GetTy returns the ty attribute.
	GetTy() *arrayList.List

	// SetTy sets the ty attribute.
	SetTy(*arrayList.List)

	// IsArray_typeContext differentiates from other interfaces.
	IsArray_typeContext()
}

type Array_typeContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	ty          *arrayList.List
	_CORIZQ     antlr.Token
	_array_type IArray_typeContext
	_expression IExpressionContext
	_tipos_var  ITipos_varContext
}

func NewEmptyArray_typeContext() *Array_typeContext {
	var p = new(Array_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_array_type
	return p
}

func (*Array_typeContext) IsArray_typeContext() {}

func NewArray_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_typeContext {
	var p = new(Array_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_array_type

	return p
}

func (s *Array_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_typeContext) Get_CORIZQ() antlr.Token { return s._CORIZQ }

func (s *Array_typeContext) Set_CORIZQ(v antlr.Token) { s._CORIZQ = v }

func (s *Array_typeContext) Get_array_type() IArray_typeContext { return s._array_type }

func (s *Array_typeContext) Get_expression() IExpressionContext { return s._expression }

func (s *Array_typeContext) Get_tipos_var() ITipos_varContext { return s._tipos_var }

func (s *Array_typeContext) Set_array_type(v IArray_typeContext) { s._array_type = v }

func (s *Array_typeContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Array_typeContext) Set_tipos_var(v ITipos_varContext) { s._tipos_var = v }

func (s *Array_typeContext) GetTy() *arrayList.List { return s.ty }

func (s *Array_typeContext) SetTy(v *arrayList.List) { s.ty = v }

func (s *Array_typeContext) CORIZQ() antlr.TerminalNode {
	return s.GetToken(RustParCORIZQ, 0)
}

func (s *Array_typeContext) Array_type() IArray_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Array_typeContext) PTCOMA() antlr.TerminalNode {
	return s.GetToken(RustParPTCOMA, 0)
}

func (s *Array_typeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Array_typeContext) CORDER() antlr.TerminalNode {
	return s.GetToken(RustParCORDER, 0)
}

func (s *Array_typeContext) Tipos_var() ITipos_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_varContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_varContext)
}

func (s *Array_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterArray_type(s)
	}
}

func (s *Array_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitArray_type(s)
	}
}

func (p *RustPar) Array_type() (localctx IArray_typeContext) {
	this := p
	_ = this

	localctx = NewArray_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, RustParRULE_array_type)

	localctx.(*Array_typeContext).ty = arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(573)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(559)

			var _m = p.Match(RustParCORIZQ)

			localctx.(*Array_typeContext)._CORIZQ = _m
		}
		{
			p.SetState(560)

			var _x = p.Array_type()

			localctx.(*Array_typeContext)._array_type = _x
		}
		{
			p.SetState(561)
			p.Match(RustParPTCOMA)
		}
		{
			p.SetState(562)

			var _x = p.expression(0)

			localctx.(*Array_typeContext)._expression = _x
		}
		{
			p.SetState(563)
			p.Match(RustParCORDER)
		}

		nType := interfaces.NewArrayType(interfaces.ARRAY, localctx.(*Array_typeContext).Get_expression().GetP(), (func() int {
			if localctx.(*Array_typeContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Array_typeContext).Get_CORIZQ().GetLine()
			}
		}()), (func() int {
			if localctx.(*Array_typeContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Array_typeContext).Get_CORIZQ().GetColumn()
			}
		}()))
		localctx.(*Array_typeContext).Get_array_type().GetTy().Add(nType)
		localctx.(*Array_typeContext).ty = localctx.(*Array_typeContext).Get_array_type().GetTy()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(566)

			var _m = p.Match(RustParCORIZQ)

			localctx.(*Array_typeContext)._CORIZQ = _m
		}
		{
			p.SetState(567)

			var _x = p.Tipos_var()

			localctx.(*Array_typeContext)._tipos_var = _x
		}
		{
			p.SetState(568)
			p.Match(RustParPTCOMA)
		}
		{
			p.SetState(569)

			var _x = p.expression(0)

			localctx.(*Array_typeContext)._expression = _x
		}
		{
			p.SetState(570)
			p.Match(RustParCORDER)
		}

		nType := interfaces.NewArrayType(localctx.(*Array_typeContext).Get_tipos_var().GetTipo(), localctx.(*Array_typeContext).Get_expression().GetP(), (func() int {
			if localctx.(*Array_typeContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Array_typeContext).Get_CORIZQ().GetLine()
			}
		}()), (func() int {
			if localctx.(*Array_typeContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Array_typeContext).Get_CORIZQ().GetColumn()
			}
		}()))
		localctx.(*Array_typeContext).ty.Add(nType)

	}

	return localctx
}

// IAsignacionContext is an interface to support dynamic dispatch.
type IAsignacionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_list_index returns the _list_index rule contexts.
	Get_list_index() IList_indexContext

	// Get_l_AccessStruct returns the _l_AccessStruct rule contexts.
	Get_l_AccessStruct() IL_AccessStructContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_list_index sets the _list_index rule contexts.
	Set_list_index(IList_indexContext)

	// Set_l_AccessStruct sets the _l_AccessStruct rule contexts.
	Set_l_AccessStruct(IL_AccessStructContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsAsignacionContext differentiates from other interfaces.
	IsAsignacionContext()
}

type AsignacionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	instr           interfaces.Instruction
	id              antlr.Token
	_expression     IExpressionContext
	_list_index     IList_indexContext
	_l_AccessStruct IL_AccessStructContext
}

func NewEmptyAsignacionContext() *AsignacionContext {
	var p = new(AsignacionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_asignacion
	return p
}

func (*AsignacionContext) IsAsignacionContext() {}

func NewAsignacionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsignacionContext {
	var p = new(AsignacionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_asignacion

	return p
}

func (s *AsignacionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsignacionContext) GetId() antlr.Token { return s.id }

func (s *AsignacionContext) SetId(v antlr.Token) { s.id = v }

func (s *AsignacionContext) Get_expression() IExpressionContext { return s._expression }

func (s *AsignacionContext) Get_list_index() IList_indexContext { return s._list_index }

func (s *AsignacionContext) Get_l_AccessStruct() IL_AccessStructContext { return s._l_AccessStruct }

func (s *AsignacionContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *AsignacionContext) Set_list_index(v IList_indexContext) { s._list_index = v }

func (s *AsignacionContext) Set_l_AccessStruct(v IL_AccessStructContext) { s._l_AccessStruct = v }

func (s *AsignacionContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *AsignacionContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *AsignacionContext) ASIGNACION() antlr.TerminalNode {
	return s.GetToken(RustParASIGNACION, 0)
}

func (s *AsignacionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AsignacionContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *AsignacionContext) List_index() IList_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_indexContext)
}

func (s *AsignacionContext) L_AccessStruct() IL_AccessStructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_AccessStructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_AccessStructContext)
}

func (s *AsignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsignacionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsignacionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterAsignacion(s)
	}
}

func (s *AsignacionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitAsignacion(s)
	}
}

func (p *RustPar) Asignacion() (localctx IAsignacionContext) {
	this := p
	_ = this

	localctx = NewAsignacionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, RustParRULE_asignacion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(591)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(575)

			var _m = p.Match(RustParID)

			localctx.(*AsignacionContext).id = _m
		}
		{
			p.SetState(576)
			p.Match(RustParASIGNACION)
		}
		{
			p.SetState(577)

			var _x = p.expression(0)

			localctx.(*AsignacionContext)._expression = _x
		}
		localctx.(*AsignacionContext).instr = instruction.NewAssignment((func() string {
			if localctx.(*AsignacionContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).GetId().GetText()
			}
		}()), localctx.(*AsignacionContext).Get_expression().GetP(), nil, (func() int {
			if localctx.(*AsignacionContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).GetId().GetLine()
			}
		}()), localctx.(*AsignacionContext).GetId().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(580)

			var _m = p.Match(RustParID)

			localctx.(*AsignacionContext).id = _m
		}
		{
			p.SetState(581)

			var _x = p.list_index(0)

			localctx.(*AsignacionContext)._list_index = _x
		}
		{
			p.SetState(582)
			p.Match(RustParASIGNACION)
		}
		{
			p.SetState(583)

			var _x = p.expression(0)

			localctx.(*AsignacionContext)._expression = _x
		}
		localctx.(*AsignacionContext).instr = instruction.NewAssignment((func() string {
			if localctx.(*AsignacionContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).GetId().GetText()
			}
		}()), localctx.(*AsignacionContext).Get_expression().GetP(), localctx.(*AsignacionContext).Get_list_index().GetLista(), (func() int {
			if localctx.(*AsignacionContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).GetId().GetLine()
			}
		}()), localctx.(*AsignacionContext).GetId().GetColumn())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(586)

			var _x = p.l_AccessStruct(0)

			localctx.(*AsignacionContext)._l_AccessStruct = _x
		}
		{
			p.SetState(587)
			p.Match(RustParASIGNACION)
		}
		{
			p.SetState(588)

			var _x = p.expression(0)

			localctx.(*AsignacionContext)._expression = _x
		}
		localctx.(*AsignacionContext).instr = instruction.NewAssignmentStruct(localctx.(*AsignacionContext).Get_l_AccessStruct().GetL(), localctx.(*AsignacionContext).Get_expression().GetP(), (func() antlr.Token {
			if localctx.(*AsignacionContext).Get_l_AccessStruct() == nil {
				return nil
			} else {
				return localctx.(*AsignacionContext).Get_l_AccessStruct().GetStart()
			}
		}()).GetLine(), (func() antlr.Token {
			if localctx.(*AsignacionContext).Get_l_AccessStruct() == nil {
				return nil
			} else {
				return localctx.(*AsignacionContext).Get_l_AccessStruct().GetStart()
			}
		}()).GetColumn())

	}

	return localctx
}

// IL_AccessStructContext is an interface to support dynamic dispatch.
type IL_AccessStructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetList returns the list rule contexts.
	GetList() IL_AccessStructContext

	// SetList sets the list rule contexts.
	SetList(IL_AccessStructContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsL_AccessStructContext differentiates from other interfaces.
	IsL_AccessStructContext()
}

type L_AccessStructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	l      *arrayList.List
	list   IL_AccessStructContext
	_ID    antlr.Token
}

func NewEmptyL_AccessStructContext() *L_AccessStructContext {
	var p = new(L_AccessStructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_l_AccessStruct
	return p
}

func (*L_AccessStructContext) IsL_AccessStructContext() {}

func NewL_AccessStructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *L_AccessStructContext {
	var p = new(L_AccessStructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_l_AccessStruct

	return p
}

func (s *L_AccessStructContext) GetParser() antlr.Parser { return s.parser }

func (s *L_AccessStructContext) Get_ID() antlr.Token { return s._ID }

func (s *L_AccessStructContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *L_AccessStructContext) GetList() IL_AccessStructContext { return s.list }

func (s *L_AccessStructContext) SetList(v IL_AccessStructContext) { s.list = v }

func (s *L_AccessStructContext) GetL() *arrayList.List { return s.l }

func (s *L_AccessStructContext) SetL(v *arrayList.List) { s.l = v }

func (s *L_AccessStructContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *L_AccessStructContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(RustParPUNTO, 0)
}

func (s *L_AccessStructContext) L_AccessStruct() IL_AccessStructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_AccessStructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_AccessStructContext)
}

func (s *L_AccessStructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *L_AccessStructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *L_AccessStructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterL_AccessStruct(s)
	}
}

func (s *L_AccessStructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitL_AccessStruct(s)
	}
}

func (p *RustPar) L_AccessStruct() (localctx IL_AccessStructContext) {
	return p.l_AccessStruct(0)
}

func (p *RustPar) l_AccessStruct(_p int) (localctx IL_AccessStructContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewL_AccessStructContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IL_AccessStructContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 58
	p.EnterRecursionRule(localctx, 58, RustParRULE_l_AccessStruct, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(594)

		var _m = p.Match(RustParID)

		localctx.(*L_AccessStructContext)._ID = _m
	}

	localctx.(*L_AccessStructContext).l = arrayList.New()
	localctx.(*L_AccessStructContext).l.Add((func() string {
		if localctx.(*L_AccessStructContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*L_AccessStructContext).Get_ID().GetText()
		}
	}()))

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(603)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewL_AccessStructContext(p, _parentctx, _parentState)
			localctx.(*L_AccessStructContext).list = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_l_AccessStruct)
			p.SetState(597)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(598)
				p.Match(RustParPUNTO)
			}
			{
				p.SetState(599)

				var _m = p.Match(RustParID)

				localctx.(*L_AccessStructContext)._ID = _m
			}

			localctx.(*L_AccessStructContext).GetList().GetL().Add((func() string {
				if localctx.(*L_AccessStructContext).Get_ID() == nil {
					return ""
				} else {
					return localctx.(*L_AccessStructContext).Get_ID().GetText()
				}
			}()))
			localctx.(*L_AccessStructContext).l = localctx.(*L_AccessStructContext).GetList().GetL()

		}
		p.SetState(605)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())
	}

	return localctx
}

// IList_indexContext is an interface to support dynamic dispatch.
type IList_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetListi returns the listi rule contexts.
	GetListi() IList_indexContext

	// Get_index_array returns the _index_array rule contexts.
	Get_index_array() IIndex_arrayContext

	// SetListi sets the listi rule contexts.
	SetListi(IList_indexContext)

	// Set_index_array sets the _index_array rule contexts.
	Set_index_array(IIndex_arrayContext)

	// GetLista returns the lista attribute.
	GetLista() *arrayList.List

	// SetLista sets the lista attribute.
	SetLista(*arrayList.List)

	// IsList_indexContext differentiates from other interfaces.
	IsList_indexContext()
}

type List_indexContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	lista        *arrayList.List
	listi        IList_indexContext
	_index_array IIndex_arrayContext
}

func NewEmptyList_indexContext() *List_indexContext {
	var p = new(List_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_list_index
	return p
}

func (*List_indexContext) IsList_indexContext() {}

func NewList_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_indexContext {
	var p = new(List_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_list_index

	return p
}

func (s *List_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *List_indexContext) GetListi() IList_indexContext { return s.listi }

func (s *List_indexContext) Get_index_array() IIndex_arrayContext { return s._index_array }

func (s *List_indexContext) SetListi(v IList_indexContext) { s.listi = v }

func (s *List_indexContext) Set_index_array(v IIndex_arrayContext) { s._index_array = v }

func (s *List_indexContext) GetLista() *arrayList.List { return s.lista }

func (s *List_indexContext) SetLista(v *arrayList.List) { s.lista = v }

func (s *List_indexContext) Index_array() IIndex_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_arrayContext)
}

func (s *List_indexContext) List_index() IList_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_indexContext)
}

func (s *List_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterList_index(s)
	}
}

func (s *List_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitList_index(s)
	}
}

func (p *RustPar) List_index() (localctx IList_indexContext) {
	return p.list_index(0)
}

func (p *RustPar) list_index(_p int) (localctx IList_indexContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewList_indexContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IList_indexContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 60
	p.EnterRecursionRule(localctx, 60, RustParRULE_list_index, _p)

	localctx.(*List_indexContext).lista = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(607)

		var _x = p.Index_array()

		localctx.(*List_indexContext)._index_array = _x
	}
	localctx.(*List_indexContext).lista.Add(localctx.(*List_indexContext).Get_index_array().GetIndex())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(616)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewList_indexContext(p, _parentctx, _parentState)
			localctx.(*List_indexContext).listi = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_list_index)
			p.SetState(610)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(611)

				var _x = p.Index_array()

				localctx.(*List_indexContext)._index_array = _x
			}

			localctx.(*List_indexContext).GetListi().GetLista().Add(localctx.(*List_indexContext).Get_index_array().GetIndex())
			localctx.(*List_indexContext).lista = localctx.(*List_indexContext).GetListi().GetLista()

		}
		p.SetState(618)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())
	}

	return localctx
}

// IIndex_arrayContext is an interface to support dynamic dispatch.
type IIndex_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetIndex returns the index attribute.
	GetIndex() interfaces.Expresion

	// SetIndex sets the index attribute.
	SetIndex(interfaces.Expresion)

	// IsIndex_arrayContext differentiates from other interfaces.
	IsIndex_arrayContext()
}

type Index_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	index       interfaces.Expresion
	_expression IExpressionContext
}

func NewEmptyIndex_arrayContext() *Index_arrayContext {
	var p = new(Index_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_index_array
	return p
}

func (*Index_arrayContext) IsIndex_arrayContext() {}

func NewIndex_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_arrayContext {
	var p = new(Index_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_index_array

	return p
}

func (s *Index_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_arrayContext) Get_expression() IExpressionContext { return s._expression }

func (s *Index_arrayContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Index_arrayContext) GetIndex() interfaces.Expresion { return s.index }

func (s *Index_arrayContext) SetIndex(v interfaces.Expresion) { s.index = v }

func (s *Index_arrayContext) CORIZQ() antlr.TerminalNode {
	return s.GetToken(RustParCORIZQ, 0)
}

func (s *Index_arrayContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Index_arrayContext) CORDER() antlr.TerminalNode {
	return s.GetToken(RustParCORDER, 0)
}

func (s *Index_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_arrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterIndex_array(s)
	}
}

func (s *Index_arrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitIndex_array(s)
	}
}

func (p *RustPar) Index_array() (localctx IIndex_arrayContext) {
	this := p
	_ = this

	localctx = NewIndex_arrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, RustParRULE_index_array)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(619)
		p.Match(RustParCORIZQ)
	}
	{
		p.SetState(620)

		var _x = p.expression(0)

		localctx.(*Index_arrayContext)._expression = _x
	}
	{
		p.SetState(621)
		p.Match(RustParCORDER)
	}
	localctx.(*Index_arrayContext).index = localctx.(*Index_arrayContext).Get_expression().GetP()

	return localctx
}

// IIf_sentContext is an interface to support dynamic dispatch.
type IIf_sentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_bloque_inst returns the _bloque_inst rule contexts.
	Get_bloque_inst() IBloque_instContext

	// GetBprin returns the bprin rule contexts.
	GetBprin() IBloque_instContext

	// GetBelse returns the belse rule contexts.
	GetBelse() IBloque_instContext

	// Get_list_elseif returns the _list_elseif rule contexts.
	Get_list_elseif() IList_elseifContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_bloque_inst sets the _bloque_inst rule contexts.
	Set_bloque_inst(IBloque_instContext)

	// SetBprin sets the bprin rule contexts.
	SetBprin(IBloque_instContext)

	// SetBelse sets the belse rule contexts.
	SetBelse(IBloque_instContext)

	// Set_list_elseif sets the _list_elseif rule contexts.
	Set_list_elseif(IList_elseifContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsIf_sentContext differentiates from other interfaces.
	IsIf_sentContext()
}

type If_sentContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	instr        interfaces.Instruction
	_IF          antlr.Token
	_expression  IExpressionContext
	_bloque_inst IBloque_instContext
	bprin        IBloque_instContext
	belse        IBloque_instContext
	_list_elseif IList_elseifContext
}

func NewEmptyIf_sentContext() *If_sentContext {
	var p = new(If_sentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_if_sent
	return p
}

func (*If_sentContext) IsIf_sentContext() {}

func NewIf_sentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_sentContext {
	var p = new(If_sentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_if_sent

	return p
}

func (s *If_sentContext) GetParser() antlr.Parser { return s.parser }

func (s *If_sentContext) Get_IF() antlr.Token { return s._IF }

func (s *If_sentContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *If_sentContext) Get_expression() IExpressionContext { return s._expression }

func (s *If_sentContext) Get_bloque_inst() IBloque_instContext { return s._bloque_inst }

func (s *If_sentContext) GetBprin() IBloque_instContext { return s.bprin }

func (s *If_sentContext) GetBelse() IBloque_instContext { return s.belse }

func (s *If_sentContext) Get_list_elseif() IList_elseifContext { return s._list_elseif }

func (s *If_sentContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *If_sentContext) Set_bloque_inst(v IBloque_instContext) { s._bloque_inst = v }

func (s *If_sentContext) SetBprin(v IBloque_instContext) { s.bprin = v }

func (s *If_sentContext) SetBelse(v IBloque_instContext) { s.belse = v }

func (s *If_sentContext) Set_list_elseif(v IList_elseifContext) { s._list_elseif = v }

func (s *If_sentContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *If_sentContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *If_sentContext) IF() antlr.TerminalNode {
	return s.GetToken(RustParIF, 0)
}

func (s *If_sentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_sentContext) AllBloque_inst() []IBloque_instContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBloque_instContext)(nil)).Elem())
	var tst = make([]IBloque_instContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBloque_instContext)
		}
	}

	return tst
}

func (s *If_sentContext) Bloque_inst(i int) IBloque_instContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_instContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBloque_instContext)
}

func (s *If_sentContext) ELSE() antlr.TerminalNode {
	return s.GetToken(RustParELSE, 0)
}

func (s *If_sentContext) List_elseif() IList_elseifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_elseifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_elseifContext)
}

func (s *If_sentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_sentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_sentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterIf_sent(s)
	}
}

func (s *If_sentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitIf_sent(s)
	}
}

func (p *RustPar) If_sent() (localctx IIf_sentContext) {
	this := p
	_ = this

	localctx = NewIf_sentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, RustParRULE_if_sent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(650)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(624)

			var _m = p.Match(RustParIF)

			localctx.(*If_sentContext)._IF = _m
		}
		{
			p.SetState(625)

			var _x = p.expression(0)

			localctx.(*If_sentContext)._expression = _x
		}
		{
			p.SetState(626)

			var _x = p.Bloque_inst()

			localctx.(*If_sentContext)._bloque_inst = _x
		}
		localctx.(*If_sentContext).instr = instruction.NewIf(localctx.(*If_sentContext).Get_expression().GetP(), localctx.(*If_sentContext).Get_bloque_inst().GetL(), nil, nil, (func() int {
			if localctx.(*If_sentContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*If_sentContext).Get_IF().GetLine()
			}
		}()), localctx.(*If_sentContext).Get_IF().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(629)

			var _m = p.Match(RustParIF)

			localctx.(*If_sentContext)._IF = _m
		}
		{
			p.SetState(630)

			var _x = p.expression(0)

			localctx.(*If_sentContext)._expression = _x
		}
		{
			p.SetState(631)

			var _x = p.Bloque_inst()

			localctx.(*If_sentContext).bprin = _x
		}
		{
			p.SetState(632)
			p.Match(RustParELSE)
		}
		{
			p.SetState(633)

			var _x = p.Bloque_inst()

			localctx.(*If_sentContext).belse = _x
		}
		localctx.(*If_sentContext).instr = instruction.NewIf(localctx.(*If_sentContext).Get_expression().GetP(), localctx.(*If_sentContext).GetBprin().GetL(), nil, localctx.(*If_sentContext).GetBelse().GetL(), (func() int {
			if localctx.(*If_sentContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*If_sentContext).Get_IF().GetLine()
			}
		}()), localctx.(*If_sentContext).Get_IF().GetColumn())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(636)

			var _m = p.Match(RustParIF)

			localctx.(*If_sentContext)._IF = _m
		}
		{
			p.SetState(637)

			var _x = p.expression(0)

			localctx.(*If_sentContext)._expression = _x
		}
		{
			p.SetState(638)

			var _x = p.Bloque_inst()

			localctx.(*If_sentContext).bprin = _x
		}
		{
			p.SetState(639)

			var _x = p.List_elseif()

			localctx.(*If_sentContext)._list_elseif = _x
		}

		localctx.(*If_sentContext).instr = instruction.NewIf(localctx.(*If_sentContext).Get_expression().GetP(), localctx.(*If_sentContext).GetBprin().GetL(), localctx.(*If_sentContext).Get_list_elseif().GetLista(), nil, (func() int {
			if localctx.(*If_sentContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*If_sentContext).Get_IF().GetLine()
			}
		}()), localctx.(*If_sentContext).Get_IF().GetColumn())

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(642)

			var _m = p.Match(RustParIF)

			localctx.(*If_sentContext)._IF = _m
		}
		{
			p.SetState(643)

			var _x = p.expression(0)

			localctx.(*If_sentContext)._expression = _x
		}
		{
			p.SetState(644)

			var _x = p.Bloque_inst()

			localctx.(*If_sentContext).bprin = _x
		}
		{
			p.SetState(645)

			var _x = p.List_elseif()

			localctx.(*If_sentContext)._list_elseif = _x
		}
		{
			p.SetState(646)
			p.Match(RustParELSE)
		}
		{
			p.SetState(647)

			var _x = p.Bloque_inst()

			localctx.(*If_sentContext).belse = _x
		}

		localctx.(*If_sentContext).instr = instruction.NewIf(localctx.(*If_sentContext).Get_expression().GetP(), localctx.(*If_sentContext).GetBprin().GetL(), localctx.(*If_sentContext).Get_list_elseif().GetLista(), localctx.(*If_sentContext).GetBelse().GetL(), (func() int {
			if localctx.(*If_sentContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*If_sentContext).Get_IF().GetLine()
			}
		}()), localctx.(*If_sentContext).Get_IF().GetColumn())

	}

	return localctx
}

// IIf_expContext is an interface to support dynamic dispatch.
type IIf_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// GetBprin_e returns the bprin_e rule contexts.
	GetBprin_e() IBloque_expContext

	// GetBelse_e returns the belse_e rule contexts.
	GetBelse_e() IBloque_expContext

	// Get_list_elseif_exp returns the _list_elseif_exp rule contexts.
	Get_list_elseif_exp() IList_elseif_expContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// SetBprin_e sets the bprin_e rule contexts.
	SetBprin_e(IBloque_expContext)

	// SetBelse_e sets the belse_e rule contexts.
	SetBelse_e(IBloque_expContext)

	// Set_list_elseif_exp sets the _list_elseif_exp rule contexts.
	Set_list_elseif_exp(IList_elseif_expContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsIf_expContext differentiates from other interfaces.
	IsIf_expContext()
}

type If_expContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	p                interfaces.Expresion
	_IF              antlr.Token
	_expression      IExpressionContext
	bprin_e          IBloque_expContext
	belse_e          IBloque_expContext
	_list_elseif_exp IList_elseif_expContext
}

func NewEmptyIf_expContext() *If_expContext {
	var p = new(If_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_if_exp
	return p
}

func (*If_expContext) IsIf_expContext() {}

func NewIf_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_expContext {
	var p = new(If_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_if_exp

	return p
}

func (s *If_expContext) GetParser() antlr.Parser { return s.parser }

func (s *If_expContext) Get_IF() antlr.Token { return s._IF }

func (s *If_expContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *If_expContext) Get_expression() IExpressionContext { return s._expression }

func (s *If_expContext) GetBprin_e() IBloque_expContext { return s.bprin_e }

func (s *If_expContext) GetBelse_e() IBloque_expContext { return s.belse_e }

func (s *If_expContext) Get_list_elseif_exp() IList_elseif_expContext { return s._list_elseif_exp }

func (s *If_expContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *If_expContext) SetBprin_e(v IBloque_expContext) { s.bprin_e = v }

func (s *If_expContext) SetBelse_e(v IBloque_expContext) { s.belse_e = v }

func (s *If_expContext) Set_list_elseif_exp(v IList_elseif_expContext) { s._list_elseif_exp = v }

func (s *If_expContext) GetP() interfaces.Expresion { return s.p }

func (s *If_expContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *If_expContext) IF() antlr.TerminalNode {
	return s.GetToken(RustParIF, 0)
}

func (s *If_expContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_expContext) ELSE() antlr.TerminalNode {
	return s.GetToken(RustParELSE, 0)
}

func (s *If_expContext) AllBloque_exp() []IBloque_expContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBloque_expContext)(nil)).Elem())
	var tst = make([]IBloque_expContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBloque_expContext)
		}
	}

	return tst
}

func (s *If_expContext) Bloque_exp(i int) IBloque_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_expContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBloque_expContext)
}

func (s *If_expContext) List_elseif_exp() IList_elseif_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_elseif_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_elseif_expContext)
}

func (s *If_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterIf_exp(s)
	}
}

func (s *If_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitIf_exp(s)
	}
}

func (p *RustPar) If_exp() (localctx IIf_expContext) {
	this := p
	_ = this

	localctx = NewIf_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, RustParRULE_if_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(667)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(652)

			var _m = p.Match(RustParIF)

			localctx.(*If_expContext)._IF = _m
		}
		{
			p.SetState(653)

			var _x = p.expression(0)

			localctx.(*If_expContext)._expression = _x
		}
		{
			p.SetState(654)

			var _x = p.Bloque_exp()

			localctx.(*If_expContext).bprin_e = _x
		}
		{
			p.SetState(655)
			p.Match(RustParELSE)
		}
		{
			p.SetState(656)

			var _x = p.Bloque_exp()

			localctx.(*If_expContext).belse_e = _x
		}
		localctx.(*If_expContext).p = instruction.NewIfExpre(localctx.(*If_expContext).Get_expression().GetP(), nil, nil, nil, (func() int {
			if localctx.(*If_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*If_expContext).Get_IF().GetLine()
			}
		}()), localctx.(*If_expContext).Get_IF().GetColumn(), true, localctx.(*If_expContext).GetBprin_e().GetP(), nil, localctx.(*If_expContext).GetBelse_e().GetP())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(659)

			var _m = p.Match(RustParIF)

			localctx.(*If_expContext)._IF = _m
		}
		{
			p.SetState(660)

			var _x = p.expression(0)

			localctx.(*If_expContext)._expression = _x
		}
		{
			p.SetState(661)

			var _x = p.Bloque_exp()

			localctx.(*If_expContext).bprin_e = _x
		}
		{
			p.SetState(662)

			var _x = p.List_elseif_exp()

			localctx.(*If_expContext)._list_elseif_exp = _x
		}
		{
			p.SetState(663)
			p.Match(RustParELSE)
		}
		{
			p.SetState(664)

			var _x = p.Bloque_exp()

			localctx.(*If_expContext).belse_e = _x
		}

		localctx.(*If_expContext).p = instruction.NewIfExpre(localctx.(*If_expContext).Get_expression().GetP(), nil, nil, nil, (func() int {
			if localctx.(*If_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*If_expContext).Get_IF().GetLine()
			}
		}()), localctx.(*If_expContext).Get_IF().GetColumn(), true, localctx.(*If_expContext).GetBprin_e().GetP(), localctx.(*If_expContext).Get_list_elseif_exp().GetLista(), localctx.(*If_expContext).GetBelse_e().GetP())

	}

	return localctx
}

// IList_elseifContext is an interface to support dynamic dispatch.
type IList_elseifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_else_if returns the _else_if rule contexts.
	Get_else_if() IElse_ifContext

	// Set_else_if sets the _else_if rule contexts.
	Set_else_if(IElse_ifContext)

	// GetList returns the list rule context list.
	GetList() []IElse_ifContext

	// SetList sets the list rule context list.
	SetList([]IElse_ifContext)

	// GetLista returns the lista attribute.
	GetLista() *arrayList.List

	// SetLista sets the lista attribute.
	SetLista(*arrayList.List)

	// IsList_elseifContext differentiates from other interfaces.
	IsList_elseifContext()
}

type List_elseifContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	lista    *arrayList.List
	_else_if IElse_ifContext
	list     []IElse_ifContext
}

func NewEmptyList_elseifContext() *List_elseifContext {
	var p = new(List_elseifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_list_elseif
	return p
}

func (*List_elseifContext) IsList_elseifContext() {}

func NewList_elseifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_elseifContext {
	var p = new(List_elseifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_list_elseif

	return p
}

func (s *List_elseifContext) GetParser() antlr.Parser { return s.parser }

func (s *List_elseifContext) Get_else_if() IElse_ifContext { return s._else_if }

func (s *List_elseifContext) Set_else_if(v IElse_ifContext) { s._else_if = v }

func (s *List_elseifContext) GetList() []IElse_ifContext { return s.list }

func (s *List_elseifContext) SetList(v []IElse_ifContext) { s.list = v }

func (s *List_elseifContext) GetLista() *arrayList.List { return s.lista }

func (s *List_elseifContext) SetLista(v *arrayList.List) { s.lista = v }

func (s *List_elseifContext) AllElse_if() []IElse_ifContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElse_ifContext)(nil)).Elem())
	var tst = make([]IElse_ifContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElse_ifContext)
		}
	}

	return tst
}

func (s *List_elseifContext) Else_if(i int) IElse_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_ifContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElse_ifContext)
}

func (s *List_elseifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_elseifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_elseifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterList_elseif(s)
	}
}

func (s *List_elseifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitList_elseif(s)
	}
}

func (p *RustPar) List_elseif() (localctx IList_elseifContext) {
	this := p
	_ = this

	localctx = NewList_elseifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, RustParRULE_list_elseif)
	localctx.(*List_elseifContext).lista = arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(670)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(669)

				var _x = p.Else_if()

				localctx.(*List_elseifContext)._else_if = _x
			}
			localctx.(*List_elseifContext).list = append(localctx.(*List_elseifContext).list, localctx.(*List_elseifContext)._else_if)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(672)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())
	}

	listInt := localctx.(*List_elseifContext).GetList()
	for _, e := range listInt {
		localctx.(*List_elseifContext).lista.Add(e.GetInstr())
	}

	return localctx
}

// IList_elseif_expContext is an interface to support dynamic dispatch.
type IList_elseif_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_else_if_exp returns the _else_if_exp rule contexts.
	Get_else_if_exp() IElse_if_expContext

	// Set_else_if_exp sets the _else_if_exp rule contexts.
	Set_else_if_exp(IElse_if_expContext)

	// GetList returns the list rule context list.
	GetList() []IElse_if_expContext

	// SetList sets the list rule context list.
	SetList([]IElse_if_expContext)

	// GetLista returns the lista attribute.
	GetLista() *arrayList.List

	// SetLista sets the lista attribute.
	SetLista(*arrayList.List)

	// IsList_elseif_expContext differentiates from other interfaces.
	IsList_elseif_expContext()
}

type List_elseif_expContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	lista        *arrayList.List
	_else_if_exp IElse_if_expContext
	list         []IElse_if_expContext
}

func NewEmptyList_elseif_expContext() *List_elseif_expContext {
	var p = new(List_elseif_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_list_elseif_exp
	return p
}

func (*List_elseif_expContext) IsList_elseif_expContext() {}

func NewList_elseif_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_elseif_expContext {
	var p = new(List_elseif_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_list_elseif_exp

	return p
}

func (s *List_elseif_expContext) GetParser() antlr.Parser { return s.parser }

func (s *List_elseif_expContext) Get_else_if_exp() IElse_if_expContext { return s._else_if_exp }

func (s *List_elseif_expContext) Set_else_if_exp(v IElse_if_expContext) { s._else_if_exp = v }

func (s *List_elseif_expContext) GetList() []IElse_if_expContext { return s.list }

func (s *List_elseif_expContext) SetList(v []IElse_if_expContext) { s.list = v }

func (s *List_elseif_expContext) GetLista() *arrayList.List { return s.lista }

func (s *List_elseif_expContext) SetLista(v *arrayList.List) { s.lista = v }

func (s *List_elseif_expContext) AllElse_if_exp() []IElse_if_expContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElse_if_expContext)(nil)).Elem())
	var tst = make([]IElse_if_expContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElse_if_expContext)
		}
	}

	return tst
}

func (s *List_elseif_expContext) Else_if_exp(i int) IElse_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_if_expContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElse_if_expContext)
}

func (s *List_elseif_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_elseif_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_elseif_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterList_elseif_exp(s)
	}
}

func (s *List_elseif_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitList_elseif_exp(s)
	}
}

func (p *RustPar) List_elseif_exp() (localctx IList_elseif_expContext) {
	this := p
	_ = this

	localctx = NewList_elseif_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, RustParRULE_list_elseif_exp)
	localctx.(*List_elseif_expContext).lista = arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(677)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(676)

				var _x = p.Else_if_exp()

				localctx.(*List_elseif_expContext)._else_if_exp = _x
			}
			localctx.(*List_elseif_expContext).list = append(localctx.(*List_elseif_expContext).list, localctx.(*List_elseif_expContext)._else_if_exp)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(679)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext())
	}

	listInt := localctx.(*List_elseif_expContext).GetList()
	for _, e := range listInt {
		localctx.(*List_elseif_expContext).lista.Add(e.GetP())
	}

	return localctx
}

// IElse_ifContext is an interface to support dynamic dispatch.
type IElse_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ELSE returns the _ELSE token.
	Get_ELSE() antlr.Token

	// Set_ELSE sets the _ELSE token.
	Set_ELSE(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_bloque_inst returns the _bloque_inst rule contexts.
	Get_bloque_inst() IBloque_instContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_bloque_inst sets the _bloque_inst rule contexts.
	Set_bloque_inst(IBloque_instContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsElse_ifContext differentiates from other interfaces.
	IsElse_ifContext()
}

type Else_ifContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	instr        interfaces.Instruction
	_ELSE        antlr.Token
	_expression  IExpressionContext
	_bloque_inst IBloque_instContext
}

func NewEmptyElse_ifContext() *Else_ifContext {
	var p = new(Else_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_else_if
	return p
}

func (*Else_ifContext) IsElse_ifContext() {}

func NewElse_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_ifContext {
	var p = new(Else_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_else_if

	return p
}

func (s *Else_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_ifContext) Get_ELSE() antlr.Token { return s._ELSE }

func (s *Else_ifContext) Set_ELSE(v antlr.Token) { s._ELSE = v }

func (s *Else_ifContext) Get_expression() IExpressionContext { return s._expression }

func (s *Else_ifContext) Get_bloque_inst() IBloque_instContext { return s._bloque_inst }

func (s *Else_ifContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Else_ifContext) Set_bloque_inst(v IBloque_instContext) { s._bloque_inst = v }

func (s *Else_ifContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Else_ifContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Else_ifContext) ELSE() antlr.TerminalNode {
	return s.GetToken(RustParELSE, 0)
}

func (s *Else_ifContext) IF() antlr.TerminalNode {
	return s.GetToken(RustParIF, 0)
}

func (s *Else_ifContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Else_ifContext) Bloque_inst() IBloque_instContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_instContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_instContext)
}

func (s *Else_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Else_ifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterElse_if(s)
	}
}

func (s *Else_ifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitElse_if(s)
	}
}

func (p *RustPar) Else_if() (localctx IElse_ifContext) {
	this := p
	_ = this

	localctx = NewElse_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, RustParRULE_else_if)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(683)

		var _m = p.Match(RustParELSE)

		localctx.(*Else_ifContext)._ELSE = _m
	}
	{
		p.SetState(684)
		p.Match(RustParIF)
	}
	{
		p.SetState(685)

		var _x = p.expression(0)

		localctx.(*Else_ifContext)._expression = _x
	}
	{
		p.SetState(686)

		var _x = p.Bloque_inst()

		localctx.(*Else_ifContext)._bloque_inst = _x
	}
	localctx.(*Else_ifContext).instr = instruction.NewIf(localctx.(*Else_ifContext).Get_expression().GetP(), localctx.(*Else_ifContext).Get_bloque_inst().GetL(), nil, nil, (func() int {
		if localctx.(*Else_ifContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_ifContext).Get_ELSE().GetLine()
		}
	}()), localctx.(*Else_ifContext).Get_ELSE().GetColumn())

	return localctx
}

// IElse_if_expContext is an interface to support dynamic dispatch.
type IElse_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ELSE returns the _ELSE token.
	Get_ELSE() antlr.Token

	// Set_ELSE sets the _ELSE token.
	Set_ELSE(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_bloque_exp returns the _bloque_exp rule contexts.
	Get_bloque_exp() IBloque_expContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_bloque_exp sets the _bloque_exp rule contexts.
	Set_bloque_exp(IBloque_expContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsElse_if_expContext differentiates from other interfaces.
	IsElse_if_expContext()
}

type Else_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	p           interfaces.Expresion
	_ELSE       antlr.Token
	_expression IExpressionContext
	_bloque_exp IBloque_expContext
}

func NewEmptyElse_if_expContext() *Else_if_expContext {
	var p = new(Else_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_else_if_exp
	return p
}

func (*Else_if_expContext) IsElse_if_expContext() {}

func NewElse_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_if_expContext {
	var p = new(Else_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_else_if_exp

	return p
}

func (s *Else_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_if_expContext) Get_ELSE() antlr.Token { return s._ELSE }

func (s *Else_if_expContext) Set_ELSE(v antlr.Token) { s._ELSE = v }

func (s *Else_if_expContext) Get_expression() IExpressionContext { return s._expression }

func (s *Else_if_expContext) Get_bloque_exp() IBloque_expContext { return s._bloque_exp }

func (s *Else_if_expContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Else_if_expContext) Set_bloque_exp(v IBloque_expContext) { s._bloque_exp = v }

func (s *Else_if_expContext) GetP() interfaces.Expresion { return s.p }

func (s *Else_if_expContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Else_if_expContext) ELSE() antlr.TerminalNode {
	return s.GetToken(RustParELSE, 0)
}

func (s *Else_if_expContext) IF() antlr.TerminalNode {
	return s.GetToken(RustParIF, 0)
}

func (s *Else_if_expContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Else_if_expContext) Bloque_exp() IBloque_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_expContext)
}

func (s *Else_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Else_if_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterElse_if_exp(s)
	}
}

func (s *Else_if_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitElse_if_exp(s)
	}
}

func (p *RustPar) Else_if_exp() (localctx IElse_if_expContext) {
	this := p
	_ = this

	localctx = NewElse_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, RustParRULE_else_if_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(689)

		var _m = p.Match(RustParELSE)

		localctx.(*Else_if_expContext)._ELSE = _m
	}
	{
		p.SetState(690)
		p.Match(RustParIF)
	}
	{
		p.SetState(691)

		var _x = p.expression(0)

		localctx.(*Else_if_expContext)._expression = _x
	}
	{
		p.SetState(692)

		var _x = p.Bloque_exp()

		localctx.(*Else_if_expContext)._bloque_exp = _x
	}
	localctx.(*Else_if_expContext).p = instruction.NewIfExpre(localctx.(*Else_if_expContext).Get_expression().GetP(), nil, nil, nil, (func() int {
		if localctx.(*Else_if_expContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_if_expContext).Get_ELSE().GetLine()
		}
	}()), localctx.(*Else_if_expContext).Get_ELSE().GetColumn(), true, localctx.(*Else_if_expContext).Get_bloque_exp().GetP(), nil, nil)

	return localctx
}

// IMatch_sentContext is an interface to support dynamic dispatch.
type IMatch_sentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MATCH returns the _MATCH token.
	Get_MATCH() antlr.Token

	// GetTh returns the th token.
	GetTh() antlr.Token

	// Set_MATCH sets the _MATCH token.
	Set_MATCH(antlr.Token)

	// SetTh sets the th token.
	SetTh(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// GetBrazos returns the brazos rule contexts.
	GetBrazos() IMatch_brazosContext

	// Get_bloque_inst returns the _bloque_inst rule contexts.
	Get_bloque_inst() IBloque_instContext

	// Get_instruccion_only returns the _instruccion_only rule contexts.
	Get_instruccion_only() IInstruccion_onlyContext

	// GetExp returns the exp rule contexts.
	GetExp() IExpressionContext

	// GetBrazosexp returns the brazosexp rule contexts.
	GetBrazosexp() IMatch_brazos_expContext

	// GetExp_ returns the exp_ rule contexts.
	GetExp_() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// SetBrazos sets the brazos rule contexts.
	SetBrazos(IMatch_brazosContext)

	// Set_bloque_inst sets the _bloque_inst rule contexts.
	Set_bloque_inst(IBloque_instContext)

	// Set_instruccion_only sets the _instruccion_only rule contexts.
	Set_instruccion_only(IInstruccion_onlyContext)

	// SetExp sets the exp rule contexts.
	SetExp(IExpressionContext)

	// SetBrazosexp sets the brazosexp rule contexts.
	SetBrazosexp(IMatch_brazos_expContext)

	// SetExp_ sets the exp_ rule contexts.
	SetExp_(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsMatch_sentContext differentiates from other interfaces.
	IsMatch_sentContext()
}

type Match_sentContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruction
	p                 interfaces.Expresion
	_MATCH            antlr.Token
	_expression       IExpressionContext
	brazos            IMatch_brazosContext
	th                antlr.Token
	_bloque_inst      IBloque_instContext
	_instruccion_only IInstruccion_onlyContext
	exp               IExpressionContext
	brazosexp         IMatch_brazos_expContext
	exp_              IExpressionContext
}

func NewEmptyMatch_sentContext() *Match_sentContext {
	var p = new(Match_sentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_match_sent
	return p
}

func (*Match_sentContext) IsMatch_sentContext() {}

func NewMatch_sentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Match_sentContext {
	var p = new(Match_sentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_match_sent

	return p
}

func (s *Match_sentContext) GetParser() antlr.Parser { return s.parser }

func (s *Match_sentContext) Get_MATCH() antlr.Token { return s._MATCH }

func (s *Match_sentContext) GetTh() antlr.Token { return s.th }

func (s *Match_sentContext) Set_MATCH(v antlr.Token) { s._MATCH = v }

func (s *Match_sentContext) SetTh(v antlr.Token) { s.th = v }

func (s *Match_sentContext) Get_expression() IExpressionContext { return s._expression }

func (s *Match_sentContext) GetBrazos() IMatch_brazosContext { return s.brazos }

func (s *Match_sentContext) Get_bloque_inst() IBloque_instContext { return s._bloque_inst }

func (s *Match_sentContext) Get_instruccion_only() IInstruccion_onlyContext {
	return s._instruccion_only
}

func (s *Match_sentContext) GetExp() IExpressionContext { return s.exp }

func (s *Match_sentContext) GetBrazosexp() IMatch_brazos_expContext { return s.brazosexp }

func (s *Match_sentContext) GetExp_() IExpressionContext { return s.exp_ }

func (s *Match_sentContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Match_sentContext) SetBrazos(v IMatch_brazosContext) { s.brazos = v }

func (s *Match_sentContext) Set_bloque_inst(v IBloque_instContext) { s._bloque_inst = v }

func (s *Match_sentContext) Set_instruccion_only(v IInstruccion_onlyContext) { s._instruccion_only = v }

func (s *Match_sentContext) SetExp(v IExpressionContext) { s.exp = v }

func (s *Match_sentContext) SetBrazosexp(v IMatch_brazos_expContext) { s.brazosexp = v }

func (s *Match_sentContext) SetExp_(v IExpressionContext) { s.exp_ = v }

func (s *Match_sentContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Match_sentContext) GetP() interfaces.Expresion { return s.p }

func (s *Match_sentContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Match_sentContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Match_sentContext) MATCH() antlr.TerminalNode {
	return s.GetToken(RustParMATCH, 0)
}

func (s *Match_sentContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Match_sentContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Match_sentContext) LLAVEIZQ() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEIZQ, 0)
}

func (s *Match_sentContext) LLAVEDER() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEDER, 0)
}

func (s *Match_sentContext) Match_brazos() IMatch_brazosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_brazosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_brazosContext)
}

func (s *Match_sentContext) GUIONB() antlr.TerminalNode {
	return s.GetToken(RustParGUIONB, 0)
}

func (s *Match_sentContext) Bloque_inst() IBloque_instContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_instContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_instContext)
}

func (s *Match_sentContext) MTHEN() antlr.TerminalNode {
	return s.GetToken(RustParMTHEN, 0)
}

func (s *Match_sentContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *Match_sentContext) Instruccion_only() IInstruccion_onlyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccion_onlyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccion_onlyContext)
}

func (s *Match_sentContext) Match_brazos_exp() IMatch_brazos_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_brazos_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_brazos_expContext)
}

func (s *Match_sentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Match_sentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Match_sentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterMatch_sent(s)
	}
}

func (s *Match_sentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitMatch_sent(s)
	}
}

func (p *RustPar) Match_sent() (localctx IMatch_sentContext) {
	this := p
	_ = this

	localctx = NewMatch_sentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, RustParRULE_match_sent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(744)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(695)

			var _m = p.Match(RustParMATCH)

			localctx.(*Match_sentContext)._MATCH = _m
		}
		{
			p.SetState(696)

			var _x = p.expression(0)

			localctx.(*Match_sentContext)._expression = _x
		}
		{
			p.SetState(697)
			p.Match(RustParLLAVEIZQ)
		}
		{
			p.SetState(698)

			var _x = p.match_brazos(0)

			localctx.(*Match_sentContext).brazos = _x
		}
		{
			p.SetState(699)
			p.Match(RustParLLAVEDER)
		}

		localctx.(*Match_sentContext).instr = instructionExpre.NewMatch(localctx.(*Match_sentContext).Get_expression().GetP(), localctx.(*Match_sentContext).GetBrazos().GetL_brazos(), nil, nil, (func() int {
			if localctx.(*Match_sentContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Match_sentContext).Get_MATCH().GetLine()
			}
		}()), localctx.(*Match_sentContext).Get_MATCH().GetColumn(), nil, false)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(702)

			var _m = p.Match(RustParMATCH)

			localctx.(*Match_sentContext)._MATCH = _m
		}
		{
			p.SetState(703)

			var _x = p.expression(0)

			localctx.(*Match_sentContext)._expression = _x
		}
		{
			p.SetState(704)
			p.Match(RustParLLAVEIZQ)
		}
		{
			p.SetState(705)

			var _x = p.match_brazos(0)

			localctx.(*Match_sentContext).brazos = _x
		}
		{
			p.SetState(706)
			p.Match(RustParGUIONB)
		}
		{
			p.SetState(707)

			var _m = p.Match(RustParMTHEN)

			localctx.(*Match_sentContext).th = _m
		}
		{
			p.SetState(708)

			var _x = p.Bloque_inst()

			localctx.(*Match_sentContext)._bloque_inst = _x
		}
		p.SetState(710)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == RustParCOMA {
			{
				p.SetState(709)
				p.Match(RustParCOMA)
			}

		}
		{
			p.SetState(712)
			p.Match(RustParLLAVEDER)
		}

		localctx.(*Match_sentContext).instr = instructionExpre.NewMatch(localctx.(*Match_sentContext).Get_expression().GetP(), localctx.(*Match_sentContext).GetBrazos().GetL_brazos(), localctx.(*Match_sentContext).Get_bloque_inst().GetL(), nil, (func() int {
			if localctx.(*Match_sentContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Match_sentContext).Get_MATCH().GetLine()
			}
		}()), localctx.(*Match_sentContext).Get_MATCH().GetColumn(), nil, false)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(715)

			var _m = p.Match(RustParMATCH)

			localctx.(*Match_sentContext)._MATCH = _m
		}
		{
			p.SetState(716)

			var _x = p.expression(0)

			localctx.(*Match_sentContext)._expression = _x
		}
		{
			p.SetState(717)
			p.Match(RustParLLAVEIZQ)
		}
		{
			p.SetState(718)

			var _x = p.match_brazos(0)

			localctx.(*Match_sentContext).brazos = _x
		}
		{
			p.SetState(719)
			p.Match(RustParGUIONB)
		}
		{
			p.SetState(720)

			var _m = p.Match(RustParMTHEN)

			localctx.(*Match_sentContext).th = _m
		}
		{
			p.SetState(721)

			var _x = p.Instruccion_only()

			localctx.(*Match_sentContext)._instruccion_only = _x
		}
		{
			p.SetState(722)
			p.Match(RustParCOMA)
		}
		{
			p.SetState(723)
			p.Match(RustParLLAVEDER)
		}

		localctx.(*Match_sentContext).instr = instructionExpre.NewMatch(localctx.(*Match_sentContext).Get_expression().GetP(), localctx.(*Match_sentContext).GetBrazos().GetL_brazos(), nil, localctx.(*Match_sentContext).Get_instruccion_only().GetInstr(), (func() int {
			if localctx.(*Match_sentContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Match_sentContext).Get_MATCH().GetLine()
			}
		}()), localctx.(*Match_sentContext).Get_MATCH().GetColumn(), nil, false)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(726)

			var _m = p.Match(RustParMATCH)

			localctx.(*Match_sentContext)._MATCH = _m
		}
		{
			p.SetState(727)

			var _x = p.expression(0)

			localctx.(*Match_sentContext).exp = _x
		}
		{
			p.SetState(728)
			p.Match(RustParLLAVEIZQ)
		}
		{
			p.SetState(729)

			var _x = p.match_brazos_exp(0)

			localctx.(*Match_sentContext).brazosexp = _x
		}
		{
			p.SetState(730)
			p.Match(RustParLLAVEDER)
		}

		localctx.(*Match_sentContext).p = instructionExpre.NewMatch(localctx.(*Match_sentContext).GetExp().GetP(), localctx.(*Match_sentContext).GetBrazosexp().GetL_brazos(), nil, nil, (func() int {
			if localctx.(*Match_sentContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Match_sentContext).Get_MATCH().GetLine()
			}
		}()), localctx.(*Match_sentContext).Get_MATCH().GetColumn(), nil, true)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(733)

			var _m = p.Match(RustParMATCH)

			localctx.(*Match_sentContext)._MATCH = _m
		}
		{
			p.SetState(734)

			var _x = p.expression(0)

			localctx.(*Match_sentContext).exp = _x
		}
		{
			p.SetState(735)
			p.Match(RustParLLAVEIZQ)
		}
		{
			p.SetState(736)

			var _x = p.match_brazos_exp(0)

			localctx.(*Match_sentContext).brazosexp = _x
		}
		{
			p.SetState(737)
			p.Match(RustParGUIONB)
		}
		{
			p.SetState(738)

			var _m = p.Match(RustParMTHEN)

			localctx.(*Match_sentContext).th = _m
		}
		{
			p.SetState(739)

			var _x = p.expression(0)

			localctx.(*Match_sentContext).exp_ = _x
		}
		{
			p.SetState(740)
			p.Match(RustParCOMA)
		}
		{
			p.SetState(741)
			p.Match(RustParLLAVEDER)
		}

		localctx.(*Match_sentContext).p = instructionExpre.NewMatch(localctx.(*Match_sentContext).GetExp().GetP(), localctx.(*Match_sentContext).GetBrazosexp().GetL_brazos(), nil, nil, (func() int {
			if localctx.(*Match_sentContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Match_sentContext).Get_MATCH().GetLine()
			}
		}()), localctx.(*Match_sentContext).Get_MATCH().GetColumn(), localctx.(*Match_sentContext).GetExp_().GetP(), true)

	}

	return localctx
}

// IMatch_brazosContext is an interface to support dynamic dispatch.
type IMatch_brazosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetListb returns the listb rule contexts.
	GetListb() IMatch_brazosContext

	// Get_matchbrazo returns the _matchbrazo rule contexts.
	Get_matchbrazo() IMatchbrazoContext

	// SetListb sets the listb rule contexts.
	SetListb(IMatch_brazosContext)

	// Set_matchbrazo sets the _matchbrazo rule contexts.
	Set_matchbrazo(IMatchbrazoContext)

	// GetL_brazos returns the l_brazos attribute.
	GetL_brazos() *arrayList.List

	// SetL_brazos sets the l_brazos attribute.
	SetL_brazos(*arrayList.List)

	// IsMatch_brazosContext differentiates from other interfaces.
	IsMatch_brazosContext()
}

type Match_brazosContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	l_brazos    *arrayList.List
	listb       IMatch_brazosContext
	_matchbrazo IMatchbrazoContext
}

func NewEmptyMatch_brazosContext() *Match_brazosContext {
	var p = new(Match_brazosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_match_brazos
	return p
}

func (*Match_brazosContext) IsMatch_brazosContext() {}

func NewMatch_brazosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Match_brazosContext {
	var p = new(Match_brazosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_match_brazos

	return p
}

func (s *Match_brazosContext) GetParser() antlr.Parser { return s.parser }

func (s *Match_brazosContext) GetListb() IMatch_brazosContext { return s.listb }

func (s *Match_brazosContext) Get_matchbrazo() IMatchbrazoContext { return s._matchbrazo }

func (s *Match_brazosContext) SetListb(v IMatch_brazosContext) { s.listb = v }

func (s *Match_brazosContext) Set_matchbrazo(v IMatchbrazoContext) { s._matchbrazo = v }

func (s *Match_brazosContext) GetL_brazos() *arrayList.List { return s.l_brazos }

func (s *Match_brazosContext) SetL_brazos(v *arrayList.List) { s.l_brazos = v }

func (s *Match_brazosContext) Matchbrazo() IMatchbrazoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchbrazoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchbrazoContext)
}

func (s *Match_brazosContext) Match_brazos() IMatch_brazosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_brazosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_brazosContext)
}

func (s *Match_brazosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Match_brazosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Match_brazosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterMatch_brazos(s)
	}
}

func (s *Match_brazosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitMatch_brazos(s)
	}
}

func (p *RustPar) Match_brazos() (localctx IMatch_brazosContext) {
	return p.match_brazos(0)
}

func (p *RustPar) match_brazos(_p int) (localctx IMatch_brazosContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMatch_brazosContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMatch_brazosContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 78
	p.EnterRecursionRule(localctx, 78, RustParRULE_match_brazos, _p)

	localctx.(*Match_brazosContext).l_brazos = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(747)

		var _x = p.Matchbrazo()

		localctx.(*Match_brazosContext)._matchbrazo = _x
	}
	localctx.(*Match_brazosContext).l_brazos.Add(localctx.(*Match_brazosContext).Get_matchbrazo().GetBrazo())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(756)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMatch_brazosContext(p, _parentctx, _parentState)
			localctx.(*Match_brazosContext).listb = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_match_brazos)
			p.SetState(750)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(751)

				var _x = p.Matchbrazo()

				localctx.(*Match_brazosContext)._matchbrazo = _x
			}

			localctx.(*Match_brazosContext).GetListb().GetL_brazos().Add(localctx.(*Match_brazosContext).Get_matchbrazo().GetBrazo())
			localctx.(*Match_brazosContext).l_brazos = localctx.(*Match_brazosContext).GetListb().GetL_brazos()

		}
		p.SetState(758)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext())
	}

	return localctx
}

// IMatch_brazos_expContext is an interface to support dynamic dispatch.
type IMatch_brazos_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetListb returns the listb rule contexts.
	GetListb() IMatch_brazos_expContext

	// Get_matchbrazo_exp returns the _matchbrazo_exp rule contexts.
	Get_matchbrazo_exp() IMatchbrazo_expContext

	// SetListb sets the listb rule contexts.
	SetListb(IMatch_brazos_expContext)

	// Set_matchbrazo_exp sets the _matchbrazo_exp rule contexts.
	Set_matchbrazo_exp(IMatchbrazo_expContext)

	// GetL_brazos returns the l_brazos attribute.
	GetL_brazos() *arrayList.List

	// SetL_brazos sets the l_brazos attribute.
	SetL_brazos(*arrayList.List)

	// IsMatch_brazos_expContext differentiates from other interfaces.
	IsMatch_brazos_expContext()
}

type Match_brazos_expContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	l_brazos        *arrayList.List
	listb           IMatch_brazos_expContext
	_matchbrazo_exp IMatchbrazo_expContext
}

func NewEmptyMatch_brazos_expContext() *Match_brazos_expContext {
	var p = new(Match_brazos_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_match_brazos_exp
	return p
}

func (*Match_brazos_expContext) IsMatch_brazos_expContext() {}

func NewMatch_brazos_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Match_brazos_expContext {
	var p = new(Match_brazos_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_match_brazos_exp

	return p
}

func (s *Match_brazos_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Match_brazos_expContext) GetListb() IMatch_brazos_expContext { return s.listb }

func (s *Match_brazos_expContext) Get_matchbrazo_exp() IMatchbrazo_expContext {
	return s._matchbrazo_exp
}

func (s *Match_brazos_expContext) SetListb(v IMatch_brazos_expContext) { s.listb = v }

func (s *Match_brazos_expContext) Set_matchbrazo_exp(v IMatchbrazo_expContext) { s._matchbrazo_exp = v }

func (s *Match_brazos_expContext) GetL_brazos() *arrayList.List { return s.l_brazos }

func (s *Match_brazos_expContext) SetL_brazos(v *arrayList.List) { s.l_brazos = v }

func (s *Match_brazos_expContext) Matchbrazo_exp() IMatchbrazo_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchbrazo_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchbrazo_expContext)
}

func (s *Match_brazos_expContext) Match_brazos_exp() IMatch_brazos_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_brazos_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_brazos_expContext)
}

func (s *Match_brazos_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Match_brazos_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Match_brazos_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterMatch_brazos_exp(s)
	}
}

func (s *Match_brazos_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitMatch_brazos_exp(s)
	}
}

func (p *RustPar) Match_brazos_exp() (localctx IMatch_brazos_expContext) {
	return p.match_brazos_exp(0)
}

func (p *RustPar) match_brazos_exp(_p int) (localctx IMatch_brazos_expContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMatch_brazos_expContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMatch_brazos_expContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 80
	p.EnterRecursionRule(localctx, 80, RustParRULE_match_brazos_exp, _p)

	localctx.(*Match_brazos_expContext).l_brazos = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(760)

		var _x = p.Matchbrazo_exp()

		localctx.(*Match_brazos_expContext)._matchbrazo_exp = _x
	}
	localctx.(*Match_brazos_expContext).l_brazos.Add(localctx.(*Match_brazos_expContext).Get_matchbrazo_exp().GetBrazo())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(769)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMatch_brazos_expContext(p, _parentctx, _parentState)
			localctx.(*Match_brazos_expContext).listb = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_match_brazos_exp)
			p.SetState(763)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(764)

				var _x = p.Matchbrazo_exp()

				localctx.(*Match_brazos_expContext)._matchbrazo_exp = _x
			}

			localctx.(*Match_brazos_expContext).GetListb().GetL_brazos().Add(localctx.(*Match_brazos_expContext).Get_matchbrazo_exp().GetBrazo())
			localctx.(*Match_brazos_expContext).l_brazos = localctx.(*Match_brazos_expContext).GetListb().GetL_brazos()

		}
		p.SetState(771)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())
	}

	return localctx
}

// IMatchbrazoContext is an interface to support dynamic dispatch.
type IMatchbrazoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTh returns the th token.
	GetTh() antlr.Token

	// SetTh sets the th token.
	SetTh(antlr.Token)

	// Get_listaOpciones returns the _listaOpciones rule contexts.
	Get_listaOpciones() IListaOpcionesContext

	// Get_bloque_inst returns the _bloque_inst rule contexts.
	Get_bloque_inst() IBloque_instContext

	// Get_instruccion_only returns the _instruccion_only rule contexts.
	Get_instruccion_only() IInstruccion_onlyContext

	// Set_listaOpciones sets the _listaOpciones rule contexts.
	Set_listaOpciones(IListaOpcionesContext)

	// Set_bloque_inst sets the _bloque_inst rule contexts.
	Set_bloque_inst(IBloque_instContext)

	// Set_instruccion_only sets the _instruccion_only rule contexts.
	Set_instruccion_only(IInstruccion_onlyContext)

	// GetBrazo returns the brazo attribute.
	GetBrazo() instructionExpre.BrazoMatch

	// SetBrazo sets the brazo attribute.
	SetBrazo(instructionExpre.BrazoMatch)

	// IsMatchbrazoContext differentiates from other interfaces.
	IsMatchbrazoContext()
}

type MatchbrazoContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	brazo             instructionExpre.BrazoMatch
	_listaOpciones    IListaOpcionesContext
	th                antlr.Token
	_bloque_inst      IBloque_instContext
	_instruccion_only IInstruccion_onlyContext
}

func NewEmptyMatchbrazoContext() *MatchbrazoContext {
	var p = new(MatchbrazoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_matchbrazo
	return p
}

func (*MatchbrazoContext) IsMatchbrazoContext() {}

func NewMatchbrazoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchbrazoContext {
	var p = new(MatchbrazoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_matchbrazo

	return p
}

func (s *MatchbrazoContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchbrazoContext) GetTh() antlr.Token { return s.th }

func (s *MatchbrazoContext) SetTh(v antlr.Token) { s.th = v }

func (s *MatchbrazoContext) Get_listaOpciones() IListaOpcionesContext { return s._listaOpciones }

func (s *MatchbrazoContext) Get_bloque_inst() IBloque_instContext { return s._bloque_inst }

func (s *MatchbrazoContext) Get_instruccion_only() IInstruccion_onlyContext {
	return s._instruccion_only
}

func (s *MatchbrazoContext) Set_listaOpciones(v IListaOpcionesContext) { s._listaOpciones = v }

func (s *MatchbrazoContext) Set_bloque_inst(v IBloque_instContext) { s._bloque_inst = v }

func (s *MatchbrazoContext) Set_instruccion_only(v IInstruccion_onlyContext) { s._instruccion_only = v }

func (s *MatchbrazoContext) GetBrazo() instructionExpre.BrazoMatch { return s.brazo }

func (s *MatchbrazoContext) SetBrazo(v instructionExpre.BrazoMatch) { s.brazo = v }

func (s *MatchbrazoContext) ListaOpciones() IListaOpcionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListaOpcionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListaOpcionesContext)
}

func (s *MatchbrazoContext) Bloque_inst() IBloque_instContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_instContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_instContext)
}

func (s *MatchbrazoContext) MTHEN() antlr.TerminalNode {
	return s.GetToken(RustParMTHEN, 0)
}

func (s *MatchbrazoContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *MatchbrazoContext) Instruccion_only() IInstruccion_onlyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccion_onlyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccion_onlyContext)
}

func (s *MatchbrazoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchbrazoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchbrazoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterMatchbrazo(s)
	}
}

func (s *MatchbrazoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitMatchbrazo(s)
	}
}

func (p *RustPar) Matchbrazo() (localctx IMatchbrazoContext) {
	this := p
	_ = this

	localctx = NewMatchbrazoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, RustParRULE_matchbrazo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(786)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(772)

			var _x = p.listaOpciones(0)

			localctx.(*MatchbrazoContext)._listaOpciones = _x
		}
		{
			p.SetState(773)

			var _m = p.Match(RustParMTHEN)

			localctx.(*MatchbrazoContext).th = _m
		}
		{
			p.SetState(774)

			var _x = p.Bloque_inst()

			localctx.(*MatchbrazoContext)._bloque_inst = _x
		}
		p.SetState(776)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(775)
				p.Match(RustParCOMA)
			}

		}
		localctx.(*MatchbrazoContext).brazo = instructionExpre.NewBrazoMatch(localctx.(*MatchbrazoContext).Get_listaOpciones().GetLisop(), localctx.(*MatchbrazoContext).Get_bloque_inst().GetL(), nil, (func() int {
			if localctx.(*MatchbrazoContext).GetTh() == nil {
				return 0
			} else {
				return localctx.(*MatchbrazoContext).GetTh().GetLine()
			}
		}()), localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(780)

			var _x = p.listaOpciones(0)

			localctx.(*MatchbrazoContext)._listaOpciones = _x
		}
		{
			p.SetState(781)

			var _m = p.Match(RustParMTHEN)

			localctx.(*MatchbrazoContext).th = _m
		}
		{
			p.SetState(782)

			var _x = p.Instruccion_only()

			localctx.(*MatchbrazoContext)._instruccion_only = _x
		}
		{
			p.SetState(783)
			p.Match(RustParCOMA)
		}
		localctx.(*MatchbrazoContext).brazo = instructionExpre.NewBrazoMatch(localctx.(*MatchbrazoContext).Get_listaOpciones().GetLisop(), nil, localctx.(*MatchbrazoContext).Get_instruccion_only().GetInstr(), (func() int {
			if localctx.(*MatchbrazoContext).GetTh() == nil {
				return 0
			} else {
				return localctx.(*MatchbrazoContext).GetTh().GetLine()
			}
		}()), localctx.(*MatchbrazoContext).GetTh().GetColumn(), nil)

	}

	return localctx
}

// IMatchbrazo_expContext is an interface to support dynamic dispatch.
type IMatchbrazo_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTh returns the th token.
	GetTh() antlr.Token

	// SetTh sets the th token.
	SetTh(antlr.Token)

	// Get_listaOpciones returns the _listaOpciones rule contexts.
	Get_listaOpciones() IListaOpcionesContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_listaOpciones sets the _listaOpciones rule contexts.
	Set_listaOpciones(IListaOpcionesContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetBrazo returns the brazo attribute.
	GetBrazo() instructionExpre.BrazoMatch

	// SetBrazo sets the brazo attribute.
	SetBrazo(instructionExpre.BrazoMatch)

	// IsMatchbrazo_expContext differentiates from other interfaces.
	IsMatchbrazo_expContext()
}

type Matchbrazo_expContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	brazo          instructionExpre.BrazoMatch
	_listaOpciones IListaOpcionesContext
	th             antlr.Token
	_expression    IExpressionContext
}

func NewEmptyMatchbrazo_expContext() *Matchbrazo_expContext {
	var p = new(Matchbrazo_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_matchbrazo_exp
	return p
}

func (*Matchbrazo_expContext) IsMatchbrazo_expContext() {}

func NewMatchbrazo_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Matchbrazo_expContext {
	var p = new(Matchbrazo_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_matchbrazo_exp

	return p
}

func (s *Matchbrazo_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Matchbrazo_expContext) GetTh() antlr.Token { return s.th }

func (s *Matchbrazo_expContext) SetTh(v antlr.Token) { s.th = v }

func (s *Matchbrazo_expContext) Get_listaOpciones() IListaOpcionesContext { return s._listaOpciones }

func (s *Matchbrazo_expContext) Get_expression() IExpressionContext { return s._expression }

func (s *Matchbrazo_expContext) Set_listaOpciones(v IListaOpcionesContext) { s._listaOpciones = v }

func (s *Matchbrazo_expContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Matchbrazo_expContext) GetBrazo() instructionExpre.BrazoMatch { return s.brazo }

func (s *Matchbrazo_expContext) SetBrazo(v instructionExpre.BrazoMatch) { s.brazo = v }

func (s *Matchbrazo_expContext) ListaOpciones() IListaOpcionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListaOpcionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListaOpcionesContext)
}

func (s *Matchbrazo_expContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Matchbrazo_expContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *Matchbrazo_expContext) MTHEN() antlr.TerminalNode {
	return s.GetToken(RustParMTHEN, 0)
}

func (s *Matchbrazo_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Matchbrazo_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Matchbrazo_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterMatchbrazo_exp(s)
	}
}

func (s *Matchbrazo_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitMatchbrazo_exp(s)
	}
}

func (p *RustPar) Matchbrazo_exp() (localctx IMatchbrazo_expContext) {
	this := p
	_ = this

	localctx = NewMatchbrazo_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, RustParRULE_matchbrazo_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(788)

		var _x = p.listaOpciones(0)

		localctx.(*Matchbrazo_expContext)._listaOpciones = _x
	}
	{
		p.SetState(789)

		var _m = p.Match(RustParMTHEN)

		localctx.(*Matchbrazo_expContext).th = _m
	}
	{
		p.SetState(790)

		var _x = p.expression(0)

		localctx.(*Matchbrazo_expContext)._expression = _x
	}
	{
		p.SetState(791)
		p.Match(RustParCOMA)
	}
	localctx.(*Matchbrazo_expContext).brazo = instructionExpre.NewBrazoMatch(localctx.(*Matchbrazo_expContext).Get_listaOpciones().GetLisop(), nil, nil, (func() int {
		if localctx.(*Matchbrazo_expContext).GetTh() == nil {
			return 0
		} else {
			return localctx.(*Matchbrazo_expContext).GetTh().GetLine()
		}
	}()), localctx.(*Matchbrazo_expContext).GetTh().GetColumn(), localctx.(*Matchbrazo_expContext).Get_expression().GetP())

	return localctx
}

// IListaOpcionesContext is an interface to support dynamic dispatch.
type IListaOpcionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetList returns the list rule contexts.
	GetList() IListaOpcionesContext

	// Get_primitivo returns the _primitivo rule contexts.
	Get_primitivo() IPrimitivoContext

	// SetList sets the list rule contexts.
	SetList(IListaOpcionesContext)

	// Set_primitivo sets the _primitivo rule contexts.
	Set_primitivo(IPrimitivoContext)

	// GetLisop returns the lisop attribute.
	GetLisop() *arrayList.List

	// SetLisop sets the lisop attribute.
	SetLisop(*arrayList.List)

	// IsListaOpcionesContext differentiates from other interfaces.
	IsListaOpcionesContext()
}

type ListaOpcionesContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	lisop      *arrayList.List
	list       IListaOpcionesContext
	_primitivo IPrimitivoContext
}

func NewEmptyListaOpcionesContext() *ListaOpcionesContext {
	var p = new(ListaOpcionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_listaOpciones
	return p
}

func (*ListaOpcionesContext) IsListaOpcionesContext() {}

func NewListaOpcionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListaOpcionesContext {
	var p = new(ListaOpcionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_listaOpciones

	return p
}

func (s *ListaOpcionesContext) GetParser() antlr.Parser { return s.parser }

func (s *ListaOpcionesContext) GetList() IListaOpcionesContext { return s.list }

func (s *ListaOpcionesContext) Get_primitivo() IPrimitivoContext { return s._primitivo }

func (s *ListaOpcionesContext) SetList(v IListaOpcionesContext) { s.list = v }

func (s *ListaOpcionesContext) Set_primitivo(v IPrimitivoContext) { s._primitivo = v }

func (s *ListaOpcionesContext) GetLisop() *arrayList.List { return s.lisop }

func (s *ListaOpcionesContext) SetLisop(v *arrayList.List) { s.lisop = v }

func (s *ListaOpcionesContext) Primitivo() IPrimitivoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitivoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitivoContext)
}

func (s *ListaOpcionesContext) MTOR() antlr.TerminalNode {
	return s.GetToken(RustParMTOR, 0)
}

func (s *ListaOpcionesContext) ListaOpciones() IListaOpcionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListaOpcionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListaOpcionesContext)
}

func (s *ListaOpcionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListaOpcionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListaOpcionesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterListaOpciones(s)
	}
}

func (s *ListaOpcionesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitListaOpciones(s)
	}
}

func (p *RustPar) ListaOpciones() (localctx IListaOpcionesContext) {
	return p.listaOpciones(0)
}

func (p *RustPar) listaOpciones(_p int) (localctx IListaOpcionesContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewListaOpcionesContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IListaOpcionesContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 86
	p.EnterRecursionRule(localctx, 86, RustParRULE_listaOpciones, _p)

	localctx.(*ListaOpcionesContext).lisop = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(795)

		var _x = p.Primitivo()

		localctx.(*ListaOpcionesContext)._primitivo = _x
	}

	localctx.(*ListaOpcionesContext).lisop.Add(localctx.(*ListaOpcionesContext).Get_primitivo().GetP())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(805)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewListaOpcionesContext(p, _parentctx, _parentState)
			localctx.(*ListaOpcionesContext).list = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_listaOpciones)
			p.SetState(798)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(799)
				p.Match(RustParMTOR)
			}
			{
				p.SetState(800)

				var _x = p.Primitivo()

				localctx.(*ListaOpcionesContext)._primitivo = _x
			}

			localctx.(*ListaOpcionesContext).GetList().GetLisop().Add(localctx.(*ListaOpcionesContext).Get_primitivo().GetP())
			localctx.(*ListaOpcionesContext).lisop = localctx.(*ListaOpcionesContext).GetList().GetLisop()

		}
		p.SetState(807)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())
	}

	return localctx
}

// IBloque_instContext is an interface to support dynamic dispatch.
type IBloque_instContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsBloque_instContext differentiates from other interfaces.
	IsBloque_instContext()
}

type Bloque_instContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	l              *arrayList.List
	_instrucciones IInstruccionesContext
}

func NewEmptyBloque_instContext() *Bloque_instContext {
	var p = new(Bloque_instContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_bloque_inst
	return p
}

func (*Bloque_instContext) IsBloque_instContext() {}

func NewBloque_instContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_instContext {
	var p = new(Bloque_instContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_bloque_inst

	return p
}

func (s *Bloque_instContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_instContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *Bloque_instContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *Bloque_instContext) GetL() *arrayList.List { return s.l }

func (s *Bloque_instContext) SetL(v *arrayList.List) { s.l = v }

func (s *Bloque_instContext) LLAVEIZQ() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEIZQ, 0)
}

func (s *Bloque_instContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *Bloque_instContext) LLAVEDER() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEDER, 0)
}

func (s *Bloque_instContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_instContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bloque_instContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterBloque_inst(s)
	}
}

func (s *Bloque_instContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitBloque_inst(s)
	}
}

func (p *RustPar) Bloque_inst() (localctx IBloque_instContext) {
	this := p
	_ = this

	localctx = NewBloque_instContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, RustParRULE_bloque_inst)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(816)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(808)
			p.Match(RustParLLAVEIZQ)
		}
		{
			p.SetState(809)

			var _x = p.Instrucciones()

			localctx.(*Bloque_instContext)._instrucciones = _x
		}
		{
			p.SetState(810)
			p.Match(RustParLLAVEDER)
		}
		localctx.(*Bloque_instContext).l = localctx.(*Bloque_instContext).Get_instrucciones().GetL()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(813)
			p.Match(RustParLLAVEIZQ)
		}
		{
			p.SetState(814)
			p.Match(RustParLLAVEDER)
		}
		localctx.(*Bloque_instContext).l = arrayList.New()

	}

	return localctx
}

// IBloque_expContext is an interface to support dynamic dispatch.
type IBloque_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsBloque_expContext differentiates from other interfaces.
	IsBloque_expContext()
}

type Bloque_expContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	p           interfaces.Expresion
	_expression IExpressionContext
}

func NewEmptyBloque_expContext() *Bloque_expContext {
	var p = new(Bloque_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_bloque_exp
	return p
}

func (*Bloque_expContext) IsBloque_expContext() {}

func NewBloque_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_expContext {
	var p = new(Bloque_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_bloque_exp

	return p
}

func (s *Bloque_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_expContext) Get_expression() IExpressionContext { return s._expression }

func (s *Bloque_expContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Bloque_expContext) GetP() interfaces.Expresion { return s.p }

func (s *Bloque_expContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Bloque_expContext) LLAVEIZQ() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEIZQ, 0)
}

func (s *Bloque_expContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Bloque_expContext) LLAVEDER() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEDER, 0)
}

func (s *Bloque_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bloque_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterBloque_exp(s)
	}
}

func (s *Bloque_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitBloque_exp(s)
	}
}

func (p *RustPar) Bloque_exp() (localctx IBloque_expContext) {
	this := p
	_ = this

	localctx = NewBloque_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, RustParRULE_bloque_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(818)
		p.Match(RustParLLAVEIZQ)
	}
	{
		p.SetState(819)

		var _x = p.expression(0)

		localctx.(*Bloque_expContext)._expression = _x
	}
	{
		p.SetState(820)
		p.Match(RustParLLAVEDER)
	}
	localctx.(*Bloque_expContext).p = localctx.(*Bloque_expContext).Get_expression().GetP()

	return localctx
}

// ITipos_varContext is an interface to support dynamic dispatch.
type ITipos_varContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTipo returns the tipo attribute.
	GetTipo() interfaces.TipoExpresion

	// SetTipo sets the tipo attribute.
	SetTipo(interfaces.TipoExpresion)

	// IsTipos_varContext differentiates from other interfaces.
	IsTipos_varContext()
}

type Tipos_varContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tipo   interfaces.TipoExpresion
}

func NewEmptyTipos_varContext() *Tipos_varContext {
	var p = new(Tipos_varContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_tipos_var
	return p
}

func (*Tipos_varContext) IsTipos_varContext() {}

func NewTipos_varContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tipos_varContext {
	var p = new(Tipos_varContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_tipos_var

	return p
}

func (s *Tipos_varContext) GetParser() antlr.Parser { return s.parser }

func (s *Tipos_varContext) GetTipo() interfaces.TipoExpresion { return s.tipo }

func (s *Tipos_varContext) SetTipo(v interfaces.TipoExpresion) { s.tipo = v }

func (s *Tipos_varContext) T_NUMBER() antlr.TerminalNode {
	return s.GetToken(RustParT_NUMBER, 0)
}

func (s *Tipos_varContext) T_STRING() antlr.TerminalNode {
	return s.GetToken(RustParT_STRING, 0)
}

func (s *Tipos_varContext) T_FLOAT() antlr.TerminalNode {
	return s.GetToken(RustParT_FLOAT, 0)
}

func (s *Tipos_varContext) T_BOOL() antlr.TerminalNode {
	return s.GetToken(RustParT_BOOL, 0)
}

func (s *Tipos_varContext) T_STR() antlr.TerminalNode {
	return s.GetToken(RustParT_STR, 0)
}

func (s *Tipos_varContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(RustParSTRUCT, 0)
}

func (s *Tipos_varContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tipos_varContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tipos_varContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterTipos_var(s)
	}
}

func (s *Tipos_varContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitTipos_var(s)
	}
}

func (p *RustPar) Tipos_var() (localctx ITipos_varContext) {
	this := p
	_ = this

	localctx = NewTipos_varContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, RustParRULE_tipos_var)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(835)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case RustParT_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(823)
			p.Match(RustParT_NUMBER)
		}
		localctx.(*Tipos_varContext).tipo = interfaces.INTEGER

	case RustParT_STRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(825)
			p.Match(RustParT_STRING)
		}
		localctx.(*Tipos_varContext).tipo = interfaces.STRING

	case RustParT_FLOAT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(827)
			p.Match(RustParT_FLOAT)
		}
		localctx.(*Tipos_varContext).tipo = interfaces.FLOAT

	case RustParT_BOOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(829)
			p.Match(RustParT_BOOL)
		}
		localctx.(*Tipos_varContext).tipo = interfaces.BOOLEAN

	case RustParT_STR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(831)
			p.Match(RustParT_STR)
		}
		localctx.(*Tipos_varContext).tipo = interfaces.STR

	case RustParSTRUCT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(833)
			p.Match(RustParSTRUCT)
		}
		localctx.(*Tipos_varContext).tipo = interfaces.STRUCT

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetE_ini returns the e_ini rule contexts.
	GetE_ini() IExpressionContext

	// Get_expr_arit returns the _expr_arit rule contexts.
	Get_expr_arit() IExpr_aritContext

	// GetVal returns the val rule contexts.
	GetVal() IExpressionContext

	// GetE_fin returns the e_fin rule contexts.
	GetE_fin() IExpressionContext

	// SetE_ini sets the e_ini rule contexts.
	SetE_ini(IExpressionContext)

	// Set_expr_arit sets the _expr_arit rule contexts.
	Set_expr_arit(IExpr_aritContext)

	// SetVal sets the val rule contexts.
	SetVal(IExpressionContext)

	// SetE_fin sets the e_fin rule contexts.
	SetE_fin(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	p          interfaces.Expresion
	e_ini      IExpressionContext
	_expr_arit IExpr_aritContext
	_ID        antlr.Token
	val        IExpressionContext
	e_fin      IExpressionContext
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Get_ID() antlr.Token { return s._ID }

func (s *ExpressionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *ExpressionContext) GetE_ini() IExpressionContext { return s.e_ini }

func (s *ExpressionContext) Get_expr_arit() IExpr_aritContext { return s._expr_arit }

func (s *ExpressionContext) GetVal() IExpressionContext { return s.val }

func (s *ExpressionContext) GetE_fin() IExpressionContext { return s.e_fin }

func (s *ExpressionContext) SetE_ini(v IExpressionContext) { s.e_ini = v }

func (s *ExpressionContext) Set_expr_arit(v IExpr_aritContext) { s._expr_arit = v }

func (s *ExpressionContext) SetVal(v IExpressionContext) { s.val = v }

func (s *ExpressionContext) SetE_fin(v IExpressionContext) { s.e_fin = v }

func (s *ExpressionContext) GetP() interfaces.Expresion { return s.p }

func (s *ExpressionContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *ExpressionContext) Expr_arit() IExpr_aritContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_aritContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_aritContext)
}

func (s *ExpressionContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *ExpressionContext) AllPUNTO() []antlr.TerminalNode {
	return s.GetTokens(RustParPUNTO)
}

func (s *ExpressionContext) PUNTO(i int) antlr.TerminalNode {
	return s.GetToken(RustParPUNTO, i)
}

func (s *ExpressionContext) CAPF() antlr.TerminalNode {
	return s.GetToken(RustParCAPF, 0)
}

func (s *ExpressionContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(RustParCONTAINS, 0)
}

func (s *ExpressionContext) PARIZQ() antlr.TerminalNode {
	return s.GetToken(RustParPARIZQ, 0)
}

func (s *ExpressionContext) AMP() antlr.TerminalNode {
	return s.GetToken(RustParAMP, 0)
}

func (s *ExpressionContext) PARDER() antlr.TerminalNode {
	return s.GetToken(RustParPARDER, 0)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *RustPar) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *RustPar) expression(_p int) (localctx IExpressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 94
	p.EnterRecursionRule(localctx, 94, RustParRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(854)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(838)

			var _x = p.expr_arit(0)

			localctx.(*ExpressionContext)._expr_arit = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_expr_arit().GetP()

	case 2:
		{
			p.SetState(841)

			var _m = p.Match(RustParID)

			localctx.(*ExpressionContext)._ID = _m
		}
		{
			p.SetState(842)
			p.Match(RustParPUNTO)
		}
		{
			p.SetState(843)
			p.Match(RustParCAPF)
		}
		localctx.(*ExpressionContext).p = expresion.NewCapacity((func() string {
			if localctx.(*ExpressionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ExpressionContext).Get_ID().GetText()
			}
		}()), (func() int {
			if localctx.(*ExpressionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpressionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_ID().GetColumn()
			}
		}()))

	case 3:
		{
			p.SetState(845)

			var _m = p.Match(RustParID)

			localctx.(*ExpressionContext)._ID = _m
		}
		{
			p.SetState(846)
			p.Match(RustParPUNTO)
		}
		{
			p.SetState(847)
			p.Match(RustParCONTAINS)
		}
		{
			p.SetState(848)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(849)
			p.Match(RustParAMP)
		}
		{
			p.SetState(850)

			var _x = p.expression(0)

			localctx.(*ExpressionContext).val = _x
		}
		{
			p.SetState(851)
			p.Match(RustParPARDER)
		}
		localctx.(*ExpressionContext).p = expresion.NewContains((func() string {
			if localctx.(*ExpressionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ExpressionContext).Get_ID().GetText()
			}
		}()), localctx.(*ExpressionContext).GetVal().GetP(), (func() int {
			if localctx.(*ExpressionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpressionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_ID().GetColumn()
			}
		}()))

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(864)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpressionContext(p, _parentctx, _parentState)
			localctx.(*ExpressionContext).e_ini = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_expression)
			p.SetState(856)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(857)
				p.Match(RustParPUNTO)
			}
			{
				p.SetState(858)
				p.Match(RustParPUNTO)
			}
			{
				p.SetState(859)

				var _x = p.expression(2)

				localctx.(*ExpressionContext).e_fin = _x
			}
			localctx.(*ExpressionContext).p = expresion.NewRangeF(localctx.(*ExpressionContext).GetE_ini().GetP(), localctx.(*ExpressionContext).GetE_fin().GetP(), (func() antlr.Token {
				if localctx.(*ExpressionContext).GetE_ini() == nil {
					return nil
				} else {
					return localctx.(*ExpressionContext).GetE_ini().GetStart()
				}
			}()).GetLine(), (func() antlr.Token {
				if localctx.(*ExpressionContext).GetE_ini() == nil {
					return nil
				} else {
					return localctx.(*ExpressionContext).GetE_ini().GetStart()
				}
			}()).GetColumn())

		}
		p.SetState(866)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_aritContext is an interface to support dynamic dispatch.
type IExpr_aritContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// Get_CORIZQ returns the _CORIZQ token.
	Get_CORIZQ() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Set_CORIZQ sets the _CORIZQ token.
	Set_CORIZQ(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetOpIz returns the opIz rule contexts.
	GetOpIz() IExpr_aritContext

	// GetOpU returns the opU rule contexts.
	GetOpU() IExpr_aritContext

	// GetOpDe returns the opDe rule contexts.
	GetOpDe() IExpr_aritContext

	// GetExp returns the exp rule contexts.
	GetExp() IExpressionContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// GetTam returns the tam rule contexts.
	GetTam() IExpressionContext

	// GetLive returns the live rule contexts.
	GetLive() IListParamsContext

	// Get_listParams returns the _listParams rule contexts.
	Get_listParams() IListParamsContext

	// Get_l_StructExp returns the _l_StructExp rule contexts.
	Get_l_StructExp() IL_StructExpContext

	// Get_primitivo returns the _primitivo rule contexts.
	Get_primitivo() IPrimitivoContext

	// Get_casteo returns the _casteo rule contexts.
	Get_casteo() ICasteoContext

	// Get_if_exp returns the _if_exp rule contexts.
	Get_if_exp() IIf_expContext

	// Get_match_sent returns the _match_sent rule contexts.
	Get_match_sent() IMatch_sentContext

	// Get_loopB returns the _loopB rule contexts.
	Get_loopB() ILoopBContext

	// Get_callFunction returns the _callFunction rule contexts.
	Get_callFunction() ICallFunctionContext

	// SetOpIz sets the opIz rule contexts.
	SetOpIz(IExpr_aritContext)

	// SetOpU sets the opU rule contexts.
	SetOpU(IExpr_aritContext)

	// SetOpDe sets the opDe rule contexts.
	SetOpDe(IExpr_aritContext)

	// SetExp sets the exp rule contexts.
	SetExp(IExpressionContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// SetTam sets the tam rule contexts.
	SetTam(IExpressionContext)

	// SetLive sets the live rule contexts.
	SetLive(IListParamsContext)

	// Set_listParams sets the _listParams rule contexts.
	Set_listParams(IListParamsContext)

	// Set_l_StructExp sets the _l_StructExp rule contexts.
	Set_l_StructExp(IL_StructExpContext)

	// Set_primitivo sets the _primitivo rule contexts.
	Set_primitivo(IPrimitivoContext)

	// Set_casteo sets the _casteo rule contexts.
	Set_casteo(ICasteoContext)

	// Set_if_exp sets the _if_exp rule contexts.
	Set_if_exp(IIf_expContext)

	// Set_match_sent sets the _match_sent rule contexts.
	Set_match_sent(IMatch_sentContext)

	// Set_loopB sets the _loopB rule contexts.
	Set_loopB(ILoopBContext)

	// Set_callFunction sets the _callFunction rule contexts.
	Set_callFunction(ICallFunctionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsExpr_aritContext differentiates from other interfaces.
	IsExpr_aritContext()
}

type Expr_aritContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	p             interfaces.Expresion
	opIz          IExpr_aritContext
	op            antlr.Token
	opU           IExpr_aritContext
	opDe          IExpr_aritContext
	_CORIZQ       antlr.Token
	exp           IExpressionContext
	_expression   IExpressionContext
	tam           IExpressionContext
	live          IListParamsContext
	_listParams   IListParamsContext
	_ID           antlr.Token
	_l_StructExp  IL_StructExpContext
	_primitivo    IPrimitivoContext
	_casteo       ICasteoContext
	_if_exp       IIf_expContext
	_match_sent   IMatch_sentContext
	_loopB        ILoopBContext
	_callFunction ICallFunctionContext
}

func NewEmptyExpr_aritContext() *Expr_aritContext {
	var p = new(Expr_aritContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_expr_arit
	return p
}

func (*Expr_aritContext) IsExpr_aritContext() {}

func NewExpr_aritContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_aritContext {
	var p = new(Expr_aritContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_expr_arit

	return p
}

func (s *Expr_aritContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_aritContext) GetOp() antlr.Token { return s.op }

func (s *Expr_aritContext) Get_CORIZQ() antlr.Token { return s._CORIZQ }

func (s *Expr_aritContext) Get_ID() antlr.Token { return s._ID }

func (s *Expr_aritContext) SetOp(v antlr.Token) { s.op = v }

func (s *Expr_aritContext) Set_CORIZQ(v antlr.Token) { s._CORIZQ = v }

func (s *Expr_aritContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Expr_aritContext) GetOpIz() IExpr_aritContext { return s.opIz }

func (s *Expr_aritContext) GetOpU() IExpr_aritContext { return s.opU }

func (s *Expr_aritContext) GetOpDe() IExpr_aritContext { return s.opDe }

func (s *Expr_aritContext) GetExp() IExpressionContext { return s.exp }

func (s *Expr_aritContext) Get_expression() IExpressionContext { return s._expression }

func (s *Expr_aritContext) GetTam() IExpressionContext { return s.tam }

func (s *Expr_aritContext) GetLive() IListParamsContext { return s.live }

func (s *Expr_aritContext) Get_listParams() IListParamsContext { return s._listParams }

func (s *Expr_aritContext) Get_l_StructExp() IL_StructExpContext { return s._l_StructExp }

func (s *Expr_aritContext) Get_primitivo() IPrimitivoContext { return s._primitivo }

func (s *Expr_aritContext) Get_casteo() ICasteoContext { return s._casteo }

func (s *Expr_aritContext) Get_if_exp() IIf_expContext { return s._if_exp }

func (s *Expr_aritContext) Get_match_sent() IMatch_sentContext { return s._match_sent }

func (s *Expr_aritContext) Get_loopB() ILoopBContext { return s._loopB }

func (s *Expr_aritContext) Get_callFunction() ICallFunctionContext { return s._callFunction }

func (s *Expr_aritContext) SetOpIz(v IExpr_aritContext) { s.opIz = v }

func (s *Expr_aritContext) SetOpU(v IExpr_aritContext) { s.opU = v }

func (s *Expr_aritContext) SetOpDe(v IExpr_aritContext) { s.opDe = v }

func (s *Expr_aritContext) SetExp(v IExpressionContext) { s.exp = v }

func (s *Expr_aritContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Expr_aritContext) SetTam(v IExpressionContext) { s.tam = v }

func (s *Expr_aritContext) SetLive(v IListParamsContext) { s.live = v }

func (s *Expr_aritContext) Set_listParams(v IListParamsContext) { s._listParams = v }

func (s *Expr_aritContext) Set_l_StructExp(v IL_StructExpContext) { s._l_StructExp = v }

func (s *Expr_aritContext) Set_primitivo(v IPrimitivoContext) { s._primitivo = v }

func (s *Expr_aritContext) Set_casteo(v ICasteoContext) { s._casteo = v }

func (s *Expr_aritContext) Set_if_exp(v IIf_expContext) { s._if_exp = v }

func (s *Expr_aritContext) Set_match_sent(v IMatch_sentContext) { s._match_sent = v }

func (s *Expr_aritContext) Set_loopB(v ILoopBContext) { s._loopB = v }

func (s *Expr_aritContext) Set_callFunction(v ICallFunctionContext) { s._callFunction = v }

func (s *Expr_aritContext) GetP() interfaces.Expresion { return s.p }

func (s *Expr_aritContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Expr_aritContext) SUB() antlr.TerminalNode {
	return s.GetToken(RustParSUB, 0)
}

func (s *Expr_aritContext) AllExpr_arit() []IExpr_aritContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpr_aritContext)(nil)).Elem())
	var tst = make([]IExpr_aritContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpr_aritContext)
		}
	}

	return tst
}

func (s *Expr_aritContext) Expr_arit(i int) IExpr_aritContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_aritContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpr_aritContext)
}

func (s *Expr_aritContext) T_NUMBER() antlr.TerminalNode {
	return s.GetToken(RustParT_NUMBER, 0)
}

func (s *Expr_aritContext) DOSPUNTO() antlr.TerminalNode {
	return s.GetToken(RustParDOSPUNTO, 0)
}

func (s *Expr_aritContext) PARIZQ() antlr.TerminalNode {
	return s.GetToken(RustParPARIZQ, 0)
}

func (s *Expr_aritContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *Expr_aritContext) PARDER() antlr.TerminalNode {
	return s.GetToken(RustParPARDER, 0)
}

func (s *Expr_aritContext) POW() antlr.TerminalNode {
	return s.GetToken(RustParPOW, 0)
}

func (s *Expr_aritContext) T_FLOAT() antlr.TerminalNode {
	return s.GetToken(RustParT_FLOAT, 0)
}

func (s *Expr_aritContext) POWF() antlr.TerminalNode {
	return s.GetToken(RustParPOWF, 0)
}

func (s *Expr_aritContext) NOT() antlr.TerminalNode {
	return s.GetToken(RustParNOT, 0)
}

func (s *Expr_aritContext) VEC() antlr.TerminalNode {
	return s.GetToken(RustParVEC, 0)
}

func (s *Expr_aritContext) CORIZQ() antlr.TerminalNode {
	return s.GetToken(RustParCORIZQ, 0)
}

func (s *Expr_aritContext) PTCOMA() antlr.TerminalNode {
	return s.GetToken(RustParPTCOMA, 0)
}

func (s *Expr_aritContext) CORDER() antlr.TerminalNode {
	return s.GetToken(RustParCORDER, 0)
}

func (s *Expr_aritContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Expr_aritContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expr_aritContext) ListParams() IListParamsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListParamsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListParamsContext)
}

func (s *Expr_aritContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *Expr_aritContext) LLAVEIZQ() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEIZQ, 0)
}

func (s *Expr_aritContext) L_StructExp() IL_StructExpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_StructExpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_StructExpContext)
}

func (s *Expr_aritContext) LLAVEDER() antlr.TerminalNode {
	return s.GetToken(RustParLLAVEDER, 0)
}

func (s *Expr_aritContext) Primitivo() IPrimitivoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitivoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitivoContext)
}

func (s *Expr_aritContext) Casteo() ICasteoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICasteoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICasteoContext)
}

func (s *Expr_aritContext) If_exp() IIf_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_expContext)
}

func (s *Expr_aritContext) Match_sent() IMatch_sentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_sentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_sentContext)
}

func (s *Expr_aritContext) LoopB() ILoopBContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopBContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopBContext)
}

func (s *Expr_aritContext) CallFunction() ICallFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFunctionContext)
}

func (s *Expr_aritContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(RustParPUNTO, 0)
}

func (s *Expr_aritContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(RustParREMOVE, 0)
}

func (s *Expr_aritContext) MUL() antlr.TerminalNode {
	return s.GetToken(RustParMUL, 0)
}

func (s *Expr_aritContext) DIV() antlr.TerminalNode {
	return s.GetToken(RustParDIV, 0)
}

func (s *Expr_aritContext) MOD() antlr.TerminalNode {
	return s.GetToken(RustParMOD, 0)
}

func (s *Expr_aritContext) ADD() antlr.TerminalNode {
	return s.GetToken(RustParADD, 0)
}

func (s *Expr_aritContext) MENOR() antlr.TerminalNode {
	return s.GetToken(RustParMENOR, 0)
}

func (s *Expr_aritContext) MENORIGUAL() antlr.TerminalNode {
	return s.GetToken(RustParMENORIGUAL, 0)
}

func (s *Expr_aritContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(RustParMAYOR, 0)
}

func (s *Expr_aritContext) MAYORIGUAL() antlr.TerminalNode {
	return s.GetToken(RustParMAYORIGUAL, 0)
}

func (s *Expr_aritContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(RustParIGUAL, 0)
}

func (s *Expr_aritContext) DISTINTO() antlr.TerminalNode {
	return s.GetToken(RustParDISTINTO, 0)
}

func (s *Expr_aritContext) AND() antlr.TerminalNode {
	return s.GetToken(RustParAND, 0)
}

func (s *Expr_aritContext) OR() antlr.TerminalNode {
	return s.GetToken(RustParOR, 0)
}

func (s *Expr_aritContext) LEN() antlr.TerminalNode {
	return s.GetToken(RustParLEN, 0)
}

func (s *Expr_aritContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_aritContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expr_aritContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterExpr_arit(s)
	}
}

func (s *Expr_aritContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitExpr_arit(s)
	}
}

func (p *RustPar) Expr_arit() (localctx IExpr_aritContext) {
	return p.expr_arit(0)
}

func (p *RustPar) expr_arit(_p int) (localctx IExpr_aritContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_aritContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_aritContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 96
	p.EnterRecursionRule(localctx, 96, RustParRULE_expr_arit, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(959)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(868)

			var _m = p.Match(RustParSUB)

			localctx.(*Expr_aritContext).op = _m
		}
		{
			p.SetState(869)

			var _x = p.expr_arit(23)

			localctx.(*Expr_aritContext).opU = _x
		}
		localctx.(*Expr_aritContext).p = expresion.NewOperacion(localctx.(*Expr_aritContext).GetOpU().GetP(), "-", nil, true, (func() int {
			if localctx.(*Expr_aritContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).GetOp().GetLine()
			}
		}()), localctx.(*Expr_aritContext).GetOp().GetColumn())

	case 2:
		{
			p.SetState(872)
			p.Match(RustParT_NUMBER)
		}
		{
			p.SetState(873)
			p.Match(RustParDOSPUNTO)
		}
		{
			p.SetState(874)

			var _m = p.Match(RustParPOW)

			localctx.(*Expr_aritContext).op = _m
		}
		{
			p.SetState(875)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(876)

			var _x = p.expr_arit(0)

			localctx.(*Expr_aritContext).opIz = _x
		}
		{
			p.SetState(877)
			p.Match(RustParCOMA)
		}
		{
			p.SetState(878)

			var _x = p.expr_arit(0)

			localctx.(*Expr_aritContext).opDe = _x
		}
		{
			p.SetState(879)
			p.Match(RustParPARDER)
		}
		localctx.(*Expr_aritContext).p = expresion.NewOperacion(localctx.(*Expr_aritContext).GetOpIz().GetP(), (func() string {
			if localctx.(*Expr_aritContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*Expr_aritContext).GetOp().GetText()
			}
		}()), localctx.(*Expr_aritContext).GetOpDe().GetP(), false, (func() int {
			if localctx.(*Expr_aritContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).GetOp().GetLine()
			}
		}()), localctx.(*Expr_aritContext).GetOp().GetColumn())

	case 3:
		{
			p.SetState(882)
			p.Match(RustParT_FLOAT)
		}
		{
			p.SetState(883)
			p.Match(RustParDOSPUNTO)
		}
		{
			p.SetState(884)

			var _m = p.Match(RustParPOWF)

			localctx.(*Expr_aritContext).op = _m
		}
		{
			p.SetState(885)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(886)

			var _x = p.expr_arit(0)

			localctx.(*Expr_aritContext).opIz = _x
		}
		{
			p.SetState(887)
			p.Match(RustParCOMA)
		}
		{
			p.SetState(888)

			var _x = p.expr_arit(0)

			localctx.(*Expr_aritContext).opDe = _x
		}
		{
			p.SetState(889)
			p.Match(RustParPARDER)
		}
		localctx.(*Expr_aritContext).p = expresion.NewOperacion(localctx.(*Expr_aritContext).GetOpIz().GetP(), (func() string {
			if localctx.(*Expr_aritContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*Expr_aritContext).GetOp().GetText()
			}
		}()), localctx.(*Expr_aritContext).GetOpDe().GetP(), false, (func() int {
			if localctx.(*Expr_aritContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).GetOp().GetLine()
			}
		}()), localctx.(*Expr_aritContext).GetOp().GetColumn())

	case 4:
		{
			p.SetState(892)

			var _m = p.Match(RustParNOT)

			localctx.(*Expr_aritContext).op = _m
		}
		{
			p.SetState(893)

			var _x = p.expr_arit(16)

			localctx.(*Expr_aritContext).opU = _x
		}
		localctx.(*Expr_aritContext).p = expresion.NewOperacion(localctx.(*Expr_aritContext).GetOpU().GetP(), "!", nil, true, (func() int {
			if localctx.(*Expr_aritContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).GetOp().GetLine()
			}
		}()), localctx.(*Expr_aritContext).GetOp().GetColumn())

	case 5:
		{
			p.SetState(896)
			p.Match(RustParVEC)
		}
		{
			p.SetState(897)

			var _m = p.Match(RustParCORIZQ)

			localctx.(*Expr_aritContext)._CORIZQ = _m
		}
		{
			p.SetState(898)

			var _x = p.expression(0)

			localctx.(*Expr_aritContext).exp = _x
			localctx.(*Expr_aritContext)._expression = _x
		}
		{
			p.SetState(899)
			p.Match(RustParPTCOMA)
		}
		{
			p.SetState(900)

			var _x = p.expression(0)

			localctx.(*Expr_aritContext).tam = _x
			localctx.(*Expr_aritContext)._expression = _x
		}
		{
			p.SetState(901)
			p.Match(RustParCORDER)
		}
		localctx.(*Expr_aritContext).p = expresion.NewVector(nil, localctx.(*Expr_aritContext).GetExp().GetP(), localctx.(*Expr_aritContext).GetTam().GetP(), 2, (func() int {
			if localctx.(*Expr_aritContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_CORIZQ().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expr_aritContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_CORIZQ().GetColumn()
			}
		}()))

	case 6:
		{
			p.SetState(904)
			p.Match(RustParVEC)
		}
		{
			p.SetState(905)

			var _m = p.Match(RustParCORIZQ)

			localctx.(*Expr_aritContext)._CORIZQ = _m
		}
		{
			p.SetState(906)

			var _x = p.listParams(0)

			localctx.(*Expr_aritContext).live = _x
			localctx.(*Expr_aritContext)._listParams = _x
		}
		{
			p.SetState(907)
			p.Match(RustParCORDER)
		}
		localctx.(*Expr_aritContext).p = expresion.NewVector(localctx.(*Expr_aritContext).GetLive().GetL_e(), nil, nil, 1, (func() int {
			if localctx.(*Expr_aritContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_CORIZQ().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expr_aritContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_CORIZQ().GetColumn()
			}
		}()))

	case 7:
		{
			p.SetState(910)

			var _m = p.Match(RustParCORIZQ)

			localctx.(*Expr_aritContext)._CORIZQ = _m
		}
		{
			p.SetState(911)

			var _x = p.expression(0)

			localctx.(*Expr_aritContext).exp = _x
			localctx.(*Expr_aritContext)._expression = _x
		}
		{
			p.SetState(912)
			p.Match(RustParPTCOMA)
		}
		{
			p.SetState(913)

			var _x = p.expression(0)

			localctx.(*Expr_aritContext).tam = _x
			localctx.(*Expr_aritContext)._expression = _x
		}
		{
			p.SetState(914)
			p.Match(RustParCORDER)
		}
		localctx.(*Expr_aritContext).p = expresion.NewArray(nil, localctx.(*Expr_aritContext).GetExp().GetP(), localctx.(*Expr_aritContext).GetTam().GetP(), 2, (func() int {
			if localctx.(*Expr_aritContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_CORIZQ().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expr_aritContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_CORIZQ().GetColumn()
			}
		}()))

	case 8:
		{
			p.SetState(917)

			var _m = p.Match(RustParCORIZQ)

			localctx.(*Expr_aritContext)._CORIZQ = _m
		}
		{
			p.SetState(918)

			var _x = p.listParams(0)

			localctx.(*Expr_aritContext)._listParams = _x
		}
		{
			p.SetState(919)
			p.Match(RustParCORDER)
		}
		localctx.(*Expr_aritContext).p = expresion.NewArray(localctx.(*Expr_aritContext).Get_listParams().GetL_e(), nil, nil, 1, (func() int {
			if localctx.(*Expr_aritContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_CORIZQ().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expr_aritContext).Get_CORIZQ() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_CORIZQ().GetColumn()
			}
		}()))

	case 9:
		{
			p.SetState(922)

			var _m = p.Match(RustParID)

			localctx.(*Expr_aritContext)._ID = _m
		}
		{
			p.SetState(923)
			p.Match(RustParLLAVEIZQ)
		}
		{
			p.SetState(924)

			var _x = p.l_StructExp(0)

			localctx.(*Expr_aritContext)._l_StructExp = _x
		}
		{
			p.SetState(925)
			p.Match(RustParLLAVEDER)
		}
		localctx.(*Expr_aritContext).p = instructionExpre.NewStructExpre((func() string {
			if localctx.(*Expr_aritContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Expr_aritContext).Get_ID().GetText()
			}
		}()), localctx.(*Expr_aritContext).Get_l_StructExp().GetL(), (func() int {
			if localctx.(*Expr_aritContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expr_aritContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_ID().GetColumn()
			}
		}()))

	case 10:
		{
			p.SetState(928)

			var _x = p.Primitivo()

			localctx.(*Expr_aritContext)._primitivo = _x
		}
		localctx.(*Expr_aritContext).p = localctx.(*Expr_aritContext).Get_primitivo().GetP()

	case 11:
		{
			p.SetState(931)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(932)

			var _x = p.expression(0)

			localctx.(*Expr_aritContext)._expression = _x
		}
		{
			p.SetState(933)
			p.Match(RustParPARDER)
		}
		localctx.(*Expr_aritContext).p = localctx.(*Expr_aritContext).Get_expression().GetP()

	case 12:
		{
			p.SetState(936)

			var _x = p.Casteo()

			localctx.(*Expr_aritContext)._casteo = _x
		}
		localctx.(*Expr_aritContext).p = localctx.(*Expr_aritContext).Get_casteo().GetP()

	case 13:
		{
			p.SetState(939)

			var _x = p.If_exp()

			localctx.(*Expr_aritContext)._if_exp = _x
		}
		localctx.(*Expr_aritContext).p = localctx.(*Expr_aritContext).Get_if_exp().GetP()

	case 14:
		{
			p.SetState(942)

			var _x = p.Match_sent()

			localctx.(*Expr_aritContext)._match_sent = _x
		}
		localctx.(*Expr_aritContext).p = localctx.(*Expr_aritContext).Get_match_sent().GetP()

	case 15:
		{
			p.SetState(945)

			var _x = p.LoopB()

			localctx.(*Expr_aritContext)._loopB = _x
		}
		localctx.(*Expr_aritContext).p = localctx.(*Expr_aritContext).Get_loopB().GetP()

	case 16:
		{
			p.SetState(948)

			var _x = p.CallFunction()

			localctx.(*Expr_aritContext)._callFunction = _x
		}
		localctx.(*Expr_aritContext).p = localctx.(*Expr_aritContext).Get_callFunction().GetP()

	case 17:
		{
			p.SetState(951)

			var _m = p.Match(RustParID)

			localctx.(*Expr_aritContext)._ID = _m
		}
		{
			p.SetState(952)
			p.Match(RustParPUNTO)
		}
		{
			p.SetState(953)
			p.Match(RustParREMOVE)
		}
		{
			p.SetState(954)
			p.Match(RustParPARIZQ)
		}
		{
			p.SetState(955)

			var _x = p.expression(0)

			localctx.(*Expr_aritContext)._expression = _x
		}
		{
			p.SetState(956)
			p.Match(RustParPARDER)
		}
		localctx.(*Expr_aritContext).p = instructionExpre.NewRemove((func() string {
			if localctx.(*Expr_aritContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Expr_aritContext).Get_ID().GetText()
			}
		}()), localctx.(*Expr_aritContext).Get_expression().GetP(), (func() int {
			if localctx.(*Expr_aritContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expr_aritContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Expr_aritContext).Get_ID().GetColumn()
			}
		}()))

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(992)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(990)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpr_aritContext(p, _parentctx, _parentState)
				localctx.(*Expr_aritContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_expr_arit)
				p.SetState(961)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(962)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_aritContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-60)&-(0x1f+1)) == 0 && ((1<<uint((_la-60)))&((1<<(RustParMUL-60))|(1<<(RustParDIV-60))|(1<<(RustParMOD-60)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_aritContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(963)

					var _x = p.expr_arit(21)

					localctx.(*Expr_aritContext).opDe = _x
				}
				localctx.(*Expr_aritContext).p = expresion.NewOperacion(localctx.(*Expr_aritContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetText()
					}
				}()), localctx.(*Expr_aritContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetLine()
					}
				}()), localctx.(*Expr_aritContext).GetOp().GetColumn())

			case 2:
				localctx = NewExpr_aritContext(p, _parentctx, _parentState)
				localctx.(*Expr_aritContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_expr_arit)
				p.SetState(966)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(967)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_aritContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == RustParADD || _la == RustParSUB) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_aritContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(968)

					var _x = p.expr_arit(19)

					localctx.(*Expr_aritContext).opDe = _x
				}
				localctx.(*Expr_aritContext).p = expresion.NewOperacion(localctx.(*Expr_aritContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetText()
					}
				}()), localctx.(*Expr_aritContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetLine()
					}
				}()), localctx.(*Expr_aritContext).GetOp().GetColumn())

			case 3:
				localctx = NewExpr_aritContext(p, _parentctx, _parentState)
				localctx.(*Expr_aritContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_expr_arit)
				p.SetState(971)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(972)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_aritContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(RustParDISTINTO-54))|(1<<(RustParIGUAL-54))|(1<<(RustParMAYORIGUAL-54))|(1<<(RustParMENORIGUAL-54))|(1<<(RustParMAYOR-54))|(1<<(RustParMENOR-54)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_aritContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(973)

					var _x = p.expr_arit(18)

					localctx.(*Expr_aritContext).opDe = _x
				}
				localctx.(*Expr_aritContext).p = expresion.NewOperacion(localctx.(*Expr_aritContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetText()
					}
				}()), localctx.(*Expr_aritContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetLine()
					}
				}()), localctx.(*Expr_aritContext).GetOp().GetColumn())

			case 4:
				localctx = NewExpr_aritContext(p, _parentctx, _parentState)
				localctx.(*Expr_aritContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_expr_arit)
				p.SetState(976)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(977)

					var _m = p.Match(RustParAND)

					localctx.(*Expr_aritContext).op = _m
				}
				{
					p.SetState(978)

					var _x = p.expr_arit(16)

					localctx.(*Expr_aritContext).opDe = _x
				}
				localctx.(*Expr_aritContext).p = expresion.NewOperacion(localctx.(*Expr_aritContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetText()
					}
				}()), localctx.(*Expr_aritContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetLine()
					}
				}()), localctx.(*Expr_aritContext).GetOp().GetColumn())

			case 5:
				localctx = NewExpr_aritContext(p, _parentctx, _parentState)
				localctx.(*Expr_aritContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_expr_arit)
				p.SetState(981)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(982)

					var _m = p.Match(RustParOR)

					localctx.(*Expr_aritContext).op = _m
				}
				{
					p.SetState(983)

					var _x = p.expr_arit(15)

					localctx.(*Expr_aritContext).opDe = _x
				}
				localctx.(*Expr_aritContext).p = expresion.NewOperacion(localctx.(*Expr_aritContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetText()
					}
				}()), localctx.(*Expr_aritContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expr_aritContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expr_aritContext).GetOp().GetLine()
					}
				}()), localctx.(*Expr_aritContext).GetOp().GetColumn())

			case 6:
				localctx = NewExpr_aritContext(p, _parentctx, _parentState)
				localctx.(*Expr_aritContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_expr_arit)
				p.SetState(986)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(987)
					p.Match(RustParPUNTO)
				}
				{
					p.SetState(988)
					p.Match(RustParLEN)
				}
				localctx.(*Expr_aritContext).p = expresion.NewLen(localctx.(*Expr_aritContext).GetOpIz().GetP(), (func() antlr.Token {
					if localctx.(*Expr_aritContext).GetOpIz() == nil {
						return nil
					} else {
						return localctx.(*Expr_aritContext).GetOpIz().GetStart()
					}
				}()).GetLine(), (func() antlr.Token {
					if localctx.(*Expr_aritContext).GetOpIz() == nil {
						return nil
					} else {
						return localctx.(*Expr_aritContext).GetOpIz().GetStart()
					}
				}()).GetColumn())

			}

		}
		p.SetState(994)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())
	}

	return localctx
}

// ICasteoContext is an interface to support dynamic dispatch.
type ICasteoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PARIZQ returns the _PARIZQ token.
	Get_PARIZQ() antlr.Token

	// Set_PARIZQ sets the _PARIZQ token.
	Set_PARIZQ(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// GetTypec returns the typec rule contexts.
	GetTypec() ITipo_castContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// SetTypec sets the typec rule contexts.
	SetTypec(ITipo_castContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsCasteoContext differentiates from other interfaces.
	IsCasteoContext()
}

type CasteoContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	p           interfaces.Expresion
	_PARIZQ     antlr.Token
	_expression IExpressionContext
	typec       ITipo_castContext
}

func NewEmptyCasteoContext() *CasteoContext {
	var p = new(CasteoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_casteo
	return p
}

func (*CasteoContext) IsCasteoContext() {}

func NewCasteoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CasteoContext {
	var p = new(CasteoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_casteo

	return p
}

func (s *CasteoContext) GetParser() antlr.Parser { return s.parser }

func (s *CasteoContext) Get_PARIZQ() antlr.Token { return s._PARIZQ }

func (s *CasteoContext) Set_PARIZQ(v antlr.Token) { s._PARIZQ = v }

func (s *CasteoContext) Get_expression() IExpressionContext { return s._expression }

func (s *CasteoContext) GetTypec() ITipo_castContext { return s.typec }

func (s *CasteoContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *CasteoContext) SetTypec(v ITipo_castContext) { s.typec = v }

func (s *CasteoContext) GetP() interfaces.Expresion { return s.p }

func (s *CasteoContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *CasteoContext) PARIZQ() antlr.TerminalNode {
	return s.GetToken(RustParPARIZQ, 0)
}

func (s *CasteoContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CasteoContext) AS() antlr.TerminalNode {
	return s.GetToken(RustParAS, 0)
}

func (s *CasteoContext) PARDER() antlr.TerminalNode {
	return s.GetToken(RustParPARDER, 0)
}

func (s *CasteoContext) Tipo_cast() ITipo_castContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_castContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_castContext)
}

func (s *CasteoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CasteoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CasteoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterCasteo(s)
	}
}

func (s *CasteoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitCasteo(s)
	}
}

func (p *RustPar) Casteo() (localctx ICasteoContext) {
	this := p
	_ = this

	localctx = NewCasteoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, RustParRULE_casteo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(995)

		var _m = p.Match(RustParPARIZQ)

		localctx.(*CasteoContext)._PARIZQ = _m
	}
	{
		p.SetState(996)

		var _x = p.expression(0)

		localctx.(*CasteoContext)._expression = _x
	}
	{
		p.SetState(997)
		p.Match(RustParAS)
	}
	{
		p.SetState(998)

		var _x = p.Tipo_cast()

		localctx.(*CasteoContext).typec = _x
	}
	{
		p.SetState(999)
		p.Match(RustParPARDER)
	}
	localctx.(*CasteoContext).p = expresion.NewCasteo(localctx.(*CasteoContext).Get_expression().GetP(), localctx.(*CasteoContext).GetTypec().GetTc(), (func() int {
		if localctx.(*CasteoContext).Get_PARIZQ() == nil {
			return 0
		} else {
			return localctx.(*CasteoContext).Get_PARIZQ().GetLine()
		}
	}()), localctx.(*CasteoContext).Get_PARIZQ().GetColumn())

	return localctx
}

// ITipo_castContext is an interface to support dynamic dispatch.
type ITipo_castContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTc returns the tc attribute.
	GetTc() interfaces.TipoExpresion

	// SetTc sets the tc attribute.
	SetTc(interfaces.TipoExpresion)

	// IsTipo_castContext differentiates from other interfaces.
	IsTipo_castContext()
}

type Tipo_castContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tc     interfaces.TipoExpresion
}

func NewEmptyTipo_castContext() *Tipo_castContext {
	var p = new(Tipo_castContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_tipo_cast
	return p
}

func (*Tipo_castContext) IsTipo_castContext() {}

func NewTipo_castContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tipo_castContext {
	var p = new(Tipo_castContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_tipo_cast

	return p
}

func (s *Tipo_castContext) GetParser() antlr.Parser { return s.parser }

func (s *Tipo_castContext) GetTc() interfaces.TipoExpresion { return s.tc }

func (s *Tipo_castContext) SetTc(v interfaces.TipoExpresion) { s.tc = v }

func (s *Tipo_castContext) T_FLOAT() antlr.TerminalNode {
	return s.GetToken(RustParT_FLOAT, 0)
}

func (s *Tipo_castContext) T_NUMBER() antlr.TerminalNode {
	return s.GetToken(RustParT_NUMBER, 0)
}

func (s *Tipo_castContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tipo_castContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tipo_castContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterTipo_cast(s)
	}
}

func (s *Tipo_castContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitTipo_cast(s)
	}
}

func (p *RustPar) Tipo_cast() (localctx ITipo_castContext) {
	this := p
	_ = this

	localctx = NewTipo_castContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, RustParRULE_tipo_cast)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1006)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case RustParT_FLOAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1002)
			p.Match(RustParT_FLOAT)
		}
		localctx.(*Tipo_castContext).tc = interfaces.FLOAT

	case RustParT_NUMBER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1004)
			p.Match(RustParT_NUMBER)
		}
		localctx.(*Tipo_castContext).tc = interfaces.INTEGER

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IL_StructExpContext is an interface to support dynamic dispatch.
type IL_StructExpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetList returns the list rule contexts.
	GetList() IL_StructExpContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetList sets the list rule contexts.
	SetList(IL_StructExpContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsL_StructExpContext differentiates from other interfaces.
	IsL_StructExpContext()
}

type L_StructExpContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	l           *arrayList.List
	list        IL_StructExpContext
	_ID         antlr.Token
	_expression IExpressionContext
}

func NewEmptyL_StructExpContext() *L_StructExpContext {
	var p = new(L_StructExpContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_l_StructExp
	return p
}

func (*L_StructExpContext) IsL_StructExpContext() {}

func NewL_StructExpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *L_StructExpContext {
	var p = new(L_StructExpContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_l_StructExp

	return p
}

func (s *L_StructExpContext) GetParser() antlr.Parser { return s.parser }

func (s *L_StructExpContext) Get_ID() antlr.Token { return s._ID }

func (s *L_StructExpContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *L_StructExpContext) GetList() IL_StructExpContext { return s.list }

func (s *L_StructExpContext) Get_expression() IExpressionContext { return s._expression }

func (s *L_StructExpContext) SetList(v IL_StructExpContext) { s.list = v }

func (s *L_StructExpContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *L_StructExpContext) GetL() *arrayList.List { return s.l }

func (s *L_StructExpContext) SetL(v *arrayList.List) { s.l = v }

func (s *L_StructExpContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *L_StructExpContext) DPUNTO2() antlr.TerminalNode {
	return s.GetToken(RustParDPUNTO2, 0)
}

func (s *L_StructExpContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *L_StructExpContext) COMA() antlr.TerminalNode {
	return s.GetToken(RustParCOMA, 0)
}

func (s *L_StructExpContext) L_StructExp() IL_StructExpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_StructExpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_StructExpContext)
}

func (s *L_StructExpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *L_StructExpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *L_StructExpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterL_StructExp(s)
	}
}

func (s *L_StructExpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitL_StructExp(s)
	}
}

func (p *RustPar) L_StructExp() (localctx IL_StructExpContext) {
	return p.l_StructExp(0)
}

func (p *RustPar) l_StructExp(_p int) (localctx IL_StructExpContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewL_StructExpContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IL_StructExpContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 102
	p.EnterRecursionRule(localctx, 102, RustParRULE_l_StructExp, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1009)

		var _m = p.Match(RustParID)

		localctx.(*L_StructExpContext)._ID = _m
	}
	{
		p.SetState(1010)
		p.Match(RustParDPUNTO2)
	}
	{
		p.SetState(1011)

		var _x = p.expression(0)

		localctx.(*L_StructExpContext)._expression = _x
	}

	Str_ep := instructionExpre.NewStructContenido((func() string {
		if localctx.(*L_StructExpContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*L_StructExpContext).Get_ID().GetText()
		}
	}()), localctx.(*L_StructExpContext).Get_expression().GetP())
	localctx.(*L_StructExpContext).SetL(arrayList.New())
	localctx.(*L_StructExpContext).l.Add(Str_ep)

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1023)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewL_StructExpContext(p, _parentctx, _parentState)
			localctx.(*L_StructExpContext).list = _prevctx
			p.PushNewRecursionContext(localctx, _startState, RustParRULE_l_StructExp)
			p.SetState(1014)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1015)
				p.Match(RustParCOMA)
			}
			{
				p.SetState(1016)

				var _m = p.Match(RustParID)

				localctx.(*L_StructExpContext)._ID = _m
			}
			{
				p.SetState(1017)
				p.Match(RustParDPUNTO2)
			}
			{
				p.SetState(1018)

				var _x = p.expression(0)

				localctx.(*L_StructExpContext)._expression = _x
			}

			Str_ep := instructionExpre.NewStructContenido((func() string {
				if localctx.(*L_StructExpContext).Get_ID() == nil {
					return ""
				} else {
					return localctx.(*L_StructExpContext).Get_ID().GetText()
				}
			}()), localctx.(*L_StructExpContext).Get_expression().GetP())
			localctx.(*L_StructExpContext).GetList().GetL().Add(Str_ep)
			localctx.(*L_StructExpContext).SetL(localctx.(*L_StructExpContext).GetList().GetL())

		}
		p.SetState(1025)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimitivoContext is an interface to support dynamic dispatch.
type IPrimitivoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_NUMBER returns the _NUMBER token.
	Get_NUMBER() antlr.Token

	// Get_FLOAT returns the _FLOAT token.
	Get_FLOAT() antlr.Token

	// Get_TRUE returns the _TRUE token.
	Get_TRUE() antlr.Token

	// Get_FALSE returns the _FALSE token.
	Get_FALSE() antlr.Token

	// Set_NUMBER sets the _NUMBER token.
	Set_NUMBER(antlr.Token)

	// Set_FLOAT sets the _FLOAT token.
	Set_FLOAT(antlr.Token)

	// Set_TRUE sets the _TRUE token.
	Set_TRUE(antlr.Token)

	// Set_FALSE sets the _FALSE token.
	Set_FALSE(antlr.Token)

	// Get_strings returns the _strings rule contexts.
	Get_strings() IStringsContext

	// GetList returns the list rule contexts.
	GetList() IListIDArrayContext

	// Set_strings sets the _strings rule contexts.
	Set_strings(IStringsContext)

	// SetList sets the list rule contexts.
	SetList(IListIDArrayContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsPrimitivoContext differentiates from other interfaces.
	IsPrimitivoContext()
}

type PrimitivoContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	p        interfaces.Expresion
	_NUMBER  antlr.Token
	_FLOAT   antlr.Token
	_strings IStringsContext
	_TRUE    antlr.Token
	_FALSE   antlr.Token
	list     IListIDArrayContext
}

func NewEmptyPrimitivoContext() *PrimitivoContext {
	var p = new(PrimitivoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_primitivo
	return p
}

func (*PrimitivoContext) IsPrimitivoContext() {}

func NewPrimitivoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitivoContext {
	var p = new(PrimitivoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_primitivo

	return p
}

func (s *PrimitivoContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitivoContext) Get_NUMBER() antlr.Token { return s._NUMBER }

func (s *PrimitivoContext) Get_FLOAT() antlr.Token { return s._FLOAT }

func (s *PrimitivoContext) Get_TRUE() antlr.Token { return s._TRUE }

func (s *PrimitivoContext) Get_FALSE() antlr.Token { return s._FALSE }

func (s *PrimitivoContext) Set_NUMBER(v antlr.Token) { s._NUMBER = v }

func (s *PrimitivoContext) Set_FLOAT(v antlr.Token) { s._FLOAT = v }

func (s *PrimitivoContext) Set_TRUE(v antlr.Token) { s._TRUE = v }

func (s *PrimitivoContext) Set_FALSE(v antlr.Token) { s._FALSE = v }

func (s *PrimitivoContext) Get_strings() IStringsContext { return s._strings }

func (s *PrimitivoContext) GetList() IListIDArrayContext { return s.list }

func (s *PrimitivoContext) Set_strings(v IStringsContext) { s._strings = v }

func (s *PrimitivoContext) SetList(v IListIDArrayContext) { s.list = v }

func (s *PrimitivoContext) GetP() interfaces.Expresion { return s.p }

func (s *PrimitivoContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *PrimitivoContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(RustParNUMBER, 0)
}

func (s *PrimitivoContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(RustParFLOAT, 0)
}

func (s *PrimitivoContext) Strings() IStringsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringsContext)
}

func (s *PrimitivoContext) TRUE() antlr.TerminalNode {
	return s.GetToken(RustParTRUE, 0)
}

func (s *PrimitivoContext) FALSE() antlr.TerminalNode {
	return s.GetToken(RustParFALSE, 0)
}

func (s *PrimitivoContext) ListIDArray() IListIDArrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListIDArrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListIDArrayContext)
}

func (s *PrimitivoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitivoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitivoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterPrimitivo(s)
	}
}

func (s *PrimitivoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitPrimitivo(s)
	}
}

func (p *RustPar) Primitivo() (localctx IPrimitivoContext) {
	this := p
	_ = this

	localctx = NewPrimitivoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, RustParRULE_primitivo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1040)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case RustParNUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1026)

			var _m = p.Match(RustParNUMBER)

			localctx.(*PrimitivoContext)._NUMBER = _m
		}

		num, err := strconv.Atoi((func() string {
			if localctx.(*PrimitivoContext).Get_NUMBER() == nil {
				return ""
			} else {
				return localctx.(*PrimitivoContext).Get_NUMBER().GetText()
			}
		}()))
		if err != nil {
			fmt.Println(err)
		}
		localctx.(*PrimitivoContext).p = expresion.NewPrimitivo(num, interfaces.INTEGER, (func() int {
			if localctx.(*PrimitivoContext).Get_NUMBER() == nil {
				return 0
			} else {
				return localctx.(*PrimitivoContext).Get_NUMBER().GetLine()
			}
		}()), localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())

	case RustParFLOAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1028)

			var _m = p.Match(RustParFLOAT)

			localctx.(*PrimitivoContext)._FLOAT = _m
		}

		num, err := strconv.ParseFloat((func() string {
			if localctx.(*PrimitivoContext).Get_FLOAT() == nil {
				return ""
			} else {
				return localctx.(*PrimitivoContext).Get_FLOAT().GetText()
			}
		}()), 64)
		if err != nil {
			fmt.Println(err)
		}
		localctx.(*PrimitivoContext).p = expresion.NewPrimitivo(num, interfaces.FLOAT, (func() int {
			if localctx.(*PrimitivoContext).Get_FLOAT() == nil {
				return 0
			} else {
				return localctx.(*PrimitivoContext).Get_FLOAT().GetLine()
			}
		}()), localctx.(*PrimitivoContext).Get_FLOAT().GetColumn())

	case RustParSTRING, RustParAMP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1030)

			var _x = p.Strings()

			localctx.(*PrimitivoContext)._strings = _x
		}
		localctx.(*PrimitivoContext).p = localctx.(*PrimitivoContext).Get_strings().GetP()

	case RustParTRUE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1033)

			var _m = p.Match(RustParTRUE)

			localctx.(*PrimitivoContext)._TRUE = _m
		}
		localctx.(*PrimitivoContext).p = expresion.NewPrimitivo(true, interfaces.BOOLEAN, (func() int {
			if localctx.(*PrimitivoContext).Get_TRUE() == nil {
				return 0
			} else {
				return localctx.(*PrimitivoContext).Get_TRUE().GetLine()
			}
		}()), localctx.(*PrimitivoContext).Get_TRUE().GetColumn())

	case RustParFALSE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1035)

			var _m = p.Match(RustParFALSE)

			localctx.(*PrimitivoContext)._FALSE = _m
		}
		localctx.(*PrimitivoContext).p = expresion.NewPrimitivo(false, interfaces.BOOLEAN, (func() int {
			if localctx.(*PrimitivoContext).Get_FALSE() == nil {
				return 0
			} else {
				return localctx.(*PrimitivoContext).Get_FALSE().GetLine()
			}
		}()), localctx.(*PrimitivoContext).Get_FALSE().GetColumn())

	case RustParID:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1037)

			var _x = p.listIDArray(0)

			localctx.(*PrimitivoContext).list = _x
		}
		localctx.(*PrimitivoContext).p = localctx.(*PrimitivoContext).GetList().GetP()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IListIDArrayContext is an interface to support dynamic dispatch.
type IListIDArrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_CORIZQ returns the _CORIZQ token.
	Get_CORIZQ() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_CORIZQ sets the _CORIZQ token.
	Set_CORIZQ(antlr.Token)

	// GetList returns the list rule contexts.
	GetList() IListIDArrayContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetList sets the list rule contexts.
	SetList(IListIDArrayContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsListIDArrayContext differentiates from other interfaces.
	IsListIDArrayContext()
}

type ListIDArrayContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	p           interfaces.Expresion
	list        IListIDArrayContext
	_ID         antlr.Token
	_CORIZQ     antlr.Token
	_expression IExpressionContext
}

func NewEmptyListIDArrayContext() *ListIDArrayContext {
	var p = new(ListIDArrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_listIDArray
	return p
}

func (*ListIDArrayContext) IsListIDArrayContext() {}

func NewListIDArrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListIDArrayContext {
	var p = new(ListIDArrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_listIDArray

	return p
}

func (s *ListIDArrayContext) GetParser() antlr.Parser { return s.parser }

func (s *ListIDArrayContext) Get_ID() antlr.Token { return s._ID }

func (s *ListIDArrayContext) Get_CORIZQ() antlr.Token { return s._CORIZQ }

func (s *ListIDArrayContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *ListIDArrayContext) Set_CORIZQ(v antlr.Token) { s._CORIZQ = v }

func (s *ListIDArrayContext) GetList() IListIDArrayContext { return s.list }

func (s *ListIDArrayContext) Get_expression() IExpressionContext { return s._expression }

func (s *ListIDArrayContext) SetList(v IListIDArrayContext) { s.list = v }

func (s *ListIDArrayContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *ListIDArrayContext) GetP() interfaces.Expresion { return s.p }

func (s *ListIDArrayContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *ListIDArrayContext) ID() antlr.TerminalNode {
	return s.GetToken(RustParID, 0)
}

func (s *ListIDArrayContext) CORIZQ() antlr.TerminalNode {
	return s.GetToken(RustParCORIZQ, 0)
}

func (s *ListIDArrayContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListIDArrayContext) CORDER() antlr.TerminalNode {
	return s.GetToken(RustParCORDER, 0)
}

func (s *ListIDArrayContext) ListIDArray() IListIDArrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListIDArrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListIDArrayContext)
}

func (s *ListIDArrayContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(RustParPUNTO, 0)
}

func (s *ListIDArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListIDArrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListIDArrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterListIDArray(s)
	}
}

func (s *ListIDArrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitListIDArray(s)
	}
}

func (p *RustPar) ListIDArray() (localctx IListIDArrayContext) {
	return p.listIDArray(0)
}

func (p *RustPar) listIDArray(_p int) (localctx IListIDArrayContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewListIDArrayContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IListIDArrayContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 106
	p.EnterRecursionRule(localctx, 106, RustParRULE_listIDArray, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1043)

		var _m = p.Match(RustParID)

		localctx.(*ListIDArrayContext)._ID = _m
	}

	localctx.(*ListIDArrayContext).p = expresion.NewIdentificador((func() string {
		if localctx.(*ListIDArrayContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*ListIDArrayContext).Get_ID().GetText()
		}
	}()), (func() int {
		if localctx.(*ListIDArrayContext).Get_ID() == nil {
			return 0
		} else {
			return localctx.(*ListIDArrayContext).Get_ID().GetLine()
		}
	}()), localctx.(*ListIDArrayContext).Get_ID().GetColumn())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1058)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1056)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
			case 1:
				localctx = NewListIDArrayContext(p, _parentctx, _parentState)
				localctx.(*ListIDArrayContext).list = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_listIDArray)
				p.SetState(1046)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1047)

					var _m = p.Match(RustParCORIZQ)

					localctx.(*ListIDArrayContext)._CORIZQ = _m
				}
				{
					p.SetState(1048)

					var _x = p.expression(0)

					localctx.(*ListIDArrayContext)._expression = _x
				}
				{
					p.SetState(1049)
					p.Match(RustParCORDER)
				}
				localctx.(*ListIDArrayContext).p = expresion.NewArrayAccess(localctx.(*ListIDArrayContext).GetList().GetP(), localctx.(*ListIDArrayContext).Get_expression().GetP(), (func() int {
					if localctx.(*ListIDArrayContext).Get_CORIZQ() == nil {
						return 0
					} else {
						return localctx.(*ListIDArrayContext).Get_CORIZQ().GetLine()
					}
				}()), (func() int {
					if localctx.(*ListIDArrayContext).Get_CORIZQ() == nil {
						return 0
					} else {
						return localctx.(*ListIDArrayContext).Get_CORIZQ().GetColumn()
					}
				}()))

			case 2:
				localctx = NewListIDArrayContext(p, _parentctx, _parentState)
				localctx.(*ListIDArrayContext).list = _prevctx
				p.PushNewRecursionContext(localctx, _startState, RustParRULE_listIDArray)
				p.SetState(1052)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1053)
					p.Match(RustParPUNTO)
				}
				{
					p.SetState(1054)

					var _m = p.Match(RustParID)

					localctx.(*ListIDArrayContext)._ID = _m
				}
				localctx.(*ListIDArrayContext).p = expresion.NewStructAccess(localctx.(*ListIDArrayContext).GetList().GetP(), (func() string {
					if localctx.(*ListIDArrayContext).Get_ID() == nil {
						return ""
					} else {
						return localctx.(*ListIDArrayContext).Get_ID().GetText()
					}
				}()), (func() antlr.Token {
					if localctx.(*ListIDArrayContext).GetList() == nil {
						return nil
					} else {
						return localctx.(*ListIDArrayContext).GetList().GetStart()
					}
				}()).GetLine(), (func() antlr.Token {
					if localctx.(*ListIDArrayContext).GetList() == nil {
						return nil
					} else {
						return localctx.(*ListIDArrayContext).GetList().GetStart()
					}
				}()).GetColumn())

			}

		}
		p.SetState(1060)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext())
	}

	return localctx
}

// IStringsContext is an interface to support dynamic dispatch.
type IStringsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_STRING returns the _STRING token.
	Get_STRING() antlr.Token

	// Set_STRING sets the _STRING token.
	Set_STRING(antlr.Token)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsStringsContext differentiates from other interfaces.
	IsStringsContext()
}

type StringsContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	p       interfaces.Expresion
	_STRING antlr.Token
}

func NewEmptyStringsContext() *StringsContext {
	var p = new(StringsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = RustParRULE_strings
	return p
}

func (*StringsContext) IsStringsContext() {}

func NewStringsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringsContext {
	var p = new(StringsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = RustParRULE_strings

	return p
}

func (s *StringsContext) GetParser() antlr.Parser { return s.parser }

func (s *StringsContext) Get_STRING() antlr.Token { return s._STRING }

func (s *StringsContext) Set_STRING(v antlr.Token) { s._STRING = v }

func (s *StringsContext) GetP() interfaces.Expresion { return s.p }

func (s *StringsContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *StringsContext) STRING() antlr.TerminalNode {
	return s.GetToken(RustParSTRING, 0)
}

func (s *StringsContext) AllAMP() []antlr.TerminalNode {
	return s.GetTokens(RustParAMP)
}

func (s *StringsContext) AMP(i int) antlr.TerminalNode {
	return s.GetToken(RustParAMP, i)
}

func (s *StringsContext) TO_STRING() antlr.TerminalNode {
	return s.GetToken(RustParTO_STRING, 0)
}

func (s *StringsContext) TO_OWNED() antlr.TerminalNode {
	return s.GetToken(RustParTO_OWNED, 0)
}

func (s *StringsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.EnterStrings(s)
	}
}

func (s *StringsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(RustParListener); ok {
		listenerT.ExitStrings(s)
	}
}

func (p *RustPar) Strings() (localctx IStringsContext) {
	this := p
	_ = this

	localctx = NewStringsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, RustParRULE_strings)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1076)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1062)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == RustParAMP {
			{
				p.SetState(1061)
				p.Match(RustParAMP)
			}

			p.SetState(1064)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1066)

			var _m = p.Match(RustParSTRING)

			localctx.(*StringsContext)._STRING = _m
		}
		p.SetState(1068)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1067)
				_la = p.GetTokenStream().LA(1)

				if !(_la == RustParTO_STRING || _la == RustParTO_OWNED) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

		str := (func() string {
			if localctx.(*StringsContext).Get_STRING() == nil {
				return ""
			} else {
				return localctx.(*StringsContext).Get_STRING().GetText()
			}
		}())[1 : len((func() string {
			if localctx.(*StringsContext).Get_STRING() == nil {
				return ""
			} else {
				return localctx.(*StringsContext).Get_STRING().GetText()
			}
		}()))-1]
		localctx.(*StringsContext).p = expresion.NewPrimitivo(str, interfaces.STR, (func() int {
			if localctx.(*StringsContext).Get_STRING() == nil {
				return 0
			} else {
				return localctx.(*StringsContext).Get_STRING().GetLine()
			}
		}()), localctx.(*StringsContext).Get_STRING().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1071)

			var _m = p.Match(RustParSTRING)

			localctx.(*StringsContext)._STRING = _m
		}
		{
			p.SetState(1072)
			_la = p.GetTokenStream().LA(1)

			if !(_la == RustParTO_STRING || _la == RustParTO_OWNED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

		str := (func() string {
			if localctx.(*StringsContext).Get_STRING() == nil {
				return ""
			} else {
				return localctx.(*StringsContext).Get_STRING().GetText()
			}
		}())[1 : len((func() string {
			if localctx.(*StringsContext).Get_STRING() == nil {
				return ""
			} else {
				return localctx.(*StringsContext).Get_STRING().GetText()
			}
		}()))-1]
		localctx.(*StringsContext).p = expresion.NewPrimitivo(str, interfaces.STRING, (func() int {
			if localctx.(*StringsContext).Get_STRING() == nil {
				return 0
			} else {
				return localctx.(*StringsContext).Get_STRING().GetLine()
			}
		}()), localctx.(*StringsContext).Get_STRING().GetColumn())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1074)

			var _m = p.Match(RustParSTRING)

			localctx.(*StringsContext)._STRING = _m
		}

		str := (func() string {
			if localctx.(*StringsContext).Get_STRING() == nil {
				return ""
			} else {
				return localctx.(*StringsContext).Get_STRING().GetText()
			}
		}())[1 : len((func() string {
			if localctx.(*StringsContext).Get_STRING() == nil {
				return ""
			} else {
				return localctx.(*StringsContext).Get_STRING().GetText()
			}
		}()))-1]
		localctx.(*StringsContext).p = expresion.NewPrimitivo(str, interfaces.STR, (func() int {
			if localctx.(*StringsContext).Get_STRING() == nil {
				return 0
			} else {
				return localctx.(*StringsContext).Get_STRING().GetLine()
			}
		}()), localctx.(*StringsContext).Get_STRING().GetColumn())

	}

	return localctx
}

func (p *RustPar) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 2:
		var t *List_FuncionesContext = nil
		if localctx != nil {
			t = localctx.(*List_FuncionesContext)
		}
		return p.List_Funciones_Sempred(t, predIndex)

	case 6:
		var t *Params_declarContext = nil
		if localctx != nil {
			t = localctx.(*Params_declarContext)
		}
		return p.Params_declar_Sempred(t, predIndex)

	case 13:
		var t *ListdecStructContext = nil
		if localctx != nil {
			t = localctx.(*ListdecStructContext)
		}
		return p.ListdecStruct_Sempred(t, predIndex)

	case 22:
		var t *ListParamsContext = nil
		if localctx != nil {
			t = localctx.(*ListParamsContext)
		}
		return p.ListParams_Sempred(t, predIndex)

	case 23:
		var t *ListParamsCallContext = nil
		if localctx != nil {
			t = localctx.(*ListParamsCallContext)
		}
		return p.ListParamsCall_Sempred(t, predIndex)

	case 29:
		var t *L_AccessStructContext = nil
		if localctx != nil {
			t = localctx.(*L_AccessStructContext)
		}
		return p.L_AccessStruct_Sempred(t, predIndex)

	case 30:
		var t *List_indexContext = nil
		if localctx != nil {
			t = localctx.(*List_indexContext)
		}
		return p.List_index_Sempred(t, predIndex)

	case 39:
		var t *Match_brazosContext = nil
		if localctx != nil {
			t = localctx.(*Match_brazosContext)
		}
		return p.Match_brazos_Sempred(t, predIndex)

	case 40:
		var t *Match_brazos_expContext = nil
		if localctx != nil {
			t = localctx.(*Match_brazos_expContext)
		}
		return p.Match_brazos_exp_Sempred(t, predIndex)

	case 43:
		var t *ListaOpcionesContext = nil
		if localctx != nil {
			t = localctx.(*ListaOpcionesContext)
		}
		return p.ListaOpciones_Sempred(t, predIndex)

	case 47:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 48:
		var t *Expr_aritContext = nil
		if localctx != nil {
			t = localctx.(*Expr_aritContext)
		}
		return p.Expr_arit_Sempred(t, predIndex)

	case 51:
		var t *L_StructExpContext = nil
		if localctx != nil {
			t = localctx.(*L_StructExpContext)
		}
		return p.L_StructExp_Sempred(t, predIndex)

	case 53:
		var t *ListIDArrayContext = nil
		if localctx != nil {
			t = localctx.(*ListIDArrayContext)
		}
		return p.ListIDArray_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *RustPar) List_Funciones_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) Params_declar_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) ListdecStruct_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) ListParams_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) ListParamsCall_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) L_AccessStruct_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) List_index_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) Match_brazos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) Match_brazos_exp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) ListaOpciones_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 11:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) Expr_arit_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 12:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 19)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) L_StructExp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 18:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *RustPar) ListIDArray_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 19:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
