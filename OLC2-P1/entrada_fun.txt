fn recur(mut a:i64) -> i64 {
   if a < 5 
   {
        a = a + 1;
        println!("a {}", a);
        a = recur(a);
        return a;
   } else {
       return a;
   }
   
}

fn main () {

//for n in 1..4 { // Recorre rango de 1:4
//        println!("{} ", n); // Ãšnicamente se recorre ascendentemente
//    } // Imprime 1 2 3
//    println!("");
//}

// Ejemplo 5 - Es aplicable para arreglos o vectores
let arr:[&str;3] = ["perro", "gato", "tortuga"];
println!("{:?} arr", arr);
//for letra in arr {
let mut i = 0;
for a in 0..2 {

    println!("{} -", arr[a]);


    //Imprime: perro es mi favorito, gato es mi favorito, tortuga es mi favorito,
}

println!("{}  es mi favorito", arr[0]);
println!("{}  es mi favorito", arr[1]);
println!("{}  es mi favorito", arr[2]);
println!("{}  es mi favorito", arr[3]);

}



}

fn suma(mut a:i64, mut b:i64) -> i64 {
    let res = a+b;

    println!("antes");
    return res;

    println!("ejecuta aqui");
}

//fn ack(mut m: i64, mut n: i64) -> i64 {
//    if m == 0 {
//        return n + 1;
//    } else if n == 0 {
//        return ack(m - 1, 1);
//    } else {
//        return ack(m - 1, ack(m, n - 1));
//    }
//}
 
//fn main() {
//    let a = ack(3, 5);
//    println!("{}", a); // 253
//}
