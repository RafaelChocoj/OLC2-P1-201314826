fn recur(mut a:i64) -> i64 {
   if a < 5 
   {
        a = a + 1;
        println!("a {}", a);
        a = recur(a);
        return a;
   } else {
       return a;
   }
   
}

fn main () {

    let mut animals =  ["perro", "gato", "tortuga"];
    println!("animals.len {}", animals.len());
    for letra in 0..animals.len() {
        println!("{} - es mi favorito {} ", letra, animals[letra]);
    }

let a:i64 = 34;
    let mut arr2 = [
    [ [ 1, 3, 5, 7], [ 5;4 ] ],
    [ [ 2, 4, 6, 8], [ 10;4 ] ],
    [ [ 2; 4 ], [ 0; 4 ] ]
    ];
    println!("{:?}", arr2);

    println!("len {}", arr2.len());
    println!("len {}", arr2[0].len());
    println!("len {}", arr2[0][1].len());

    //// Tamaño del vector n = 5
    //// Posiciones de acceso desde 0 a 4
    let mut vector = vec![1,2,3,4,5];

    println!("vector {:?}", vector);

    let mut v = vec![vec![1; 10],vec![2; 8],vec![3; 15],vec![5; 2],vec![8; 1]];
    println!("v: {:?}", v); 

    // Vector con valores iniciales
    let v1 = vec![1,2,3,4,5];
    // Valores repetidos
    let v2 = vec![0; 10];
    // es un vector de diez 0’s [0,0,0,0,0,0,0,0,0,0]

    println!("{:?}", v1); 
    println!("{:?}", v2); 

println!("***************"); 
    let mut v3: Vec<i64> = Vec::new();
    println!("{:?}", v3); 

    let mut v4: Vec<i64> = Vec::with_capacity(10);
    println!("{:?}", v4); 

    println!("v3 len: {}", v3.len()); 
    println!("v4 len: {}", v4.len()); 

    println!("v3 cap {}", v3.capacity()); 
    println!("v4 cap {}", v4.capacity()); 


    v4.push(1);
}



}

fn suma(mut a:i64, mut b:i64) -> i64 {
    let res = a+b;

    println!("antes");
    return res;

    println!("ejecuta aqui");
}

//fn ack(mut m: i64, mut n: i64) -> i64 {
//    if m == 0 {
//        return n + 1;
//    } else if n == 0 {
//        return ack(m - 1, 1);
//    } else {
//        return ack(m - 1, ack(m, n - 1));
//    }
//}
 
//fn main() {
//    let a = ack(3, 5);
//    println!("{}", a); // 253
//}
